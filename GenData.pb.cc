// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GenData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CaffeGenData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenData_DataField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenData_DataField_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenData_DataTranslate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenData_DataTranslate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenData_FieldTranslate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenData_FieldTranslate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenData_DataFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenData_DataFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenData_VecTbl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenData_VecTbl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenData_IterateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenData_DataSrc_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenData_FieldType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenData_DataTranslateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenData_NetEndType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GenData_2eproto() {
  protobuf_AddDesc_GenData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GenData.proto");
  GOOGLE_CHECK(file != NULL);
  CaffeGenData_descriptor_ = file->message_type(0);
  static const int CaffeGenData_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, iterate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, data_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, data_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, data_translates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, input_field_translates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, output_field_translates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, files_core_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, test_list_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, train_list_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, net_end_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, proto_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, model_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, config_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, num_accuracy_candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, glove_vec_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, data_filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, vec_tbls_core_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, vec_tbls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, dep_name_vec_tbl_),
  };
  CaffeGenData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenData_descriptor_,
      CaffeGenData::default_instance_,
      CaffeGenData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenData));
  CaffeGenData_DataField_descriptor_ = CaffeGenData_descriptor_->nested_type(0);
  static const int CaffeGenData_DataField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataField, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataField, field_type_),
  };
  CaffeGenData_DataField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenData_DataField_descriptor_,
      CaffeGenData_DataField::default_instance_,
      CaffeGenData_DataField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenData_DataField));
  CaffeGenData_DataTranslate_descriptor_ = CaffeGenData_descriptor_->nested_type(1);
  static const int CaffeGenData_DataTranslate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, translate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, iter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, match_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, match_field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, field_type_),
  };
  CaffeGenData_DataTranslate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenData_DataTranslate_descriptor_,
      CaffeGenData_DataTranslate::default_instance_,
      CaffeGenData_DataTranslate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataTranslate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenData_DataTranslate));
  CaffeGenData_FieldTranslate_descriptor_ = CaffeGenData_descriptor_->nested_type(2);
  static const int CaffeGenData_FieldTranslate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, b_can_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, max_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, replace_prob_),
  };
  CaffeGenData_FieldTranslate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenData_FieldTranslate_descriptor_,
      CaffeGenData_FieldTranslate::default_instance_,
      CaffeGenData_FieldTranslate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_FieldTranslate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenData_FieldTranslate));
  CaffeGenData_DataFilter_descriptor_ = CaffeGenData_descriptor_->nested_type(3);
  static const int CaffeGenData_DataFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataFilter, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataFilter, match_string_),
  };
  CaffeGenData_DataFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenData_DataFilter_descriptor_,
      CaffeGenData_DataFilter::default_instance_,
      CaffeGenData_DataFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_DataFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenData_DataFilter));
  CaffeGenData_VecTbl_descriptor_ = CaffeGenData_descriptor_->nested_type(4);
  static const int CaffeGenData_VecTbl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_VecTbl, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_VecTbl, path_),
  };
  CaffeGenData_VecTbl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenData_VecTbl_descriptor_,
      CaffeGenData_VecTbl::default_instance_,
      CaffeGenData_VecTbl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_VecTbl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenData_VecTbl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenData_VecTbl));
  CaffeGenData_IterateType_descriptor_ = CaffeGenData_descriptor_->enum_type(0);
  CaffeGenData_DataSrc_descriptor_ = CaffeGenData_descriptor_->enum_type(1);
  CaffeGenData_FieldType_descriptor_ = CaffeGenData_descriptor_->enum_type(2);
  CaffeGenData_DataTranslateType_descriptor_ = CaffeGenData_descriptor_->enum_type(3);
  CaffeGenData_NetEndType_descriptor_ = CaffeGenData_descriptor_->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GenData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenData_descriptor_, &CaffeGenData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenData_DataField_descriptor_, &CaffeGenData_DataField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenData_DataTranslate_descriptor_, &CaffeGenData_DataTranslate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenData_FieldTranslate_descriptor_, &CaffeGenData_FieldTranslate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenData_DataFilter_descriptor_, &CaffeGenData_DataFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenData_VecTbl_descriptor_, &CaffeGenData_VecTbl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GenData_2eproto() {
  delete CaffeGenData::default_instance_;
  delete CaffeGenData_reflection_;
  delete CaffeGenData_DataField::default_instance_;
  delete CaffeGenData_DataField_reflection_;
  delete CaffeGenData_DataTranslate::default_instance_;
  delete CaffeGenData_DataTranslate_reflection_;
  delete CaffeGenData_FieldTranslate::default_instance_;
  delete CaffeGenData_FieldTranslate_reflection_;
  delete CaffeGenData_DataFilter::default_instance_;
  delete CaffeGenData_DataFilter_reflection_;
  delete CaffeGenData_VecTbl::default_instance_;
  delete CaffeGenData_VecTbl_reflection_;
}

void protobuf_AddDesc_GenData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGenData.proto\"\251\020\n\014CaffeGenData\022\014\n\004name"
    "\030\001 \002(\t\022/\n\014iterate_type\030\002 \002(\0162\031.CaffeGenD"
    "ata.IterateType\022\'\n\010data_src\030\003 \002(\0162\025.Caff"
    "eGenData.DataSrc\022,\n\013data_fields\030\004 \003(\0132\027."
    "CaffeGenData.DataField\0224\n\017data_translate"
    "s\030\005 \003(\0132\033.CaffeGenData.DataTranslate\022<\n\026"
    "input_field_translates\030\006 \003(\0132\034.CaffeGenD"
    "ata.FieldTranslate\022=\n\027output_field_trans"
    "lates\030\007 \003(\0132\034.CaffeGenData.FieldTranslat"
    "e\022\026\n\016files_core_dir\030\010 \002(\t\022\033\n\023test_list_f"
    "ile_name\030\t \002(\t\022\034\n\024train_list_file_name\030\n"
    " \002(\t\022.\n\014net_end_type\030\013 \002(\0162\030.CaffeGenDat"
    "a.NetEndType\022\027\n\017proto_file_name\030\014 \002(\t\022\027\n"
    "\017model_file_name\030\r \002(\t\022\030\n\020config_file_na"
    "me\030\016 \002(\t\022\037\n\027num_accuracy_candidates\030\017 \001("
    "\005\022\033\n\023glove_vec_file_name\030\020 \002(\t\022.\n\014data_f"
    "ilters\030\021 \003(\0132\030.CaffeGenData.DataFilter\022\032"
    "\n\022vec_tbls_core_path\030\022 \002(\t\022&\n\010vec_tbls\030\023"
    " \003(\0132\024.CaffeGenData.VecTbl\022\030\n\020dep_name_v"
    "ec_tbl\030\024 \002(\t\032J\n\tDataField\022\020\n\010var_name\030\001 "
    "\002(\t\022+\n\nfield_type\030\003 \002(\0162\027.CaffeGenData.F"
    "ieldType\032\310\001\n\rDataTranslate\0227\n\016translate_"
    "type\030\001 \002(\0162\037.CaffeGenData.DataTranslateT"
    "ype\022\020\n\010var_name\030\002 \002(\t\022\021\n\titer_type\030\003 \001(\t"
    "\022\022\n\nmatch_name\030\004 \002(\t\022\030\n\020match_field_name"
    "\030\005 \001(\t\022+\n\nfield_type\030\006 \001(\0162\027.CaffeGenDat"
    "a.FieldType\032z\n\016FieldTranslate\022\020\n\010var_nam"
    "e\030\001 \001(\t\022\022\n\ntable_name\030\002 \002(\t\022\025\n\rb_can_rep"
    "lace\030\003 \001(\010\022\025\n\rmax_instances\030\004 \001(\005\022\024\n\014rep"
    "lace_prob\030\005 \001(\002\0324\n\nDataFilter\022\020\n\010var_nam"
    "e\030\002 \002(\t\022\024\n\014match_string\030\004 \002(\t\032$\n\006VecTbl\022"
    "\014\n\004name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\"A\n\013IterateTy"
    "pe\022\020\n\014ITERATE_WORD\020\001\022\017\n\013ITERATE_REC\020\002\022\017\n"
    "\013ITERATE_DEP\020\003\"\035\n\007DataSrc\022\022\n\016DATA_SRC_BO"
    "OKS\020\001\"\271\003\n\tFieldType\022\023\n\017FIELD_TYPE_WORD\020\001"
    "\022\030\n\024FIELD_TYPE_WORD_CORE\020\002\022\022\n\016FIELD_TYPE"
    "_POS\020\003\022\022\n\016FIELD_TYPE_WID\020\004\022\023\n\017FIELD_TYPE"
    "_RWID\020\005\022\027\n\023FIELD_TYPE_DEP_NAME\020\006\022\026\n\022FIEL"
    "D_TYPE_GOV_WID\020\007\022\026\n\022FIELD_TYPE_DEP_WID\020\010"
    "\022\027\n\023FIELD_TYPE_GOV_RWID\020\t\022\027\n\023FIELD_TYPE_"
    "DEP_RWID\020\n\022\023\n\017FIELD_TYPE_RDID\020\013\022\027\n\023FIELD"
    "_TYPE_GOV_RDID\020\014\022\027\n\023FIELD_TYPE_DEP_RDID\020"
    "\r\022\027\n\023FIELD_TYPE_GOV_WORD\020\016\022\027\n\023FIELD_TYPE"
    "_DEP_WORD\020\017\022\031\n\025FIELD_TYPE_DEP_NAME_G\020\020\022\031"
    "\n\025FIELD_TYPE_DEP_NAME_D\020\021\022\026\n\022FIELD_TYPE_"
    "INVALID\020\037\"\346\001\n\021DataTranslateType\022\037\n\033DATA_"
    "TRANSLATE_RWID_TO_WORD\020\001\022 \n\034DATA_TRANSLA"
    "TE_RWID_TO_COREF\020\002\022\037\n\033DATA_TRANSLATE_RWI"
    "D_TO_RDID\020\003\022#\n\037DATA_TRANSLATE_RDID_TO_DE"
    "P_NAME\020\004\022#\n\037DATA_TRANSLATE_RDID_TO_GOV_R"
    "WID\020\005\022#\n\037DATA_TRANSLATE_RDID_TO_DEP_RWID"
    "\020\006\"\?\n\nNetEndType\022\r\n\tEND_VALID\020\001\022\017\n\013END_O"
    "NE_HOT\020\002\022\021\n\rEND_MULTI_HOT\020\003", 2107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GenData.proto", &protobuf_RegisterTypes);
  CaffeGenData::default_instance_ = new CaffeGenData();
  CaffeGenData_DataField::default_instance_ = new CaffeGenData_DataField();
  CaffeGenData_DataTranslate::default_instance_ = new CaffeGenData_DataTranslate();
  CaffeGenData_FieldTranslate::default_instance_ = new CaffeGenData_FieldTranslate();
  CaffeGenData_DataFilter::default_instance_ = new CaffeGenData_DataFilter();
  CaffeGenData_VecTbl::default_instance_ = new CaffeGenData_VecTbl();
  CaffeGenData::default_instance_->InitAsDefaultInstance();
  CaffeGenData_DataField::default_instance_->InitAsDefaultInstance();
  CaffeGenData_DataTranslate::default_instance_->InitAsDefaultInstance();
  CaffeGenData_FieldTranslate::default_instance_->InitAsDefaultInstance();
  CaffeGenData_DataFilter::default_instance_->InitAsDefaultInstance();
  CaffeGenData_VecTbl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GenData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GenData_2eproto {
  StaticDescriptorInitializer_GenData_2eproto() {
    protobuf_AddDesc_GenData_2eproto();
  }
} static_descriptor_initializer_GenData_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CaffeGenData_IterateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_IterateType_descriptor_;
}
bool CaffeGenData_IterateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenData_IterateType CaffeGenData::ITERATE_WORD;
const CaffeGenData_IterateType CaffeGenData::ITERATE_REC;
const CaffeGenData_IterateType CaffeGenData::ITERATE_DEP;
const CaffeGenData_IterateType CaffeGenData::IterateType_MIN;
const CaffeGenData_IterateType CaffeGenData::IterateType_MAX;
const int CaffeGenData::IterateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenData_DataSrc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_DataSrc_descriptor_;
}
bool CaffeGenData_DataSrc_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenData_DataSrc CaffeGenData::DATA_SRC_BOOKS;
const CaffeGenData_DataSrc CaffeGenData::DataSrc_MIN;
const CaffeGenData_DataSrc CaffeGenData::DataSrc_MAX;
const int CaffeGenData::DataSrc_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenData_FieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_FieldType_descriptor_;
}
bool CaffeGenData_FieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_WORD;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_WORD_CORE;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_POS;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_WID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_RWID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_NAME;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_GOV_WID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_WID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_GOV_RWID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_RWID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_RDID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_GOV_RDID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_RDID;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_GOV_WORD;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_WORD;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_NAME_G;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_DEP_NAME_D;
const CaffeGenData_FieldType CaffeGenData::FIELD_TYPE_INVALID;
const CaffeGenData_FieldType CaffeGenData::FieldType_MIN;
const CaffeGenData_FieldType CaffeGenData::FieldType_MAX;
const int CaffeGenData::FieldType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenData_DataTranslateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_DataTranslateType_descriptor_;
}
bool CaffeGenData_DataTranslateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenData_DataTranslateType CaffeGenData::DATA_TRANSLATE_RWID_TO_WORD;
const CaffeGenData_DataTranslateType CaffeGenData::DATA_TRANSLATE_RWID_TO_COREF;
const CaffeGenData_DataTranslateType CaffeGenData::DATA_TRANSLATE_RWID_TO_RDID;
const CaffeGenData_DataTranslateType CaffeGenData::DATA_TRANSLATE_RDID_TO_DEP_NAME;
const CaffeGenData_DataTranslateType CaffeGenData::DATA_TRANSLATE_RDID_TO_GOV_RWID;
const CaffeGenData_DataTranslateType CaffeGenData::DATA_TRANSLATE_RDID_TO_DEP_RWID;
const CaffeGenData_DataTranslateType CaffeGenData::DataTranslateType_MIN;
const CaffeGenData_DataTranslateType CaffeGenData::DataTranslateType_MAX;
const int CaffeGenData::DataTranslateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenData_NetEndType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_NetEndType_descriptor_;
}
bool CaffeGenData_NetEndType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenData_NetEndType CaffeGenData::END_VALID;
const CaffeGenData_NetEndType CaffeGenData::END_ONE_HOT;
const CaffeGenData_NetEndType CaffeGenData::END_MULTI_HOT;
const CaffeGenData_NetEndType CaffeGenData::NetEndType_MIN;
const CaffeGenData_NetEndType CaffeGenData::NetEndType_MAX;
const int CaffeGenData::NetEndType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CaffeGenData_DataField::kVarNameFieldNumber;
const int CaffeGenData_DataField::kFieldTypeFieldNumber;
#endif  // !_MSC_VER

CaffeGenData_DataField::CaffeGenData_DataField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenData_DataField::InitAsDefaultInstance() {
}

CaffeGenData_DataField::CaffeGenData_DataField(const CaffeGenData_DataField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenData_DataField::SharedCtor() {
  _cached_size_ = 0;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenData_DataField::~CaffeGenData_DataField() {
  SharedDtor();
}

void CaffeGenData_DataField::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenData_DataField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenData_DataField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_DataField_descriptor_;
}

const CaffeGenData_DataField& CaffeGenData_DataField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenData_2eproto();
  return *default_instance_;
}

CaffeGenData_DataField* CaffeGenData_DataField::default_instance_ = NULL;

CaffeGenData_DataField* CaffeGenData_DataField::New() const {
  return new CaffeGenData_DataField;
}

void CaffeGenData_DataField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    field_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenData_DataField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string var_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_field_type;
        break;
      }

      // required .CaffeGenData.FieldType field_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenData_FieldType_IsValid(value)) {
            set_field_type(static_cast< ::CaffeGenData_FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenData_DataField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string var_name = 1;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->var_name(), output);
  }

  // required .CaffeGenData.FieldType field_type = 3;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->field_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenData_DataField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string var_name = 1;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_name(), target);
  }

  // required .CaffeGenData.FieldType field_type = 3;
  if (has_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->field_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenData_DataField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string var_name = 1;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // required .CaffeGenData.FieldType field_type = 3;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenData_DataField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenData_DataField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenData_DataField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenData_DataField::MergeFrom(const CaffeGenData_DataField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenData_DataField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenData_DataField::CopyFrom(const CaffeGenData_DataField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenData_DataField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaffeGenData_DataField::Swap(CaffeGenData_DataField* other) {
  if (other != this) {
    std::swap(var_name_, other->var_name_);
    std::swap(field_type_, other->field_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenData_DataField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenData_DataField_descriptor_;
  metadata.reflection = CaffeGenData_DataField_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenData_DataTranslate::kTranslateTypeFieldNumber;
const int CaffeGenData_DataTranslate::kVarNameFieldNumber;
const int CaffeGenData_DataTranslate::kIterTypeFieldNumber;
const int CaffeGenData_DataTranslate::kMatchNameFieldNumber;
const int CaffeGenData_DataTranslate::kMatchFieldNameFieldNumber;
const int CaffeGenData_DataTranslate::kFieldTypeFieldNumber;
#endif  // !_MSC_VER

CaffeGenData_DataTranslate::CaffeGenData_DataTranslate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenData_DataTranslate::InitAsDefaultInstance() {
}

CaffeGenData_DataTranslate::CaffeGenData_DataTranslate(const CaffeGenData_DataTranslate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenData_DataTranslate::SharedCtor() {
  _cached_size_ = 0;
  translate_type_ = 1;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iter_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenData_DataTranslate::~CaffeGenData_DataTranslate() {
  SharedDtor();
}

void CaffeGenData_DataTranslate::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (iter_type_ != &::google::protobuf::internal::kEmptyString) {
    delete iter_type_;
  }
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_name_;
  }
  if (match_field_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_field_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenData_DataTranslate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenData_DataTranslate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_DataTranslate_descriptor_;
}

const CaffeGenData_DataTranslate& CaffeGenData_DataTranslate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenData_2eproto();
  return *default_instance_;
}

CaffeGenData_DataTranslate* CaffeGenData_DataTranslate::default_instance_ = NULL;

CaffeGenData_DataTranslate* CaffeGenData_DataTranslate::New() const {
  return new CaffeGenData_DataTranslate;
}

void CaffeGenData_DataTranslate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    translate_type_ = 1;
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    if (has_iter_type()) {
      if (iter_type_ != &::google::protobuf::internal::kEmptyString) {
        iter_type_->clear();
      }
    }
    if (has_match_name()) {
      if (match_name_ != &::google::protobuf::internal::kEmptyString) {
        match_name_->clear();
      }
    }
    if (has_match_field_name()) {
      if (match_field_name_ != &::google::protobuf::internal::kEmptyString) {
        match_field_name_->clear();
      }
    }
    field_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenData_DataTranslate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CaffeGenData.DataTranslateType translate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenData_DataTranslateType_IsValid(value)) {
            set_translate_type(static_cast< ::CaffeGenData_DataTranslateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_var_name;
        break;
      }

      // required string var_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_var_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iter_type;
        break;
      }

      // optional string iter_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iter_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iter_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iter_type().data(), this->iter_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match_name;
        break;
      }

      // required string match_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_name().data(), this->match_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_match_field_name;
        break;
      }

      // optional string match_field_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_field_name().data(), this->match_field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_field_type;
        break;
      }

      // optional .CaffeGenData.FieldType field_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenData_FieldType_IsValid(value)) {
            set_field_type(static_cast< ::CaffeGenData_FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenData_DataTranslate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CaffeGenData.DataTranslateType translate_type = 1;
  if (has_translate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->translate_type(), output);
  }

  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->var_name(), output);
  }

  // optional string iter_type = 3;
  if (has_iter_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iter_type().data(), this->iter_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->iter_type(), output);
  }

  // required string match_name = 4;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->match_name(), output);
  }

  // optional string match_field_name = 5;
  if (has_match_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_field_name().data(), this->match_field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->match_field_name(), output);
  }

  // optional .CaffeGenData.FieldType field_type = 6;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->field_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenData_DataTranslate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CaffeGenData.DataTranslateType translate_type = 1;
  if (has_translate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->translate_type(), target);
  }

  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var_name(), target);
  }

  // optional string iter_type = 3;
  if (has_iter_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iter_type().data(), this->iter_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iter_type(), target);
  }

  // required string match_name = 4;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->match_name(), target);
  }

  // optional string match_field_name = 5;
  if (has_match_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_field_name().data(), this->match_field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->match_field_name(), target);
  }

  // optional .CaffeGenData.FieldType field_type = 6;
  if (has_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->field_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenData_DataTranslate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CaffeGenData.DataTranslateType translate_type = 1;
    if (has_translate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->translate_type());
    }

    // required string var_name = 2;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // optional string iter_type = 3;
    if (has_iter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iter_type());
    }

    // required string match_name = 4;
    if (has_match_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_name());
    }

    // optional string match_field_name = 5;
    if (has_match_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_field_name());
    }

    // optional .CaffeGenData.FieldType field_type = 6;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenData_DataTranslate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenData_DataTranslate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenData_DataTranslate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenData_DataTranslate::MergeFrom(const CaffeGenData_DataTranslate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translate_type()) {
      set_translate_type(from.translate_type());
    }
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_iter_type()) {
      set_iter_type(from.iter_type());
    }
    if (from.has_match_name()) {
      set_match_name(from.match_name());
    }
    if (from.has_match_field_name()) {
      set_match_field_name(from.match_field_name());
    }
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenData_DataTranslate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenData_DataTranslate::CopyFrom(const CaffeGenData_DataTranslate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenData_DataTranslate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void CaffeGenData_DataTranslate::Swap(CaffeGenData_DataTranslate* other) {
  if (other != this) {
    std::swap(translate_type_, other->translate_type_);
    std::swap(var_name_, other->var_name_);
    std::swap(iter_type_, other->iter_type_);
    std::swap(match_name_, other->match_name_);
    std::swap(match_field_name_, other->match_field_name_);
    std::swap(field_type_, other->field_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenData_DataTranslate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenData_DataTranslate_descriptor_;
  metadata.reflection = CaffeGenData_DataTranslate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenData_FieldTranslate::kVarNameFieldNumber;
const int CaffeGenData_FieldTranslate::kTableNameFieldNumber;
const int CaffeGenData_FieldTranslate::kBCanReplaceFieldNumber;
const int CaffeGenData_FieldTranslate::kMaxInstancesFieldNumber;
const int CaffeGenData_FieldTranslate::kReplaceProbFieldNumber;
#endif  // !_MSC_VER

CaffeGenData_FieldTranslate::CaffeGenData_FieldTranslate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenData_FieldTranslate::InitAsDefaultInstance() {
}

CaffeGenData_FieldTranslate::CaffeGenData_FieldTranslate(const CaffeGenData_FieldTranslate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenData_FieldTranslate::SharedCtor() {
  _cached_size_ = 0;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  b_can_replace_ = false;
  max_instances_ = 0;
  replace_prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenData_FieldTranslate::~CaffeGenData_FieldTranslate() {
  SharedDtor();
}

void CaffeGenData_FieldTranslate::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenData_FieldTranslate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenData_FieldTranslate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_FieldTranslate_descriptor_;
}

const CaffeGenData_FieldTranslate& CaffeGenData_FieldTranslate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenData_2eproto();
  return *default_instance_;
}

CaffeGenData_FieldTranslate* CaffeGenData_FieldTranslate::default_instance_ = NULL;

CaffeGenData_FieldTranslate* CaffeGenData_FieldTranslate::New() const {
  return new CaffeGenData_FieldTranslate;
}

void CaffeGenData_FieldTranslate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    b_can_replace_ = false;
    max_instances_ = 0;
    replace_prob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenData_FieldTranslate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string var_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required string table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_b_can_replace;
        break;
      }

      // optional bool b_can_replace = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_can_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_can_replace_)));
          set_has_b_can_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_instances;
        break;
      }

      // optional int32 max_instances = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_instances_)));
          set_has_max_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_replace_prob;
        break;
      }

      // optional float replace_prob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_replace_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replace_prob_)));
          set_has_replace_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenData_FieldTranslate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string var_name = 1;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->var_name(), output);
  }

  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_name(), output);
  }

  // optional bool b_can_replace = 3;
  if (has_b_can_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->b_can_replace(), output);
  }

  // optional int32 max_instances = 4;
  if (has_max_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_instances(), output);
  }

  // optional float replace_prob = 5;
  if (has_replace_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->replace_prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenData_FieldTranslate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string var_name = 1;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_name(), target);
  }

  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // optional bool b_can_replace = 3;
  if (has_b_can_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->b_can_replace(), target);
  }

  // optional int32 max_instances = 4;
  if (has_max_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_instances(), target);
  }

  // optional float replace_prob = 5;
  if (has_replace_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->replace_prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenData_FieldTranslate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string var_name = 1;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // required string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional bool b_can_replace = 3;
    if (has_b_can_replace()) {
      total_size += 1 + 1;
    }

    // optional int32 max_instances = 4;
    if (has_max_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_instances());
    }

    // optional float replace_prob = 5;
    if (has_replace_prob()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenData_FieldTranslate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenData_FieldTranslate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenData_FieldTranslate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenData_FieldTranslate::MergeFrom(const CaffeGenData_FieldTranslate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_b_can_replace()) {
      set_b_can_replace(from.b_can_replace());
    }
    if (from.has_max_instances()) {
      set_max_instances(from.max_instances());
    }
    if (from.has_replace_prob()) {
      set_replace_prob(from.replace_prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenData_FieldTranslate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenData_FieldTranslate::CopyFrom(const CaffeGenData_FieldTranslate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenData_FieldTranslate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CaffeGenData_FieldTranslate::Swap(CaffeGenData_FieldTranslate* other) {
  if (other != this) {
    std::swap(var_name_, other->var_name_);
    std::swap(table_name_, other->table_name_);
    std::swap(b_can_replace_, other->b_can_replace_);
    std::swap(max_instances_, other->max_instances_);
    std::swap(replace_prob_, other->replace_prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenData_FieldTranslate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenData_FieldTranslate_descriptor_;
  metadata.reflection = CaffeGenData_FieldTranslate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenData_DataFilter::kVarNameFieldNumber;
const int CaffeGenData_DataFilter::kMatchStringFieldNumber;
#endif  // !_MSC_VER

CaffeGenData_DataFilter::CaffeGenData_DataFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenData_DataFilter::InitAsDefaultInstance() {
}

CaffeGenData_DataFilter::CaffeGenData_DataFilter(const CaffeGenData_DataFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenData_DataFilter::SharedCtor() {
  _cached_size_ = 0;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenData_DataFilter::~CaffeGenData_DataFilter() {
  SharedDtor();
}

void CaffeGenData_DataFilter::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (match_string_ != &::google::protobuf::internal::kEmptyString) {
    delete match_string_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenData_DataFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenData_DataFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_DataFilter_descriptor_;
}

const CaffeGenData_DataFilter& CaffeGenData_DataFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenData_2eproto();
  return *default_instance_;
}

CaffeGenData_DataFilter* CaffeGenData_DataFilter::default_instance_ = NULL;

CaffeGenData_DataFilter* CaffeGenData_DataFilter::New() const {
  return new CaffeGenData_DataFilter;
}

void CaffeGenData_DataFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    if (has_match_string()) {
      if (match_string_ != &::google::protobuf::internal::kEmptyString) {
        match_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenData_DataFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string var_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match_string;
        break;
      }

      // required string match_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_string().data(), this->match_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenData_DataFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->var_name(), output);
  }

  // required string match_string = 4;
  if (has_match_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_string().data(), this->match_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->match_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenData_DataFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var_name(), target);
  }

  // required string match_string = 4;
  if (has_match_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_string().data(), this->match_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->match_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenData_DataFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string var_name = 2;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // required string match_string = 4;
    if (has_match_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenData_DataFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenData_DataFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenData_DataFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenData_DataFilter::MergeFrom(const CaffeGenData_DataFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_match_string()) {
      set_match_string(from.match_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenData_DataFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenData_DataFilter::CopyFrom(const CaffeGenData_DataFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenData_DataFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaffeGenData_DataFilter::Swap(CaffeGenData_DataFilter* other) {
  if (other != this) {
    std::swap(var_name_, other->var_name_);
    std::swap(match_string_, other->match_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenData_DataFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenData_DataFilter_descriptor_;
  metadata.reflection = CaffeGenData_DataFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenData_VecTbl::kNameFieldNumber;
const int CaffeGenData_VecTbl::kPathFieldNumber;
#endif  // !_MSC_VER

CaffeGenData_VecTbl::CaffeGenData_VecTbl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenData_VecTbl::InitAsDefaultInstance() {
}

CaffeGenData_VecTbl::CaffeGenData_VecTbl(const CaffeGenData_VecTbl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenData_VecTbl::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenData_VecTbl::~CaffeGenData_VecTbl() {
  SharedDtor();
}

void CaffeGenData_VecTbl::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenData_VecTbl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenData_VecTbl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_VecTbl_descriptor_;
}

const CaffeGenData_VecTbl& CaffeGenData_VecTbl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenData_2eproto();
  return *default_instance_;
}

CaffeGenData_VecTbl* CaffeGenData_VecTbl::default_instance_ = NULL;

CaffeGenData_VecTbl* CaffeGenData_VecTbl::New() const {
  return new CaffeGenData_VecTbl;
}

void CaffeGenData_VecTbl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenData_VecTbl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenData_VecTbl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenData_VecTbl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenData_VecTbl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenData_VecTbl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenData_VecTbl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenData_VecTbl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenData_VecTbl::MergeFrom(const CaffeGenData_VecTbl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenData_VecTbl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenData_VecTbl::CopyFrom(const CaffeGenData_VecTbl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenData_VecTbl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaffeGenData_VecTbl::Swap(CaffeGenData_VecTbl* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenData_VecTbl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenData_VecTbl_descriptor_;
  metadata.reflection = CaffeGenData_VecTbl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenData::kNameFieldNumber;
const int CaffeGenData::kIterateTypeFieldNumber;
const int CaffeGenData::kDataSrcFieldNumber;
const int CaffeGenData::kDataFieldsFieldNumber;
const int CaffeGenData::kDataTranslatesFieldNumber;
const int CaffeGenData::kInputFieldTranslatesFieldNumber;
const int CaffeGenData::kOutputFieldTranslatesFieldNumber;
const int CaffeGenData::kFilesCoreDirFieldNumber;
const int CaffeGenData::kTestListFileNameFieldNumber;
const int CaffeGenData::kTrainListFileNameFieldNumber;
const int CaffeGenData::kNetEndTypeFieldNumber;
const int CaffeGenData::kProtoFileNameFieldNumber;
const int CaffeGenData::kModelFileNameFieldNumber;
const int CaffeGenData::kConfigFileNameFieldNumber;
const int CaffeGenData::kNumAccuracyCandidatesFieldNumber;
const int CaffeGenData::kGloveVecFileNameFieldNumber;
const int CaffeGenData::kDataFiltersFieldNumber;
const int CaffeGenData::kVecTblsCorePathFieldNumber;
const int CaffeGenData::kVecTblsFieldNumber;
const int CaffeGenData::kDepNameVecTblFieldNumber;
#endif  // !_MSC_VER

CaffeGenData::CaffeGenData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenData::InitAsDefaultInstance() {
}

CaffeGenData::CaffeGenData(const CaffeGenData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iterate_type_ = 1;
  data_src_ = 1;
  files_core_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  train_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_end_type_ = 1;
  proto_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_accuracy_candidates_ = 0;
  glove_vec_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vec_tbls_core_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dep_name_vec_tbl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenData::~CaffeGenData() {
  SharedDtor();
}

void CaffeGenData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (files_core_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete files_core_dir_;
  }
  if (test_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete test_list_file_name_;
  }
  if (train_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete train_list_file_name_;
  }
  if (proto_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_file_name_;
  }
  if (model_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_name_;
  }
  if (config_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete config_file_name_;
  }
  if (glove_vec_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete glove_vec_file_name_;
  }
  if (vec_tbls_core_path_ != &::google::protobuf::internal::kEmptyString) {
    delete vec_tbls_core_path_;
  }
  if (dep_name_vec_tbl_ != &::google::protobuf::internal::kEmptyString) {
    delete dep_name_vec_tbl_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenData_descriptor_;
}

const CaffeGenData& CaffeGenData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenData_2eproto();
  return *default_instance_;
}

CaffeGenData* CaffeGenData::default_instance_ = NULL;

CaffeGenData* CaffeGenData::New() const {
  return new CaffeGenData;
}

void CaffeGenData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    iterate_type_ = 1;
    data_src_ = 1;
    if (has_files_core_dir()) {
      if (files_core_dir_ != &::google::protobuf::internal::kEmptyString) {
        files_core_dir_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_test_list_file_name()) {
      if (test_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
        test_list_file_name_->clear();
      }
    }
    if (has_train_list_file_name()) {
      if (train_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
        train_list_file_name_->clear();
      }
    }
    net_end_type_ = 1;
    if (has_proto_file_name()) {
      if (proto_file_name_ != &::google::protobuf::internal::kEmptyString) {
        proto_file_name_->clear();
      }
    }
    if (has_model_file_name()) {
      if (model_file_name_ != &::google::protobuf::internal::kEmptyString) {
        model_file_name_->clear();
      }
    }
    if (has_config_file_name()) {
      if (config_file_name_ != &::google::protobuf::internal::kEmptyString) {
        config_file_name_->clear();
      }
    }
    num_accuracy_candidates_ = 0;
    if (has_glove_vec_file_name()) {
      if (glove_vec_file_name_ != &::google::protobuf::internal::kEmptyString) {
        glove_vec_file_name_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_vec_tbls_core_path()) {
      if (vec_tbls_core_path_ != &::google::protobuf::internal::kEmptyString) {
        vec_tbls_core_path_->clear();
      }
    }
    if (has_dep_name_vec_tbl()) {
      if (dep_name_vec_tbl_ != &::google::protobuf::internal::kEmptyString) {
        dep_name_vec_tbl_->clear();
      }
    }
  }
  data_fields_.Clear();
  data_translates_.Clear();
  input_field_translates_.Clear();
  output_field_translates_.Clear();
  data_filters_.Clear();
  vec_tbls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iterate_type;
        break;
      }

      // required .CaffeGenData.IterateType iterate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iterate_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenData_IterateType_IsValid(value)) {
            set_iterate_type(static_cast< ::CaffeGenData_IterateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_src;
        break;
      }

      // required .CaffeGenData.DataSrc data_src = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_src:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenData_DataSrc_IsValid(value)) {
            set_data_src(static_cast< ::CaffeGenData_DataSrc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_fields;
        break;
      }

      // repeated .CaffeGenData.DataField data_fields = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_fields;
        if (input->ExpectTag(42)) goto parse_data_translates;
        break;
      }

      // repeated .CaffeGenData.DataTranslate data_translates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_translates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_translates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_translates;
        if (input->ExpectTag(50)) goto parse_input_field_translates;
        break;
      }

      // repeated .CaffeGenData.FieldTranslate input_field_translates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_field_translates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_field_translates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_input_field_translates;
        if (input->ExpectTag(58)) goto parse_output_field_translates;
        break;
      }

      // repeated .CaffeGenData.FieldTranslate output_field_translates = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_field_translates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_field_translates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_output_field_translates;
        if (input->ExpectTag(66)) goto parse_files_core_dir;
        break;
      }

      // required string files_core_dir = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files_core_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_files_core_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->files_core_dir().data(), this->files_core_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_test_list_file_name;
        break;
      }

      // required string test_list_file_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_list_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_list_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_list_file_name().data(), this->test_list_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_train_list_file_name;
        break;
      }

      // required string train_list_file_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_list_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_list_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_list_file_name().data(), this->train_list_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_net_end_type;
        break;
      }

      // required .CaffeGenData.NetEndType net_end_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_end_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenData_NetEndType_IsValid(value)) {
            set_net_end_type(static_cast< ::CaffeGenData_NetEndType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_proto_file_name;
        break;
      }

      // required string proto_file_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proto_file_name().data(), this->proto_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_model_file_name;
        break;
      }

      // required string model_file_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_file_name().data(), this->model_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_config_file_name;
        break;
      }

      // required string config_file_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config_file_name().data(), this->config_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_num_accuracy_candidates;
        break;
      }

      // optional int32 num_accuracy_candidates = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_accuracy_candidates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accuracy_candidates_)));
          set_has_num_accuracy_candidates();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_glove_vec_file_name;
        break;
      }

      // required string glove_vec_file_name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glove_vec_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glove_vec_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glove_vec_file_name().data(), this->glove_vec_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_data_filters;
        break;
      }

      // repeated .CaffeGenData.DataFilter data_filters = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_filters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_data_filters;
        if (input->ExpectTag(146)) goto parse_vec_tbls_core_path;
        break;
      }

      // required string vec_tbls_core_path = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec_tbls_core_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vec_tbls_core_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vec_tbls_core_path().data(), this->vec_tbls_core_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_vec_tbls;
        break;
      }

      // repeated .CaffeGenData.VecTbl vec_tbls = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec_tbls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vec_tbls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_vec_tbls;
        if (input->ExpectTag(162)) goto parse_dep_name_vec_tbl;
        break;
      }

      // required string dep_name_vec_tbl = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_name_vec_tbl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dep_name_vec_tbl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dep_name_vec_tbl().data(), this->dep_name_vec_tbl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .CaffeGenData.IterateType iterate_type = 2;
  if (has_iterate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->iterate_type(), output);
  }

  // required .CaffeGenData.DataSrc data_src = 3;
  if (has_data_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_src(), output);
  }

  // repeated .CaffeGenData.DataField data_fields = 4;
  for (int i = 0; i < this->data_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_fields(i), output);
  }

  // repeated .CaffeGenData.DataTranslate data_translates = 5;
  for (int i = 0; i < this->data_translates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_translates(i), output);
  }

  // repeated .CaffeGenData.FieldTranslate input_field_translates = 6;
  for (int i = 0; i < this->input_field_translates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->input_field_translates(i), output);
  }

  // repeated .CaffeGenData.FieldTranslate output_field_translates = 7;
  for (int i = 0; i < this->output_field_translates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->output_field_translates(i), output);
  }

  // required string files_core_dir = 8;
  if (has_files_core_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files_core_dir().data(), this->files_core_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->files_core_dir(), output);
  }

  // required string test_list_file_name = 9;
  if (has_test_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_list_file_name().data(), this->test_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->test_list_file_name(), output);
  }

  // required string train_list_file_name = 10;
  if (has_train_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_list_file_name().data(), this->train_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->train_list_file_name(), output);
  }

  // required .CaffeGenData.NetEndType net_end_type = 11;
  if (has_net_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->net_end_type(), output);
  }

  // required string proto_file_name = 12;
  if (has_proto_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proto_file_name().data(), this->proto_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->proto_file_name(), output);
  }

  // required string model_file_name = 13;
  if (has_model_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->model_file_name(), output);
  }

  // required string config_file_name = 14;
  if (has_config_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_file_name().data(), this->config_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->config_file_name(), output);
  }

  // optional int32 num_accuracy_candidates = 15;
  if (has_num_accuracy_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->num_accuracy_candidates(), output);
  }

  // required string glove_vec_file_name = 16;
  if (has_glove_vec_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glove_vec_file_name().data(), this->glove_vec_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->glove_vec_file_name(), output);
  }

  // repeated .CaffeGenData.DataFilter data_filters = 17;
  for (int i = 0; i < this->data_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->data_filters(i), output);
  }

  // required string vec_tbls_core_path = 18;
  if (has_vec_tbls_core_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vec_tbls_core_path().data(), this->vec_tbls_core_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->vec_tbls_core_path(), output);
  }

  // repeated .CaffeGenData.VecTbl vec_tbls = 19;
  for (int i = 0; i < this->vec_tbls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->vec_tbls(i), output);
  }

  // required string dep_name_vec_tbl = 20;
  if (has_dep_name_vec_tbl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name_vec_tbl().data(), this->dep_name_vec_tbl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->dep_name_vec_tbl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .CaffeGenData.IterateType iterate_type = 2;
  if (has_iterate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->iterate_type(), target);
  }

  // required .CaffeGenData.DataSrc data_src = 3;
  if (has_data_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_src(), target);
  }

  // repeated .CaffeGenData.DataField data_fields = 4;
  for (int i = 0; i < this->data_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_fields(i), target);
  }

  // repeated .CaffeGenData.DataTranslate data_translates = 5;
  for (int i = 0; i < this->data_translates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_translates(i), target);
  }

  // repeated .CaffeGenData.FieldTranslate input_field_translates = 6;
  for (int i = 0; i < this->input_field_translates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->input_field_translates(i), target);
  }

  // repeated .CaffeGenData.FieldTranslate output_field_translates = 7;
  for (int i = 0; i < this->output_field_translates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->output_field_translates(i), target);
  }

  // required string files_core_dir = 8;
  if (has_files_core_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files_core_dir().data(), this->files_core_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->files_core_dir(), target);
  }

  // required string test_list_file_name = 9;
  if (has_test_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_list_file_name().data(), this->test_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->test_list_file_name(), target);
  }

  // required string train_list_file_name = 10;
  if (has_train_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_list_file_name().data(), this->train_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->train_list_file_name(), target);
  }

  // required .CaffeGenData.NetEndType net_end_type = 11;
  if (has_net_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->net_end_type(), target);
  }

  // required string proto_file_name = 12;
  if (has_proto_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proto_file_name().data(), this->proto_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->proto_file_name(), target);
  }

  // required string model_file_name = 13;
  if (has_model_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model_file_name(), target);
  }

  // required string config_file_name = 14;
  if (has_config_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_file_name().data(), this->config_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->config_file_name(), target);
  }

  // optional int32 num_accuracy_candidates = 15;
  if (has_num_accuracy_candidates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->num_accuracy_candidates(), target);
  }

  // required string glove_vec_file_name = 16;
  if (has_glove_vec_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glove_vec_file_name().data(), this->glove_vec_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->glove_vec_file_name(), target);
  }

  // repeated .CaffeGenData.DataFilter data_filters = 17;
  for (int i = 0; i < this->data_filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->data_filters(i), target);
  }

  // required string vec_tbls_core_path = 18;
  if (has_vec_tbls_core_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vec_tbls_core_path().data(), this->vec_tbls_core_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->vec_tbls_core_path(), target);
  }

  // repeated .CaffeGenData.VecTbl vec_tbls = 19;
  for (int i = 0; i < this->vec_tbls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->vec_tbls(i), target);
  }

  // required string dep_name_vec_tbl = 20;
  if (has_dep_name_vec_tbl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name_vec_tbl().data(), this->dep_name_vec_tbl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->dep_name_vec_tbl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .CaffeGenData.IterateType iterate_type = 2;
    if (has_iterate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iterate_type());
    }

    // required .CaffeGenData.DataSrc data_src = 3;
    if (has_data_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_src());
    }

    // required string files_core_dir = 8;
    if (has_files_core_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->files_core_dir());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string test_list_file_name = 9;
    if (has_test_list_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_list_file_name());
    }

    // required string train_list_file_name = 10;
    if (has_train_list_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_list_file_name());
    }

    // required .CaffeGenData.NetEndType net_end_type = 11;
    if (has_net_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->net_end_type());
    }

    // required string proto_file_name = 12;
    if (has_proto_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file_name());
    }

    // required string model_file_name = 13;
    if (has_model_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_file_name());
    }

    // required string config_file_name = 14;
    if (has_config_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file_name());
    }

    // optional int32 num_accuracy_candidates = 15;
    if (has_num_accuracy_candidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_accuracy_candidates());
    }

    // required string glove_vec_file_name = 16;
    if (has_glove_vec_file_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glove_vec_file_name());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // required string vec_tbls_core_path = 18;
    if (has_vec_tbls_core_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vec_tbls_core_path());
    }

    // required string dep_name_vec_tbl = 20;
    if (has_dep_name_vec_tbl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dep_name_vec_tbl());
    }

  }
  // repeated .CaffeGenData.DataField data_fields = 4;
  total_size += 1 * this->data_fields_size();
  for (int i = 0; i < this->data_fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_fields(i));
  }

  // repeated .CaffeGenData.DataTranslate data_translates = 5;
  total_size += 1 * this->data_translates_size();
  for (int i = 0; i < this->data_translates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_translates(i));
  }

  // repeated .CaffeGenData.FieldTranslate input_field_translates = 6;
  total_size += 1 * this->input_field_translates_size();
  for (int i = 0; i < this->input_field_translates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_field_translates(i));
  }

  // repeated .CaffeGenData.FieldTranslate output_field_translates = 7;
  total_size += 1 * this->output_field_translates_size();
  for (int i = 0; i < this->output_field_translates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_field_translates(i));
  }

  // repeated .CaffeGenData.DataFilter data_filters = 17;
  total_size += 2 * this->data_filters_size();
  for (int i = 0; i < this->data_filters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_filters(i));
  }

  // repeated .CaffeGenData.VecTbl vec_tbls = 19;
  total_size += 2 * this->vec_tbls_size();
  for (int i = 0; i < this->vec_tbls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vec_tbls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenData::MergeFrom(const CaffeGenData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_fields_.MergeFrom(from.data_fields_);
  data_translates_.MergeFrom(from.data_translates_);
  input_field_translates_.MergeFrom(from.input_field_translates_);
  output_field_translates_.MergeFrom(from.output_field_translates_);
  data_filters_.MergeFrom(from.data_filters_);
  vec_tbls_.MergeFrom(from.vec_tbls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_iterate_type()) {
      set_iterate_type(from.iterate_type());
    }
    if (from.has_data_src()) {
      set_data_src(from.data_src());
    }
    if (from.has_files_core_dir()) {
      set_files_core_dir(from.files_core_dir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_test_list_file_name()) {
      set_test_list_file_name(from.test_list_file_name());
    }
    if (from.has_train_list_file_name()) {
      set_train_list_file_name(from.train_list_file_name());
    }
    if (from.has_net_end_type()) {
      set_net_end_type(from.net_end_type());
    }
    if (from.has_proto_file_name()) {
      set_proto_file_name(from.proto_file_name());
    }
    if (from.has_model_file_name()) {
      set_model_file_name(from.model_file_name());
    }
    if (from.has_config_file_name()) {
      set_config_file_name(from.config_file_name());
    }
    if (from.has_num_accuracy_candidates()) {
      set_num_accuracy_candidates(from.num_accuracy_candidates());
    }
    if (from.has_glove_vec_file_name()) {
      set_glove_vec_file_name(from.glove_vec_file_name());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_vec_tbls_core_path()) {
      set_vec_tbls_core_path(from.vec_tbls_core_path());
    }
    if (from.has_dep_name_vec_tbl()) {
      set_dep_name_vec_tbl(from.dep_name_vec_tbl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenData::CopyFrom(const CaffeGenData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000abf87) != 0x000abf87) return false;

  for (int i = 0; i < data_fields_size(); i++) {
    if (!this->data_fields(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_translates_size(); i++) {
    if (!this->data_translates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < input_field_translates_size(); i++) {
    if (!this->input_field_translates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_field_translates_size(); i++) {
    if (!this->output_field_translates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_filters_size(); i++) {
    if (!this->data_filters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vec_tbls_size(); i++) {
    if (!this->vec_tbls(i).IsInitialized()) return false;
  }
  return true;
}

void CaffeGenData::Swap(CaffeGenData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(iterate_type_, other->iterate_type_);
    std::swap(data_src_, other->data_src_);
    data_fields_.Swap(&other->data_fields_);
    data_translates_.Swap(&other->data_translates_);
    input_field_translates_.Swap(&other->input_field_translates_);
    output_field_translates_.Swap(&other->output_field_translates_);
    std::swap(files_core_dir_, other->files_core_dir_);
    std::swap(test_list_file_name_, other->test_list_file_name_);
    std::swap(train_list_file_name_, other->train_list_file_name_);
    std::swap(net_end_type_, other->net_end_type_);
    std::swap(proto_file_name_, other->proto_file_name_);
    std::swap(model_file_name_, other->model_file_name_);
    std::swap(config_file_name_, other->config_file_name_);
    std::swap(num_accuracy_candidates_, other->num_accuracy_candidates_);
    std::swap(glove_vec_file_name_, other->glove_vec_file_name_);
    data_filters_.Swap(&other->data_filters_);
    std::swap(vec_tbls_core_path_, other->vec_tbls_core_path_);
    vec_tbls_.Swap(&other->vec_tbls_);
    std::swap(dep_name_vec_tbl_, other->dep_name_vec_tbl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenData_descriptor_;
  metadata.reflection = CaffeGenData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
