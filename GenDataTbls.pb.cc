// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenDataTbls.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GenDataTbls.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CaffeGenDataTbls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDataTbls_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenDataTbls_VecTbl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDataTbls_VecTbl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GenDataTbls_2eproto() {
  protobuf_AddDesc_GenDataTbls_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GenDataTbls.proto");
  GOOGLE_CHECK(file != NULL);
  CaffeGenDataTbls_descriptor_ = file->message_type(0);
  static const int CaffeGenDataTbls_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls, vec_tbls_core_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls, vec_tbls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls, dep_name_vec_tbl_),
  };
  CaffeGenDataTbls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDataTbls_descriptor_,
      CaffeGenDataTbls::default_instance_,
      CaffeGenDataTbls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDataTbls));
  CaffeGenDataTbls_VecTbl_descriptor_ = CaffeGenDataTbls_descriptor_->nested_type(0);
  static const int CaffeGenDataTbls_VecTbl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls_VecTbl, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls_VecTbl, path_),
  };
  CaffeGenDataTbls_VecTbl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDataTbls_VecTbl_descriptor_,
      CaffeGenDataTbls_VecTbl::default_instance_,
      CaffeGenDataTbls_VecTbl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls_VecTbl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDataTbls_VecTbl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDataTbls_VecTbl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GenDataTbls_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDataTbls_descriptor_, &CaffeGenDataTbls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDataTbls_VecTbl_descriptor_, &CaffeGenDataTbls_VecTbl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GenDataTbls_2eproto() {
  delete CaffeGenDataTbls::default_instance_;
  delete CaffeGenDataTbls_reflection_;
  delete CaffeGenDataTbls_VecTbl::default_instance_;
  delete CaffeGenDataTbls_VecTbl_reflection_;
}

void protobuf_AddDesc_GenDataTbls_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GenDataTbls.proto\"\250\001\n\020CaffeGenDataTbls"
    "\022\014\n\004name\030\001 \002(\t\022\032\n\022vec_tbls_core_path\030\002 \002"
    "(\t\022*\n\010vec_tbls\030\003 \003(\0132\030.CaffeGenDataTbls."
    "VecTbl\022\030\n\020dep_name_vec_tbl\030\004 \002(\t\032$\n\006VecT"
    "bl\022\014\n\004name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GenDataTbls.proto", &protobuf_RegisterTypes);
  CaffeGenDataTbls::default_instance_ = new CaffeGenDataTbls();
  CaffeGenDataTbls_VecTbl::default_instance_ = new CaffeGenDataTbls_VecTbl();
  CaffeGenDataTbls::default_instance_->InitAsDefaultInstance();
  CaffeGenDataTbls_VecTbl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GenDataTbls_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GenDataTbls_2eproto {
  StaticDescriptorInitializer_GenDataTbls_2eproto() {
    protobuf_AddDesc_GenDataTbls_2eproto();
  }
} static_descriptor_initializer_GenDataTbls_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CaffeGenDataTbls_VecTbl::kNameFieldNumber;
const int CaffeGenDataTbls_VecTbl::kPathFieldNumber;
#endif  // !_MSC_VER

CaffeGenDataTbls_VecTbl::CaffeGenDataTbls_VecTbl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDataTbls_VecTbl::InitAsDefaultInstance() {
}

CaffeGenDataTbls_VecTbl::CaffeGenDataTbls_VecTbl(const CaffeGenDataTbls_VecTbl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDataTbls_VecTbl::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDataTbls_VecTbl::~CaffeGenDataTbls_VecTbl() {
  SharedDtor();
}

void CaffeGenDataTbls_VecTbl::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDataTbls_VecTbl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDataTbls_VecTbl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDataTbls_VecTbl_descriptor_;
}

const CaffeGenDataTbls_VecTbl& CaffeGenDataTbls_VecTbl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDataTbls_2eproto();
  return *default_instance_;
}

CaffeGenDataTbls_VecTbl* CaffeGenDataTbls_VecTbl::default_instance_ = NULL;

CaffeGenDataTbls_VecTbl* CaffeGenDataTbls_VecTbl::New() const {
  return new CaffeGenDataTbls_VecTbl;
}

void CaffeGenDataTbls_VecTbl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDataTbls_VecTbl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDataTbls_VecTbl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDataTbls_VecTbl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDataTbls_VecTbl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDataTbls_VecTbl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDataTbls_VecTbl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDataTbls_VecTbl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDataTbls_VecTbl::MergeFrom(const CaffeGenDataTbls_VecTbl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDataTbls_VecTbl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDataTbls_VecTbl::CopyFrom(const CaffeGenDataTbls_VecTbl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDataTbls_VecTbl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaffeGenDataTbls_VecTbl::Swap(CaffeGenDataTbls_VecTbl* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDataTbls_VecTbl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDataTbls_VecTbl_descriptor_;
  metadata.reflection = CaffeGenDataTbls_VecTbl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenDataTbls::kNameFieldNumber;
const int CaffeGenDataTbls::kVecTblsCorePathFieldNumber;
const int CaffeGenDataTbls::kVecTblsFieldNumber;
const int CaffeGenDataTbls::kDepNameVecTblFieldNumber;
#endif  // !_MSC_VER

CaffeGenDataTbls::CaffeGenDataTbls()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDataTbls::InitAsDefaultInstance() {
}

CaffeGenDataTbls::CaffeGenDataTbls(const CaffeGenDataTbls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDataTbls::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vec_tbls_core_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dep_name_vec_tbl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDataTbls::~CaffeGenDataTbls() {
  SharedDtor();
}

void CaffeGenDataTbls::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (vec_tbls_core_path_ != &::google::protobuf::internal::kEmptyString) {
    delete vec_tbls_core_path_;
  }
  if (dep_name_vec_tbl_ != &::google::protobuf::internal::kEmptyString) {
    delete dep_name_vec_tbl_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDataTbls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDataTbls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDataTbls_descriptor_;
}

const CaffeGenDataTbls& CaffeGenDataTbls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDataTbls_2eproto();
  return *default_instance_;
}

CaffeGenDataTbls* CaffeGenDataTbls::default_instance_ = NULL;

CaffeGenDataTbls* CaffeGenDataTbls::New() const {
  return new CaffeGenDataTbls;
}

void CaffeGenDataTbls::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_vec_tbls_core_path()) {
      if (vec_tbls_core_path_ != &::google::protobuf::internal::kEmptyString) {
        vec_tbls_core_path_->clear();
      }
    }
    if (has_dep_name_vec_tbl()) {
      if (dep_name_vec_tbl_ != &::google::protobuf::internal::kEmptyString) {
        dep_name_vec_tbl_->clear();
      }
    }
  }
  vec_tbls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDataTbls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vec_tbls_core_path;
        break;
      }

      // required string vec_tbls_core_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec_tbls_core_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vec_tbls_core_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vec_tbls_core_path().data(), this->vec_tbls_core_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vec_tbls;
        break;
      }

      // repeated .CaffeGenDataTbls.VecTbl vec_tbls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec_tbls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vec_tbls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vec_tbls;
        if (input->ExpectTag(34)) goto parse_dep_name_vec_tbl;
        break;
      }

      // required string dep_name_vec_tbl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_name_vec_tbl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dep_name_vec_tbl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dep_name_vec_tbl().data(), this->dep_name_vec_tbl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDataTbls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string vec_tbls_core_path = 2;
  if (has_vec_tbls_core_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vec_tbls_core_path().data(), this->vec_tbls_core_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vec_tbls_core_path(), output);
  }

  // repeated .CaffeGenDataTbls.VecTbl vec_tbls = 3;
  for (int i = 0; i < this->vec_tbls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vec_tbls(i), output);
  }

  // required string dep_name_vec_tbl = 4;
  if (has_dep_name_vec_tbl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name_vec_tbl().data(), this->dep_name_vec_tbl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dep_name_vec_tbl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDataTbls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string vec_tbls_core_path = 2;
  if (has_vec_tbls_core_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vec_tbls_core_path().data(), this->vec_tbls_core_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vec_tbls_core_path(), target);
  }

  // repeated .CaffeGenDataTbls.VecTbl vec_tbls = 3;
  for (int i = 0; i < this->vec_tbls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vec_tbls(i), target);
  }

  // required string dep_name_vec_tbl = 4;
  if (has_dep_name_vec_tbl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name_vec_tbl().data(), this->dep_name_vec_tbl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dep_name_vec_tbl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDataTbls::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string vec_tbls_core_path = 2;
    if (has_vec_tbls_core_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vec_tbls_core_path());
    }

    // required string dep_name_vec_tbl = 4;
    if (has_dep_name_vec_tbl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dep_name_vec_tbl());
    }

  }
  // repeated .CaffeGenDataTbls.VecTbl vec_tbls = 3;
  total_size += 1 * this->vec_tbls_size();
  for (int i = 0; i < this->vec_tbls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vec_tbls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDataTbls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDataTbls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDataTbls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDataTbls::MergeFrom(const CaffeGenDataTbls& from) {
  GOOGLE_CHECK_NE(&from, this);
  vec_tbls_.MergeFrom(from.vec_tbls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vec_tbls_core_path()) {
      set_vec_tbls_core_path(from.vec_tbls_core_path());
    }
    if (from.has_dep_name_vec_tbl()) {
      set_dep_name_vec_tbl(from.dep_name_vec_tbl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDataTbls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDataTbls::CopyFrom(const CaffeGenDataTbls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDataTbls::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < vec_tbls_size(); i++) {
    if (!this->vec_tbls(i).IsInitialized()) return false;
  }
  return true;
}

void CaffeGenDataTbls::Swap(CaffeGenDataTbls* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(vec_tbls_core_path_, other->vec_tbls_core_path_);
    vec_tbls_.Swap(&other->vec_tbls_);
    std::swap(dep_name_vec_tbl_, other->dep_name_vec_tbl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDataTbls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDataTbls_descriptor_;
  metadata.reflection = CaffeGenDataTbls_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
