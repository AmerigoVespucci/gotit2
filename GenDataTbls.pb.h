// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenDataTbls.proto

#ifndef PROTOBUF_GenDataTbls_2eproto__INCLUDED
#define PROTOBUF_GenDataTbls_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GenDataTbls_2eproto();
void protobuf_AssignDesc_GenDataTbls_2eproto();
void protobuf_ShutdownFile_GenDataTbls_2eproto();

class CaffeGenDataTbls;
class CaffeGenDataTbls_VecTbl;

// ===================================================================

class CaffeGenDataTbls_VecTbl : public ::google::protobuf::Message {
 public:
  CaffeGenDataTbls_VecTbl();
  virtual ~CaffeGenDataTbls_VecTbl();

  CaffeGenDataTbls_VecTbl(const CaffeGenDataTbls_VecTbl& from);

  inline CaffeGenDataTbls_VecTbl& operator=(const CaffeGenDataTbls_VecTbl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenDataTbls_VecTbl& default_instance();

  void Swap(CaffeGenDataTbls_VecTbl* other);

  // implements Message ----------------------------------------------

  CaffeGenDataTbls_VecTbl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenDataTbls_VecTbl& from);
  void MergeFrom(const CaffeGenDataTbls_VecTbl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:CaffeGenDataTbls.VecTbl)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_GenDataTbls_2eproto();
  friend void protobuf_AssignDesc_GenDataTbls_2eproto();
  friend void protobuf_ShutdownFile_GenDataTbls_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenDataTbls_VecTbl* default_instance_;
};
// -------------------------------------------------------------------

class CaffeGenDataTbls : public ::google::protobuf::Message {
 public:
  CaffeGenDataTbls();
  virtual ~CaffeGenDataTbls();

  CaffeGenDataTbls(const CaffeGenDataTbls& from);

  inline CaffeGenDataTbls& operator=(const CaffeGenDataTbls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenDataTbls& default_instance();

  void Swap(CaffeGenDataTbls* other);

  // implements Message ----------------------------------------------

  CaffeGenDataTbls* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenDataTbls& from);
  void MergeFrom(const CaffeGenDataTbls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CaffeGenDataTbls_VecTbl VecTbl;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string vec_tbls_core_path = 2;
  inline bool has_vec_tbls_core_path() const;
  inline void clear_vec_tbls_core_path();
  static const int kVecTblsCorePathFieldNumber = 2;
  inline const ::std::string& vec_tbls_core_path() const;
  inline void set_vec_tbls_core_path(const ::std::string& value);
  inline void set_vec_tbls_core_path(const char* value);
  inline void set_vec_tbls_core_path(const char* value, size_t size);
  inline ::std::string* mutable_vec_tbls_core_path();
  inline ::std::string* release_vec_tbls_core_path();
  inline void set_allocated_vec_tbls_core_path(::std::string* vec_tbls_core_path);

  // repeated .CaffeGenDataTbls.VecTbl vec_tbls = 3;
  inline int vec_tbls_size() const;
  inline void clear_vec_tbls();
  static const int kVecTblsFieldNumber = 3;
  inline const ::CaffeGenDataTbls_VecTbl& vec_tbls(int index) const;
  inline ::CaffeGenDataTbls_VecTbl* mutable_vec_tbls(int index);
  inline ::CaffeGenDataTbls_VecTbl* add_vec_tbls();
  inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenDataTbls_VecTbl >&
      vec_tbls() const;
  inline ::google::protobuf::RepeatedPtrField< ::CaffeGenDataTbls_VecTbl >*
      mutable_vec_tbls();

  // required string dep_name_vec_tbl = 4;
  inline bool has_dep_name_vec_tbl() const;
  inline void clear_dep_name_vec_tbl();
  static const int kDepNameVecTblFieldNumber = 4;
  inline const ::std::string& dep_name_vec_tbl() const;
  inline void set_dep_name_vec_tbl(const ::std::string& value);
  inline void set_dep_name_vec_tbl(const char* value);
  inline void set_dep_name_vec_tbl(const char* value, size_t size);
  inline ::std::string* mutable_dep_name_vec_tbl();
  inline ::std::string* release_dep_name_vec_tbl();
  inline void set_allocated_dep_name_vec_tbl(::std::string* dep_name_vec_tbl);

  // @@protoc_insertion_point(class_scope:CaffeGenDataTbls)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_vec_tbls_core_path();
  inline void clear_has_vec_tbls_core_path();
  inline void set_has_dep_name_vec_tbl();
  inline void clear_has_dep_name_vec_tbl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* vec_tbls_core_path_;
  ::google::protobuf::RepeatedPtrField< ::CaffeGenDataTbls_VecTbl > vec_tbls_;
  ::std::string* dep_name_vec_tbl_;
  friend void  protobuf_AddDesc_GenDataTbls_2eproto();
  friend void protobuf_AssignDesc_GenDataTbls_2eproto();
  friend void protobuf_ShutdownFile_GenDataTbls_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenDataTbls* default_instance_;
};
// ===================================================================


// ===================================================================

// CaffeGenDataTbls_VecTbl

// required string name = 1;
inline bool CaffeGenDataTbls_VecTbl::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenDataTbls_VecTbl::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenDataTbls_VecTbl::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenDataTbls_VecTbl::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CaffeGenDataTbls_VecTbl::name() const {
  // @@protoc_insertion_point(field_get:CaffeGenDataTbls.VecTbl.name)
  return *name_;
}
inline void CaffeGenDataTbls_VecTbl::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CaffeGenDataTbls.VecTbl.name)
}
inline void CaffeGenDataTbls_VecTbl::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CaffeGenDataTbls.VecTbl.name)
}
inline void CaffeGenDataTbls_VecTbl::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CaffeGenDataTbls.VecTbl.name)
}
inline ::std::string* CaffeGenDataTbls_VecTbl::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CaffeGenDataTbls.VecTbl.name)
  return name_;
}
inline ::std::string* CaffeGenDataTbls_VecTbl::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CaffeGenDataTbls_VecTbl::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CaffeGenDataTbls.VecTbl.name)
}

// required string path = 2;
inline bool CaffeGenDataTbls_VecTbl::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenDataTbls_VecTbl::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenDataTbls_VecTbl::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenDataTbls_VecTbl::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& CaffeGenDataTbls_VecTbl::path() const {
  // @@protoc_insertion_point(field_get:CaffeGenDataTbls.VecTbl.path)
  return *path_;
}
inline void CaffeGenDataTbls_VecTbl::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:CaffeGenDataTbls.VecTbl.path)
}
inline void CaffeGenDataTbls_VecTbl::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:CaffeGenDataTbls.VecTbl.path)
}
inline void CaffeGenDataTbls_VecTbl::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CaffeGenDataTbls.VecTbl.path)
}
inline ::std::string* CaffeGenDataTbls_VecTbl::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CaffeGenDataTbls.VecTbl.path)
  return path_;
}
inline ::std::string* CaffeGenDataTbls_VecTbl::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CaffeGenDataTbls_VecTbl::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CaffeGenDataTbls.VecTbl.path)
}

// -------------------------------------------------------------------

// CaffeGenDataTbls

// required string name = 1;
inline bool CaffeGenDataTbls::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenDataTbls::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenDataTbls::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenDataTbls::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CaffeGenDataTbls::name() const {
  // @@protoc_insertion_point(field_get:CaffeGenDataTbls.name)
  return *name_;
}
inline void CaffeGenDataTbls::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CaffeGenDataTbls.name)
}
inline void CaffeGenDataTbls::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CaffeGenDataTbls.name)
}
inline void CaffeGenDataTbls::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CaffeGenDataTbls.name)
}
inline ::std::string* CaffeGenDataTbls::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CaffeGenDataTbls.name)
  return name_;
}
inline ::std::string* CaffeGenDataTbls::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CaffeGenDataTbls::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CaffeGenDataTbls.name)
}

// required string vec_tbls_core_path = 2;
inline bool CaffeGenDataTbls::has_vec_tbls_core_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenDataTbls::set_has_vec_tbls_core_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenDataTbls::clear_has_vec_tbls_core_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenDataTbls::clear_vec_tbls_core_path() {
  if (vec_tbls_core_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vec_tbls_core_path_->clear();
  }
  clear_has_vec_tbls_core_path();
}
inline const ::std::string& CaffeGenDataTbls::vec_tbls_core_path() const {
  // @@protoc_insertion_point(field_get:CaffeGenDataTbls.vec_tbls_core_path)
  return *vec_tbls_core_path_;
}
inline void CaffeGenDataTbls::set_vec_tbls_core_path(const ::std::string& value) {
  set_has_vec_tbls_core_path();
  if (vec_tbls_core_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vec_tbls_core_path_ = new ::std::string;
  }
  vec_tbls_core_path_->assign(value);
  // @@protoc_insertion_point(field_set:CaffeGenDataTbls.vec_tbls_core_path)
}
inline void CaffeGenDataTbls::set_vec_tbls_core_path(const char* value) {
  set_has_vec_tbls_core_path();
  if (vec_tbls_core_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vec_tbls_core_path_ = new ::std::string;
  }
  vec_tbls_core_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:CaffeGenDataTbls.vec_tbls_core_path)
}
inline void CaffeGenDataTbls::set_vec_tbls_core_path(const char* value, size_t size) {
  set_has_vec_tbls_core_path();
  if (vec_tbls_core_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vec_tbls_core_path_ = new ::std::string;
  }
  vec_tbls_core_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CaffeGenDataTbls.vec_tbls_core_path)
}
inline ::std::string* CaffeGenDataTbls::mutable_vec_tbls_core_path() {
  set_has_vec_tbls_core_path();
  if (vec_tbls_core_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vec_tbls_core_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CaffeGenDataTbls.vec_tbls_core_path)
  return vec_tbls_core_path_;
}
inline ::std::string* CaffeGenDataTbls::release_vec_tbls_core_path() {
  clear_has_vec_tbls_core_path();
  if (vec_tbls_core_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vec_tbls_core_path_;
    vec_tbls_core_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CaffeGenDataTbls::set_allocated_vec_tbls_core_path(::std::string* vec_tbls_core_path) {
  if (vec_tbls_core_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vec_tbls_core_path_;
  }
  if (vec_tbls_core_path) {
    set_has_vec_tbls_core_path();
    vec_tbls_core_path_ = vec_tbls_core_path;
  } else {
    clear_has_vec_tbls_core_path();
    vec_tbls_core_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CaffeGenDataTbls.vec_tbls_core_path)
}

// repeated .CaffeGenDataTbls.VecTbl vec_tbls = 3;
inline int CaffeGenDataTbls::vec_tbls_size() const {
  return vec_tbls_.size();
}
inline void CaffeGenDataTbls::clear_vec_tbls() {
  vec_tbls_.Clear();
}
inline const ::CaffeGenDataTbls_VecTbl& CaffeGenDataTbls::vec_tbls(int index) const {
  // @@protoc_insertion_point(field_get:CaffeGenDataTbls.vec_tbls)
  return vec_tbls_.Get(index);
}
inline ::CaffeGenDataTbls_VecTbl* CaffeGenDataTbls::mutable_vec_tbls(int index) {
  // @@protoc_insertion_point(field_mutable:CaffeGenDataTbls.vec_tbls)
  return vec_tbls_.Mutable(index);
}
inline ::CaffeGenDataTbls_VecTbl* CaffeGenDataTbls::add_vec_tbls() {
  // @@protoc_insertion_point(field_add:CaffeGenDataTbls.vec_tbls)
  return vec_tbls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenDataTbls_VecTbl >&
CaffeGenDataTbls::vec_tbls() const {
  // @@protoc_insertion_point(field_list:CaffeGenDataTbls.vec_tbls)
  return vec_tbls_;
}
inline ::google::protobuf::RepeatedPtrField< ::CaffeGenDataTbls_VecTbl >*
CaffeGenDataTbls::mutable_vec_tbls() {
  // @@protoc_insertion_point(field_mutable_list:CaffeGenDataTbls.vec_tbls)
  return &vec_tbls_;
}

// required string dep_name_vec_tbl = 4;
inline bool CaffeGenDataTbls::has_dep_name_vec_tbl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeGenDataTbls::set_has_dep_name_vec_tbl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeGenDataTbls::clear_has_dep_name_vec_tbl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeGenDataTbls::clear_dep_name_vec_tbl() {
  if (dep_name_vec_tbl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dep_name_vec_tbl_->clear();
  }
  clear_has_dep_name_vec_tbl();
}
inline const ::std::string& CaffeGenDataTbls::dep_name_vec_tbl() const {
  // @@protoc_insertion_point(field_get:CaffeGenDataTbls.dep_name_vec_tbl)
  return *dep_name_vec_tbl_;
}
inline void CaffeGenDataTbls::set_dep_name_vec_tbl(const ::std::string& value) {
  set_has_dep_name_vec_tbl();
  if (dep_name_vec_tbl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dep_name_vec_tbl_ = new ::std::string;
  }
  dep_name_vec_tbl_->assign(value);
  // @@protoc_insertion_point(field_set:CaffeGenDataTbls.dep_name_vec_tbl)
}
inline void CaffeGenDataTbls::set_dep_name_vec_tbl(const char* value) {
  set_has_dep_name_vec_tbl();
  if (dep_name_vec_tbl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dep_name_vec_tbl_ = new ::std::string;
  }
  dep_name_vec_tbl_->assign(value);
  // @@protoc_insertion_point(field_set_char:CaffeGenDataTbls.dep_name_vec_tbl)
}
inline void CaffeGenDataTbls::set_dep_name_vec_tbl(const char* value, size_t size) {
  set_has_dep_name_vec_tbl();
  if (dep_name_vec_tbl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dep_name_vec_tbl_ = new ::std::string;
  }
  dep_name_vec_tbl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CaffeGenDataTbls.dep_name_vec_tbl)
}
inline ::std::string* CaffeGenDataTbls::mutable_dep_name_vec_tbl() {
  set_has_dep_name_vec_tbl();
  if (dep_name_vec_tbl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dep_name_vec_tbl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CaffeGenDataTbls.dep_name_vec_tbl)
  return dep_name_vec_tbl_;
}
inline ::std::string* CaffeGenDataTbls::release_dep_name_vec_tbl() {
  clear_has_dep_name_vec_tbl();
  if (dep_name_vec_tbl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dep_name_vec_tbl_;
    dep_name_vec_tbl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CaffeGenDataTbls::set_allocated_dep_name_vec_tbl(::std::string* dep_name_vec_tbl) {
  if (dep_name_vec_tbl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dep_name_vec_tbl_;
  }
  if (dep_name_vec_tbl) {
    set_has_dep_name_vec_tbl();
    dep_name_vec_tbl_ = dep_name_vec_tbl;
  } else {
    clear_has_dep_name_vec_tbl();
    dep_name_vec_tbl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CaffeGenDataTbls.dep_name_vec_tbl)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GenDataTbls_2eproto__INCLUDED
