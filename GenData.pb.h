// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenData.proto

#ifndef PROTOBUF_GenData_2eproto__INCLUDED
#define PROTOBUF_GenData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GenData_2eproto();
void protobuf_AssignDesc_GenData_2eproto();
void protobuf_ShutdownFile_GenData_2eproto();

class CaffeGenData;
class CaffeGenData_DataField;
class CaffeGenData_DataTranslate;
class CaffeGenData_FieldTranslate;
class CaffeGenData_DataFilter;

enum CaffeGenData_IterateType {
  CaffeGenData_IterateType_ITERATE_WORD = 1,
  CaffeGenData_IterateType_ITERATE_REC = 2,
  CaffeGenData_IterateType_ITERATE_DEP = 3
};
bool CaffeGenData_IterateType_IsValid(int value);
const CaffeGenData_IterateType CaffeGenData_IterateType_IterateType_MIN = CaffeGenData_IterateType_ITERATE_WORD;
const CaffeGenData_IterateType CaffeGenData_IterateType_IterateType_MAX = CaffeGenData_IterateType_ITERATE_DEP;
const int CaffeGenData_IterateType_IterateType_ARRAYSIZE = CaffeGenData_IterateType_IterateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaffeGenData_IterateType_descriptor();
inline const ::std::string& CaffeGenData_IterateType_Name(CaffeGenData_IterateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaffeGenData_IterateType_descriptor(), value);
}
inline bool CaffeGenData_IterateType_Parse(
    const ::std::string& name, CaffeGenData_IterateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaffeGenData_IterateType>(
    CaffeGenData_IterateType_descriptor(), name, value);
}
enum CaffeGenData_DataSrc {
  CaffeGenData_DataSrc_DATA_SRC_BOOKS = 1
};
bool CaffeGenData_DataSrc_IsValid(int value);
const CaffeGenData_DataSrc CaffeGenData_DataSrc_DataSrc_MIN = CaffeGenData_DataSrc_DATA_SRC_BOOKS;
const CaffeGenData_DataSrc CaffeGenData_DataSrc_DataSrc_MAX = CaffeGenData_DataSrc_DATA_SRC_BOOKS;
const int CaffeGenData_DataSrc_DataSrc_ARRAYSIZE = CaffeGenData_DataSrc_DataSrc_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaffeGenData_DataSrc_descriptor();
inline const ::std::string& CaffeGenData_DataSrc_Name(CaffeGenData_DataSrc value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaffeGenData_DataSrc_descriptor(), value);
}
inline bool CaffeGenData_DataSrc_Parse(
    const ::std::string& name, CaffeGenData_DataSrc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaffeGenData_DataSrc>(
    CaffeGenData_DataSrc_descriptor(), name, value);
}
enum CaffeGenData_FieldType {
  CaffeGenData_FieldType_FIELD_TYPE_WORD = 1,
  CaffeGenData_FieldType_FIELD_TYPE_WORD_CORE = 2,
  CaffeGenData_FieldType_FIELD_TYPE_POS = 3,
  CaffeGenData_FieldType_FIELD_TYPE_WID = 4,
  CaffeGenData_FieldType_FIELD_TYPE_RWID = 5,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_NAME = 6,
  CaffeGenData_FieldType_FIELD_TYPE_GOV_WID = 7,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_WID = 8,
  CaffeGenData_FieldType_FIELD_TYPE_GOV_RWID = 9,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_RWID = 10,
  CaffeGenData_FieldType_FIELD_TYPE_RDID = 11,
  CaffeGenData_FieldType_FIELD_TYPE_GOV_RDID = 12,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_RDID = 13,
  CaffeGenData_FieldType_FIELD_TYPE_GOV_WORD = 14,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_WORD = 15,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_NAME_G = 16,
  CaffeGenData_FieldType_FIELD_TYPE_DEP_NAME_D = 17,
  CaffeGenData_FieldType_FIELD_TYPE_INVALID = 31
};
bool CaffeGenData_FieldType_IsValid(int value);
const CaffeGenData_FieldType CaffeGenData_FieldType_FieldType_MIN = CaffeGenData_FieldType_FIELD_TYPE_WORD;
const CaffeGenData_FieldType CaffeGenData_FieldType_FieldType_MAX = CaffeGenData_FieldType_FIELD_TYPE_INVALID;
const int CaffeGenData_FieldType_FieldType_ARRAYSIZE = CaffeGenData_FieldType_FieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaffeGenData_FieldType_descriptor();
inline const ::std::string& CaffeGenData_FieldType_Name(CaffeGenData_FieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaffeGenData_FieldType_descriptor(), value);
}
inline bool CaffeGenData_FieldType_Parse(
    const ::std::string& name, CaffeGenData_FieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaffeGenData_FieldType>(
    CaffeGenData_FieldType_descriptor(), name, value);
}
enum CaffeGenData_DataTranslateType {
  CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_WORD = 1,
  CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_COREF = 2,
  CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_RDID = 3,
  CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_DEP_NAME = 4,
  CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_GOV_RWID = 5,
  CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_DEP_RWID = 6
};
bool CaffeGenData_DataTranslateType_IsValid(int value);
const CaffeGenData_DataTranslateType CaffeGenData_DataTranslateType_DataTranslateType_MIN = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_WORD;
const CaffeGenData_DataTranslateType CaffeGenData_DataTranslateType_DataTranslateType_MAX = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_DEP_RWID;
const int CaffeGenData_DataTranslateType_DataTranslateType_ARRAYSIZE = CaffeGenData_DataTranslateType_DataTranslateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaffeGenData_DataTranslateType_descriptor();
inline const ::std::string& CaffeGenData_DataTranslateType_Name(CaffeGenData_DataTranslateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaffeGenData_DataTranslateType_descriptor(), value);
}
inline bool CaffeGenData_DataTranslateType_Parse(
    const ::std::string& name, CaffeGenData_DataTranslateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaffeGenData_DataTranslateType>(
    CaffeGenData_DataTranslateType_descriptor(), name, value);
}
enum CaffeGenData_NetEndType {
  CaffeGenData_NetEndType_END_VALID = 1,
  CaffeGenData_NetEndType_END_ONE_HOT = 2,
  CaffeGenData_NetEndType_END_MULTI_HOT = 3
};
bool CaffeGenData_NetEndType_IsValid(int value);
const CaffeGenData_NetEndType CaffeGenData_NetEndType_NetEndType_MIN = CaffeGenData_NetEndType_END_VALID;
const CaffeGenData_NetEndType CaffeGenData_NetEndType_NetEndType_MAX = CaffeGenData_NetEndType_END_MULTI_HOT;
const int CaffeGenData_NetEndType_NetEndType_ARRAYSIZE = CaffeGenData_NetEndType_NetEndType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaffeGenData_NetEndType_descriptor();
inline const ::std::string& CaffeGenData_NetEndType_Name(CaffeGenData_NetEndType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaffeGenData_NetEndType_descriptor(), value);
}
inline bool CaffeGenData_NetEndType_Parse(
    const ::std::string& name, CaffeGenData_NetEndType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaffeGenData_NetEndType>(
    CaffeGenData_NetEndType_descriptor(), name, value);
}
// ===================================================================

class CaffeGenData_DataField : public ::google::protobuf::Message {
 public:
  CaffeGenData_DataField();
  virtual ~CaffeGenData_DataField();

  CaffeGenData_DataField(const CaffeGenData_DataField& from);

  inline CaffeGenData_DataField& operator=(const CaffeGenData_DataField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenData_DataField& default_instance();

  void Swap(CaffeGenData_DataField* other);

  // implements Message ----------------------------------------------

  CaffeGenData_DataField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenData_DataField& from);
  void MergeFrom(const CaffeGenData_DataField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string var_name = 1;
  inline bool has_var_name() const;
  inline void clear_var_name();
  static const int kVarNameFieldNumber = 1;
  inline const ::std::string& var_name() const;
  inline void set_var_name(const ::std::string& value);
  inline void set_var_name(const char* value);
  inline void set_var_name(const char* value, size_t size);
  inline ::std::string* mutable_var_name();
  inline ::std::string* release_var_name();
  inline void set_allocated_var_name(::std::string* var_name);

  // required .CaffeGenData.FieldType field_type = 3;
  inline bool has_field_type() const;
  inline void clear_field_type();
  static const int kFieldTypeFieldNumber = 3;
  inline ::CaffeGenData_FieldType field_type() const;
  inline void set_field_type(::CaffeGenData_FieldType value);

  // @@protoc_insertion_point(class_scope:CaffeGenData.DataField)
 private:
  inline void set_has_var_name();
  inline void clear_has_var_name();
  inline void set_has_field_type();
  inline void clear_has_field_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* var_name_;
  int field_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GenData_2eproto();
  friend void protobuf_AssignDesc_GenData_2eproto();
  friend void protobuf_ShutdownFile_GenData_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenData_DataField* default_instance_;
};
// -------------------------------------------------------------------

class CaffeGenData_DataTranslate : public ::google::protobuf::Message {
 public:
  CaffeGenData_DataTranslate();
  virtual ~CaffeGenData_DataTranslate();

  CaffeGenData_DataTranslate(const CaffeGenData_DataTranslate& from);

  inline CaffeGenData_DataTranslate& operator=(const CaffeGenData_DataTranslate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenData_DataTranslate& default_instance();

  void Swap(CaffeGenData_DataTranslate* other);

  // implements Message ----------------------------------------------

  CaffeGenData_DataTranslate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenData_DataTranslate& from);
  void MergeFrom(const CaffeGenData_DataTranslate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CaffeGenData.DataTranslateType translate_type = 1;
  inline bool has_translate_type() const;
  inline void clear_translate_type();
  static const int kTranslateTypeFieldNumber = 1;
  inline ::CaffeGenData_DataTranslateType translate_type() const;
  inline void set_translate_type(::CaffeGenData_DataTranslateType value);

  // required string var_name = 2;
  inline bool has_var_name() const;
  inline void clear_var_name();
  static const int kVarNameFieldNumber = 2;
  inline const ::std::string& var_name() const;
  inline void set_var_name(const ::std::string& value);
  inline void set_var_name(const char* value);
  inline void set_var_name(const char* value, size_t size);
  inline ::std::string* mutable_var_name();
  inline ::std::string* release_var_name();
  inline void set_allocated_var_name(::std::string* var_name);

  // required string match_name = 4;
  inline bool has_match_name() const;
  inline void clear_match_name();
  static const int kMatchNameFieldNumber = 4;
  inline const ::std::string& match_name() const;
  inline void set_match_name(const ::std::string& value);
  inline void set_match_name(const char* value);
  inline void set_match_name(const char* value, size_t size);
  inline ::std::string* mutable_match_name();
  inline ::std::string* release_match_name();
  inline void set_allocated_match_name(::std::string* match_name);

  // optional .CaffeGenData.FieldType field_type = 6;
  inline bool has_field_type() const;
  inline void clear_field_type();
  static const int kFieldTypeFieldNumber = 6;
  inline ::CaffeGenData_FieldType field_type() const;
  inline void set_field_type(::CaffeGenData_FieldType value);

  // @@protoc_insertion_point(class_scope:CaffeGenData.DataTranslate)
 private:
  inline void set_has_translate_type();
  inline void clear_has_translate_type();
  inline void set_has_var_name();
  inline void clear_has_var_name();
  inline void set_has_match_name();
  inline void clear_has_match_name();
  inline void set_has_field_type();
  inline void clear_has_field_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* var_name_;
  int translate_type_;
  int field_type_;
  ::std::string* match_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GenData_2eproto();
  friend void protobuf_AssignDesc_GenData_2eproto();
  friend void protobuf_ShutdownFile_GenData_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenData_DataTranslate* default_instance_;
};
// -------------------------------------------------------------------

class CaffeGenData_FieldTranslate : public ::google::protobuf::Message {
 public:
  CaffeGenData_FieldTranslate();
  virtual ~CaffeGenData_FieldTranslate();

  CaffeGenData_FieldTranslate(const CaffeGenData_FieldTranslate& from);

  inline CaffeGenData_FieldTranslate& operator=(const CaffeGenData_FieldTranslate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenData_FieldTranslate& default_instance();

  void Swap(CaffeGenData_FieldTranslate* other);

  // implements Message ----------------------------------------------

  CaffeGenData_FieldTranslate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenData_FieldTranslate& from);
  void MergeFrom(const CaffeGenData_FieldTranslate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string var_name = 1;
  inline bool has_var_name() const;
  inline void clear_var_name();
  static const int kVarNameFieldNumber = 1;
  inline const ::std::string& var_name() const;
  inline void set_var_name(const ::std::string& value);
  inline void set_var_name(const char* value);
  inline void set_var_name(const char* value, size_t size);
  inline ::std::string* mutable_var_name();
  inline ::std::string* release_var_name();
  inline void set_allocated_var_name(::std::string* var_name);

  // required string table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // optional bool b_can_replace = 3;
  inline bool has_b_can_replace() const;
  inline void clear_b_can_replace();
  static const int kBCanReplaceFieldNumber = 3;
  inline bool b_can_replace() const;
  inline void set_b_can_replace(bool value);

  // optional int32 max_instances = 4;
  inline bool has_max_instances() const;
  inline void clear_max_instances();
  static const int kMaxInstancesFieldNumber = 4;
  inline ::google::protobuf::int32 max_instances() const;
  inline void set_max_instances(::google::protobuf::int32 value);

  // optional float replace_prob = 5;
  inline bool has_replace_prob() const;
  inline void clear_replace_prob();
  static const int kReplaceProbFieldNumber = 5;
  inline float replace_prob() const;
  inline void set_replace_prob(float value);

  // @@protoc_insertion_point(class_scope:CaffeGenData.FieldTranslate)
 private:
  inline void set_has_var_name();
  inline void clear_has_var_name();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_b_can_replace();
  inline void clear_has_b_can_replace();
  inline void set_has_max_instances();
  inline void clear_has_max_instances();
  inline void set_has_replace_prob();
  inline void clear_has_replace_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* var_name_;
  ::std::string* table_name_;
  bool b_can_replace_;
  ::google::protobuf::int32 max_instances_;
  float replace_prob_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GenData_2eproto();
  friend void protobuf_AssignDesc_GenData_2eproto();
  friend void protobuf_ShutdownFile_GenData_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenData_FieldTranslate* default_instance_;
};
// -------------------------------------------------------------------

class CaffeGenData_DataFilter : public ::google::protobuf::Message {
 public:
  CaffeGenData_DataFilter();
  virtual ~CaffeGenData_DataFilter();

  CaffeGenData_DataFilter(const CaffeGenData_DataFilter& from);

  inline CaffeGenData_DataFilter& operator=(const CaffeGenData_DataFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenData_DataFilter& default_instance();

  void Swap(CaffeGenData_DataFilter* other);

  // implements Message ----------------------------------------------

  CaffeGenData_DataFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenData_DataFilter& from);
  void MergeFrom(const CaffeGenData_DataFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string var_name = 2;
  inline bool has_var_name() const;
  inline void clear_var_name();
  static const int kVarNameFieldNumber = 2;
  inline const ::std::string& var_name() const;
  inline void set_var_name(const ::std::string& value);
  inline void set_var_name(const char* value);
  inline void set_var_name(const char* value, size_t size);
  inline ::std::string* mutable_var_name();
  inline ::std::string* release_var_name();
  inline void set_allocated_var_name(::std::string* var_name);

  // required string match_string = 4;
  inline bool has_match_string() const;
  inline void clear_match_string();
  static const int kMatchStringFieldNumber = 4;
  inline const ::std::string& match_string() const;
  inline void set_match_string(const ::std::string& value);
  inline void set_match_string(const char* value);
  inline void set_match_string(const char* value, size_t size);
  inline ::std::string* mutable_match_string();
  inline ::std::string* release_match_string();
  inline void set_allocated_match_string(::std::string* match_string);

  // @@protoc_insertion_point(class_scope:CaffeGenData.DataFilter)
 private:
  inline void set_has_var_name();
  inline void clear_has_var_name();
  inline void set_has_match_string();
  inline void clear_has_match_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* var_name_;
  ::std::string* match_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GenData_2eproto();
  friend void protobuf_AssignDesc_GenData_2eproto();
  friend void protobuf_ShutdownFile_GenData_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenData_DataFilter* default_instance_;
};
// -------------------------------------------------------------------

class CaffeGenData : public ::google::protobuf::Message {
 public:
  CaffeGenData();
  virtual ~CaffeGenData();

  CaffeGenData(const CaffeGenData& from);

  inline CaffeGenData& operator=(const CaffeGenData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeGenData& default_instance();

  void Swap(CaffeGenData* other);

  // implements Message ----------------------------------------------

  CaffeGenData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeGenData& from);
  void MergeFrom(const CaffeGenData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CaffeGenData_DataField DataField;
  typedef CaffeGenData_DataTranslate DataTranslate;
  typedef CaffeGenData_FieldTranslate FieldTranslate;
  typedef CaffeGenData_DataFilter DataFilter;

  typedef CaffeGenData_IterateType IterateType;
  static const IterateType ITERATE_WORD = CaffeGenData_IterateType_ITERATE_WORD;
  static const IterateType ITERATE_REC = CaffeGenData_IterateType_ITERATE_REC;
  static const IterateType ITERATE_DEP = CaffeGenData_IterateType_ITERATE_DEP;
  static inline bool IterateType_IsValid(int value) {
    return CaffeGenData_IterateType_IsValid(value);
  }
  static const IterateType IterateType_MIN =
    CaffeGenData_IterateType_IterateType_MIN;
  static const IterateType IterateType_MAX =
    CaffeGenData_IterateType_IterateType_MAX;
  static const int IterateType_ARRAYSIZE =
    CaffeGenData_IterateType_IterateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IterateType_descriptor() {
    return CaffeGenData_IterateType_descriptor();
  }
  static inline const ::std::string& IterateType_Name(IterateType value) {
    return CaffeGenData_IterateType_Name(value);
  }
  static inline bool IterateType_Parse(const ::std::string& name,
      IterateType* value) {
    return CaffeGenData_IterateType_Parse(name, value);
  }

  typedef CaffeGenData_DataSrc DataSrc;
  static const DataSrc DATA_SRC_BOOKS = CaffeGenData_DataSrc_DATA_SRC_BOOKS;
  static inline bool DataSrc_IsValid(int value) {
    return CaffeGenData_DataSrc_IsValid(value);
  }
  static const DataSrc DataSrc_MIN =
    CaffeGenData_DataSrc_DataSrc_MIN;
  static const DataSrc DataSrc_MAX =
    CaffeGenData_DataSrc_DataSrc_MAX;
  static const int DataSrc_ARRAYSIZE =
    CaffeGenData_DataSrc_DataSrc_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataSrc_descriptor() {
    return CaffeGenData_DataSrc_descriptor();
  }
  static inline const ::std::string& DataSrc_Name(DataSrc value) {
    return CaffeGenData_DataSrc_Name(value);
  }
  static inline bool DataSrc_Parse(const ::std::string& name,
      DataSrc* value) {
    return CaffeGenData_DataSrc_Parse(name, value);
  }

  typedef CaffeGenData_FieldType FieldType;
  static const FieldType FIELD_TYPE_WORD = CaffeGenData_FieldType_FIELD_TYPE_WORD;
  static const FieldType FIELD_TYPE_WORD_CORE = CaffeGenData_FieldType_FIELD_TYPE_WORD_CORE;
  static const FieldType FIELD_TYPE_POS = CaffeGenData_FieldType_FIELD_TYPE_POS;
  static const FieldType FIELD_TYPE_WID = CaffeGenData_FieldType_FIELD_TYPE_WID;
  static const FieldType FIELD_TYPE_RWID = CaffeGenData_FieldType_FIELD_TYPE_RWID;
  static const FieldType FIELD_TYPE_DEP_NAME = CaffeGenData_FieldType_FIELD_TYPE_DEP_NAME;
  static const FieldType FIELD_TYPE_GOV_WID = CaffeGenData_FieldType_FIELD_TYPE_GOV_WID;
  static const FieldType FIELD_TYPE_DEP_WID = CaffeGenData_FieldType_FIELD_TYPE_DEP_WID;
  static const FieldType FIELD_TYPE_GOV_RWID = CaffeGenData_FieldType_FIELD_TYPE_GOV_RWID;
  static const FieldType FIELD_TYPE_DEP_RWID = CaffeGenData_FieldType_FIELD_TYPE_DEP_RWID;
  static const FieldType FIELD_TYPE_RDID = CaffeGenData_FieldType_FIELD_TYPE_RDID;
  static const FieldType FIELD_TYPE_GOV_RDID = CaffeGenData_FieldType_FIELD_TYPE_GOV_RDID;
  static const FieldType FIELD_TYPE_DEP_RDID = CaffeGenData_FieldType_FIELD_TYPE_DEP_RDID;
  static const FieldType FIELD_TYPE_GOV_WORD = CaffeGenData_FieldType_FIELD_TYPE_GOV_WORD;
  static const FieldType FIELD_TYPE_DEP_WORD = CaffeGenData_FieldType_FIELD_TYPE_DEP_WORD;
  static const FieldType FIELD_TYPE_DEP_NAME_G = CaffeGenData_FieldType_FIELD_TYPE_DEP_NAME_G;
  static const FieldType FIELD_TYPE_DEP_NAME_D = CaffeGenData_FieldType_FIELD_TYPE_DEP_NAME_D;
  static const FieldType FIELD_TYPE_INVALID = CaffeGenData_FieldType_FIELD_TYPE_INVALID;
  static inline bool FieldType_IsValid(int value) {
    return CaffeGenData_FieldType_IsValid(value);
  }
  static const FieldType FieldType_MIN =
    CaffeGenData_FieldType_FieldType_MIN;
  static const FieldType FieldType_MAX =
    CaffeGenData_FieldType_FieldType_MAX;
  static const int FieldType_ARRAYSIZE =
    CaffeGenData_FieldType_FieldType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FieldType_descriptor() {
    return CaffeGenData_FieldType_descriptor();
  }
  static inline const ::std::string& FieldType_Name(FieldType value) {
    return CaffeGenData_FieldType_Name(value);
  }
  static inline bool FieldType_Parse(const ::std::string& name,
      FieldType* value) {
    return CaffeGenData_FieldType_Parse(name, value);
  }

  typedef CaffeGenData_DataTranslateType DataTranslateType;
  static const DataTranslateType DATA_TRANSLATE_RWID_TO_WORD = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_WORD;
  static const DataTranslateType DATA_TRANSLATE_RWID_TO_COREF = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_COREF;
  static const DataTranslateType DATA_TRANSLATE_RWID_TO_RDID = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RWID_TO_RDID;
  static const DataTranslateType DATA_TRANSLATE_RDID_TO_DEP_NAME = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_DEP_NAME;
  static const DataTranslateType DATA_TRANSLATE_RDID_TO_GOV_RWID = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_GOV_RWID;
  static const DataTranslateType DATA_TRANSLATE_RDID_TO_DEP_RWID = CaffeGenData_DataTranslateType_DATA_TRANSLATE_RDID_TO_DEP_RWID;
  static inline bool DataTranslateType_IsValid(int value) {
    return CaffeGenData_DataTranslateType_IsValid(value);
  }
  static const DataTranslateType DataTranslateType_MIN =
    CaffeGenData_DataTranslateType_DataTranslateType_MIN;
  static const DataTranslateType DataTranslateType_MAX =
    CaffeGenData_DataTranslateType_DataTranslateType_MAX;
  static const int DataTranslateType_ARRAYSIZE =
    CaffeGenData_DataTranslateType_DataTranslateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataTranslateType_descriptor() {
    return CaffeGenData_DataTranslateType_descriptor();
  }
  static inline const ::std::string& DataTranslateType_Name(DataTranslateType value) {
    return CaffeGenData_DataTranslateType_Name(value);
  }
  static inline bool DataTranslateType_Parse(const ::std::string& name,
      DataTranslateType* value) {
    return CaffeGenData_DataTranslateType_Parse(name, value);
  }

  typedef CaffeGenData_NetEndType NetEndType;
  static const NetEndType END_VALID = CaffeGenData_NetEndType_END_VALID;
  static const NetEndType END_ONE_HOT = CaffeGenData_NetEndType_END_ONE_HOT;
  static const NetEndType END_MULTI_HOT = CaffeGenData_NetEndType_END_MULTI_HOT;
  static inline bool NetEndType_IsValid(int value) {
    return CaffeGenData_NetEndType_IsValid(value);
  }
  static const NetEndType NetEndType_MIN =
    CaffeGenData_NetEndType_NetEndType_MIN;
  static const NetEndType NetEndType_MAX =
    CaffeGenData_NetEndType_NetEndType_MAX;
  static const int NetEndType_ARRAYSIZE =
    CaffeGenData_NetEndType_NetEndType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NetEndType_descriptor() {
    return CaffeGenData_NetEndType_descriptor();
  }
  static inline const ::std::string& NetEndType_Name(NetEndType value) {
    return CaffeGenData_NetEndType_Name(value);
  }
  static inline bool NetEndType_Parse(const ::std::string& name,
      NetEndType* value) {
    return CaffeGenData_NetEndType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string not_in_use = 3500;
  inline bool has_not_in_use() const;
  inline void clear_not_in_use();
  static const int kNotInUseFieldNumber = 3500;
  inline const ::std::string& not_in_use() const;
  inline void set_not_in_use(const ::std::string& value);
  inline void set_not_in_use(const char* value);
  inline void set_not_in_use(const char* value, size_t size);
  inline ::std::string* mutable_not_in_use();
  inline ::std::string* release_not_in_use();
  inline void set_allocated_not_in_use(::std::string* not_in_use);

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .CaffeGenData.IterateType iterate_type = 2;
  inline bool has_iterate_type() const;
  inline void clear_iterate_type();
  static const int kIterateTypeFieldNumber = 2;
  inline ::CaffeGenData_IterateType iterate_type() const;
  inline void set_iterate_type(::CaffeGenData_IterateType value);

  // required .CaffeGenData.DataSrc data_src = 3;
  inline bool has_data_src() const;
  inline void clear_data_src();
  static const int kDataSrcFieldNumber = 3;
  inline ::CaffeGenData_DataSrc data_src() const;
  inline void set_data_src(::CaffeGenData_DataSrc value);

  // repeated .CaffeGenData.DataField data_fields = 4;
  inline int data_fields_size() const;
  inline void clear_data_fields();
  static const int kDataFieldsFieldNumber = 4;
  inline const ::CaffeGenData_DataField& data_fields(int index) const;
  inline ::CaffeGenData_DataField* mutable_data_fields(int index);
  inline ::CaffeGenData_DataField* add_data_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataField >&
      data_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataField >*
      mutable_data_fields();

  // repeated .CaffeGenData.DataTranslate data_translates = 5;
  inline int data_translates_size() const;
  inline void clear_data_translates();
  static const int kDataTranslatesFieldNumber = 5;
  inline const ::CaffeGenData_DataTranslate& data_translates(int index) const;
  inline ::CaffeGenData_DataTranslate* mutable_data_translates(int index);
  inline ::CaffeGenData_DataTranslate* add_data_translates();
  inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataTranslate >&
      data_translates() const;
  inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataTranslate >*
      mutable_data_translates();

  // repeated .CaffeGenData.FieldTranslate input_field_translates = 6;
  inline int input_field_translates_size() const;
  inline void clear_input_field_translates();
  static const int kInputFieldTranslatesFieldNumber = 6;
  inline const ::CaffeGenData_FieldTranslate& input_field_translates(int index) const;
  inline ::CaffeGenData_FieldTranslate* mutable_input_field_translates(int index);
  inline ::CaffeGenData_FieldTranslate* add_input_field_translates();
  inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >&
      input_field_translates() const;
  inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >*
      mutable_input_field_translates();

  // repeated .CaffeGenData.FieldTranslate output_field_translates = 7;
  inline int output_field_translates_size() const;
  inline void clear_output_field_translates();
  static const int kOutputFieldTranslatesFieldNumber = 7;
  inline const ::CaffeGenData_FieldTranslate& output_field_translates(int index) const;
  inline ::CaffeGenData_FieldTranslate* mutable_output_field_translates(int index);
  inline ::CaffeGenData_FieldTranslate* add_output_field_translates();
  inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >&
      output_field_translates() const;
  inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >*
      mutable_output_field_translates();

  // required string files_core_dir = 8;
  inline bool has_files_core_dir() const;
  inline void clear_files_core_dir();
  static const int kFilesCoreDirFieldNumber = 8;
  inline const ::std::string& files_core_dir() const;
  inline void set_files_core_dir(const ::std::string& value);
  inline void set_files_core_dir(const char* value);
  inline void set_files_core_dir(const char* value, size_t size);
  inline ::std::string* mutable_files_core_dir();
  inline ::std::string* release_files_core_dir();
  inline void set_allocated_files_core_dir(::std::string* files_core_dir);

  // required string test_list_file_name = 9;
  inline bool has_test_list_file_name() const;
  inline void clear_test_list_file_name();
  static const int kTestListFileNameFieldNumber = 9;
  inline const ::std::string& test_list_file_name() const;
  inline void set_test_list_file_name(const ::std::string& value);
  inline void set_test_list_file_name(const char* value);
  inline void set_test_list_file_name(const char* value, size_t size);
  inline ::std::string* mutable_test_list_file_name();
  inline ::std::string* release_test_list_file_name();
  inline void set_allocated_test_list_file_name(::std::string* test_list_file_name);

  // required string train_list_file_name = 10;
  inline bool has_train_list_file_name() const;
  inline void clear_train_list_file_name();
  static const int kTrainListFileNameFieldNumber = 10;
  inline const ::std::string& train_list_file_name() const;
  inline void set_train_list_file_name(const ::std::string& value);
  inline void set_train_list_file_name(const char* value);
  inline void set_train_list_file_name(const char* value, size_t size);
  inline ::std::string* mutable_train_list_file_name();
  inline ::std::string* release_train_list_file_name();
  inline void set_allocated_train_list_file_name(::std::string* train_list_file_name);

  // required .CaffeGenData.NetEndType net_end_type = 11;
  inline bool has_net_end_type() const;
  inline void clear_net_end_type();
  static const int kNetEndTypeFieldNumber = 11;
  inline ::CaffeGenData_NetEndType net_end_type() const;
  inline void set_net_end_type(::CaffeGenData_NetEndType value);

  // required string proto_file_name = 12;
  inline bool has_proto_file_name() const;
  inline void clear_proto_file_name();
  static const int kProtoFileNameFieldNumber = 12;
  inline const ::std::string& proto_file_name() const;
  inline void set_proto_file_name(const ::std::string& value);
  inline void set_proto_file_name(const char* value);
  inline void set_proto_file_name(const char* value, size_t size);
  inline ::std::string* mutable_proto_file_name();
  inline ::std::string* release_proto_file_name();
  inline void set_allocated_proto_file_name(::std::string* proto_file_name);

  // required string model_file_name = 13;
  inline bool has_model_file_name() const;
  inline void clear_model_file_name();
  static const int kModelFileNameFieldNumber = 13;
  inline const ::std::string& model_file_name() const;
  inline void set_model_file_name(const ::std::string& value);
  inline void set_model_file_name(const char* value);
  inline void set_model_file_name(const char* value, size_t size);
  inline ::std::string* mutable_model_file_name();
  inline ::std::string* release_model_file_name();
  inline void set_allocated_model_file_name(::std::string* model_file_name);

  // required string config_file_name = 14;
  inline bool has_config_file_name() const;
  inline void clear_config_file_name();
  static const int kConfigFileNameFieldNumber = 14;
  inline const ::std::string& config_file_name() const;
  inline void set_config_file_name(const ::std::string& value);
  inline void set_config_file_name(const char* value);
  inline void set_config_file_name(const char* value, size_t size);
  inline ::std::string* mutable_config_file_name();
  inline ::std::string* release_config_file_name();
  inline void set_allocated_config_file_name(::std::string* config_file_name);

  // optional int32 num_accuracy_candidates = 15;
  inline bool has_num_accuracy_candidates() const;
  inline void clear_num_accuracy_candidates();
  static const int kNumAccuracyCandidatesFieldNumber = 15;
  inline ::google::protobuf::int32 num_accuracy_candidates() const;
  inline void set_num_accuracy_candidates(::google::protobuf::int32 value);

  // repeated .CaffeGenData.DataFilter data_filters = 17;
  inline int data_filters_size() const;
  inline void clear_data_filters();
  static const int kDataFiltersFieldNumber = 17;
  inline const ::CaffeGenData_DataFilter& data_filters(int index) const;
  inline ::CaffeGenData_DataFilter* mutable_data_filters(int index);
  inline ::CaffeGenData_DataFilter* add_data_filters();
  inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataFilter >&
      data_filters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataFilter >*
      mutable_data_filters();

  // required string netgen_output_file_name = 21;
  inline bool has_netgen_output_file_name() const;
  inline void clear_netgen_output_file_name();
  static const int kNetgenOutputFileNameFieldNumber = 21;
  inline const ::std::string& netgen_output_file_name() const;
  inline void set_netgen_output_file_name(const ::std::string& value);
  inline void set_netgen_output_file_name(const char* value);
  inline void set_netgen_output_file_name(const char* value, size_t size);
  inline ::std::string* mutable_netgen_output_file_name();
  inline ::std::string* release_netgen_output_file_name();
  inline void set_allocated_netgen_output_file_name(::std::string* netgen_output_file_name);

  // @@protoc_insertion_point(class_scope:CaffeGenData)
 private:
  inline void set_has_not_in_use();
  inline void clear_has_not_in_use();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_iterate_type();
  inline void clear_has_iterate_type();
  inline void set_has_data_src();
  inline void clear_has_data_src();
  inline void set_has_files_core_dir();
  inline void clear_has_files_core_dir();
  inline void set_has_test_list_file_name();
  inline void clear_has_test_list_file_name();
  inline void set_has_train_list_file_name();
  inline void clear_has_train_list_file_name();
  inline void set_has_net_end_type();
  inline void clear_has_net_end_type();
  inline void set_has_proto_file_name();
  inline void clear_has_proto_file_name();
  inline void set_has_model_file_name();
  inline void clear_has_model_file_name();
  inline void set_has_config_file_name();
  inline void clear_has_config_file_name();
  inline void set_has_num_accuracy_candidates();
  inline void clear_has_num_accuracy_candidates();
  inline void set_has_netgen_output_file_name();
  inline void clear_has_netgen_output_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* not_in_use_;
  ::std::string* name_;
  int iterate_type_;
  int data_src_;
  ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataField > data_fields_;
  ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataTranslate > data_translates_;
  ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate > input_field_translates_;
  ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate > output_field_translates_;
  ::std::string* files_core_dir_;
  ::std::string* test_list_file_name_;
  ::std::string* train_list_file_name_;
  ::std::string* proto_file_name_;
  ::std::string* model_file_name_;
  int net_end_type_;
  ::google::protobuf::int32 num_accuracy_candidates_;
  ::std::string* config_file_name_;
  ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataFilter > data_filters_;
  ::std::string* netgen_output_file_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_GenData_2eproto();
  friend void protobuf_AssignDesc_GenData_2eproto();
  friend void protobuf_ShutdownFile_GenData_2eproto();

  void InitAsDefaultInstance();
  static CaffeGenData* default_instance_;
};
// ===================================================================


// ===================================================================

// CaffeGenData_DataField

// required string var_name = 1;
inline bool CaffeGenData_DataField::has_var_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenData_DataField::set_has_var_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenData_DataField::clear_has_var_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenData_DataField::clear_var_name() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    var_name_->clear();
  }
  clear_has_var_name();
}
inline const ::std::string& CaffeGenData_DataField::var_name() const {
  return *var_name_;
}
inline void CaffeGenData_DataField::set_var_name(const ::std::string& value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_DataField::set_var_name(const char* value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_DataField::set_var_name(const char* value, size_t size) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_DataField::mutable_var_name() {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  return var_name_;
}
inline ::std::string* CaffeGenData_DataField::release_var_name() {
  clear_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = var_name_;
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_DataField::set_allocated_var_name(::std::string* var_name) {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (var_name) {
    set_has_var_name();
    var_name_ = var_name;
  } else {
    clear_has_var_name();
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .CaffeGenData.FieldType field_type = 3;
inline bool CaffeGenData_DataField::has_field_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenData_DataField::set_has_field_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenData_DataField::clear_has_field_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenData_DataField::clear_field_type() {
  field_type_ = 1;
  clear_has_field_type();
}
inline ::CaffeGenData_FieldType CaffeGenData_DataField::field_type() const {
  return static_cast< ::CaffeGenData_FieldType >(field_type_);
}
inline void CaffeGenData_DataField::set_field_type(::CaffeGenData_FieldType value) {
  assert(::CaffeGenData_FieldType_IsValid(value));
  set_has_field_type();
  field_type_ = value;
}

// -------------------------------------------------------------------

// CaffeGenData_DataTranslate

// required .CaffeGenData.DataTranslateType translate_type = 1;
inline bool CaffeGenData_DataTranslate::has_translate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenData_DataTranslate::set_has_translate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenData_DataTranslate::clear_has_translate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenData_DataTranslate::clear_translate_type() {
  translate_type_ = 1;
  clear_has_translate_type();
}
inline ::CaffeGenData_DataTranslateType CaffeGenData_DataTranslate::translate_type() const {
  return static_cast< ::CaffeGenData_DataTranslateType >(translate_type_);
}
inline void CaffeGenData_DataTranslate::set_translate_type(::CaffeGenData_DataTranslateType value) {
  assert(::CaffeGenData_DataTranslateType_IsValid(value));
  set_has_translate_type();
  translate_type_ = value;
}

// required string var_name = 2;
inline bool CaffeGenData_DataTranslate::has_var_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenData_DataTranslate::set_has_var_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenData_DataTranslate::clear_has_var_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenData_DataTranslate::clear_var_name() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    var_name_->clear();
  }
  clear_has_var_name();
}
inline const ::std::string& CaffeGenData_DataTranslate::var_name() const {
  return *var_name_;
}
inline void CaffeGenData_DataTranslate::set_var_name(const ::std::string& value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_DataTranslate::set_var_name(const char* value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_DataTranslate::set_var_name(const char* value, size_t size) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_DataTranslate::mutable_var_name() {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  return var_name_;
}
inline ::std::string* CaffeGenData_DataTranslate::release_var_name() {
  clear_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = var_name_;
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_DataTranslate::set_allocated_var_name(::std::string* var_name) {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (var_name) {
    set_has_var_name();
    var_name_ = var_name;
  } else {
    clear_has_var_name();
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string match_name = 4;
inline bool CaffeGenData_DataTranslate::has_match_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaffeGenData_DataTranslate::set_has_match_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaffeGenData_DataTranslate::clear_has_match_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaffeGenData_DataTranslate::clear_match_name() {
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    match_name_->clear();
  }
  clear_has_match_name();
}
inline const ::std::string& CaffeGenData_DataTranslate::match_name() const {
  return *match_name_;
}
inline void CaffeGenData_DataTranslate::set_match_name(const ::std::string& value) {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  match_name_->assign(value);
}
inline void CaffeGenData_DataTranslate::set_match_name(const char* value) {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  match_name_->assign(value);
}
inline void CaffeGenData_DataTranslate::set_match_name(const char* value, size_t size) {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  match_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_DataTranslate::mutable_match_name() {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  return match_name_;
}
inline ::std::string* CaffeGenData_DataTranslate::release_match_name() {
  clear_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = match_name_;
    match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_DataTranslate::set_allocated_match_name(::std::string* match_name) {
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_name_;
  }
  if (match_name) {
    set_has_match_name();
    match_name_ = match_name;
  } else {
    clear_has_match_name();
    match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CaffeGenData.FieldType field_type = 6;
inline bool CaffeGenData_DataTranslate::has_field_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeGenData_DataTranslate::set_has_field_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeGenData_DataTranslate::clear_has_field_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeGenData_DataTranslate::clear_field_type() {
  field_type_ = 1;
  clear_has_field_type();
}
inline ::CaffeGenData_FieldType CaffeGenData_DataTranslate::field_type() const {
  return static_cast< ::CaffeGenData_FieldType >(field_type_);
}
inline void CaffeGenData_DataTranslate::set_field_type(::CaffeGenData_FieldType value) {
  assert(::CaffeGenData_FieldType_IsValid(value));
  set_has_field_type();
  field_type_ = value;
}

// -------------------------------------------------------------------

// CaffeGenData_FieldTranslate

// optional string var_name = 1;
inline bool CaffeGenData_FieldTranslate::has_var_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenData_FieldTranslate::set_has_var_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenData_FieldTranslate::clear_has_var_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenData_FieldTranslate::clear_var_name() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    var_name_->clear();
  }
  clear_has_var_name();
}
inline const ::std::string& CaffeGenData_FieldTranslate::var_name() const {
  return *var_name_;
}
inline void CaffeGenData_FieldTranslate::set_var_name(const ::std::string& value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_FieldTranslate::set_var_name(const char* value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_FieldTranslate::set_var_name(const char* value, size_t size) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_FieldTranslate::mutable_var_name() {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  return var_name_;
}
inline ::std::string* CaffeGenData_FieldTranslate::release_var_name() {
  clear_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = var_name_;
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_FieldTranslate::set_allocated_var_name(::std::string* var_name) {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (var_name) {
    set_has_var_name();
    var_name_ = var_name;
  } else {
    clear_has_var_name();
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string table_name = 2;
inline bool CaffeGenData_FieldTranslate::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenData_FieldTranslate::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenData_FieldTranslate::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenData_FieldTranslate::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CaffeGenData_FieldTranslate::table_name() const {
  return *table_name_;
}
inline void CaffeGenData_FieldTranslate::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CaffeGenData_FieldTranslate::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CaffeGenData_FieldTranslate::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_FieldTranslate::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CaffeGenData_FieldTranslate::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_FieldTranslate::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool b_can_replace = 3;
inline bool CaffeGenData_FieldTranslate::has_b_can_replace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaffeGenData_FieldTranslate::set_has_b_can_replace() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaffeGenData_FieldTranslate::clear_has_b_can_replace() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaffeGenData_FieldTranslate::clear_b_can_replace() {
  b_can_replace_ = false;
  clear_has_b_can_replace();
}
inline bool CaffeGenData_FieldTranslate::b_can_replace() const {
  return b_can_replace_;
}
inline void CaffeGenData_FieldTranslate::set_b_can_replace(bool value) {
  set_has_b_can_replace();
  b_can_replace_ = value;
}

// optional int32 max_instances = 4;
inline bool CaffeGenData_FieldTranslate::has_max_instances() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeGenData_FieldTranslate::set_has_max_instances() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeGenData_FieldTranslate::clear_has_max_instances() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeGenData_FieldTranslate::clear_max_instances() {
  max_instances_ = 0;
  clear_has_max_instances();
}
inline ::google::protobuf::int32 CaffeGenData_FieldTranslate::max_instances() const {
  return max_instances_;
}
inline void CaffeGenData_FieldTranslate::set_max_instances(::google::protobuf::int32 value) {
  set_has_max_instances();
  max_instances_ = value;
}

// optional float replace_prob = 5;
inline bool CaffeGenData_FieldTranslate::has_replace_prob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CaffeGenData_FieldTranslate::set_has_replace_prob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CaffeGenData_FieldTranslate::clear_has_replace_prob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CaffeGenData_FieldTranslate::clear_replace_prob() {
  replace_prob_ = 0;
  clear_has_replace_prob();
}
inline float CaffeGenData_FieldTranslate::replace_prob() const {
  return replace_prob_;
}
inline void CaffeGenData_FieldTranslate::set_replace_prob(float value) {
  set_has_replace_prob();
  replace_prob_ = value;
}

// -------------------------------------------------------------------

// CaffeGenData_DataFilter

// required string var_name = 2;
inline bool CaffeGenData_DataFilter::has_var_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenData_DataFilter::set_has_var_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenData_DataFilter::clear_has_var_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenData_DataFilter::clear_var_name() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    var_name_->clear();
  }
  clear_has_var_name();
}
inline const ::std::string& CaffeGenData_DataFilter::var_name() const {
  return *var_name_;
}
inline void CaffeGenData_DataFilter::set_var_name(const ::std::string& value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_DataFilter::set_var_name(const char* value) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(value);
}
inline void CaffeGenData_DataFilter::set_var_name(const char* value, size_t size) {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  var_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_DataFilter::mutable_var_name() {
  set_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    var_name_ = new ::std::string;
  }
  return var_name_;
}
inline ::std::string* CaffeGenData_DataFilter::release_var_name() {
  clear_has_var_name();
  if (var_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = var_name_;
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_DataFilter::set_allocated_var_name(::std::string* var_name) {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (var_name) {
    set_has_var_name();
    var_name_ = var_name;
  } else {
    clear_has_var_name();
    var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string match_string = 4;
inline bool CaffeGenData_DataFilter::has_match_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenData_DataFilter::set_has_match_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenData_DataFilter::clear_has_match_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenData_DataFilter::clear_match_string() {
  if (match_string_ != &::google::protobuf::internal::kEmptyString) {
    match_string_->clear();
  }
  clear_has_match_string();
}
inline const ::std::string& CaffeGenData_DataFilter::match_string() const {
  return *match_string_;
}
inline void CaffeGenData_DataFilter::set_match_string(const ::std::string& value) {
  set_has_match_string();
  if (match_string_ == &::google::protobuf::internal::kEmptyString) {
    match_string_ = new ::std::string;
  }
  match_string_->assign(value);
}
inline void CaffeGenData_DataFilter::set_match_string(const char* value) {
  set_has_match_string();
  if (match_string_ == &::google::protobuf::internal::kEmptyString) {
    match_string_ = new ::std::string;
  }
  match_string_->assign(value);
}
inline void CaffeGenData_DataFilter::set_match_string(const char* value, size_t size) {
  set_has_match_string();
  if (match_string_ == &::google::protobuf::internal::kEmptyString) {
    match_string_ = new ::std::string;
  }
  match_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData_DataFilter::mutable_match_string() {
  set_has_match_string();
  if (match_string_ == &::google::protobuf::internal::kEmptyString) {
    match_string_ = new ::std::string;
  }
  return match_string_;
}
inline ::std::string* CaffeGenData_DataFilter::release_match_string() {
  clear_has_match_string();
  if (match_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = match_string_;
    match_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData_DataFilter::set_allocated_match_string(::std::string* match_string) {
  if (match_string_ != &::google::protobuf::internal::kEmptyString) {
    delete match_string_;
  }
  if (match_string) {
    set_has_match_string();
    match_string_ = match_string;
  } else {
    clear_has_match_string();
    match_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CaffeGenData

// required string not_in_use = 3500;
inline bool CaffeGenData::has_not_in_use() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeGenData::set_has_not_in_use() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeGenData::clear_has_not_in_use() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeGenData::clear_not_in_use() {
  if (not_in_use_ != &::google::protobuf::internal::kEmptyString) {
    not_in_use_->clear();
  }
  clear_has_not_in_use();
}
inline const ::std::string& CaffeGenData::not_in_use() const {
  return *not_in_use_;
}
inline void CaffeGenData::set_not_in_use(const ::std::string& value) {
  set_has_not_in_use();
  if (not_in_use_ == &::google::protobuf::internal::kEmptyString) {
    not_in_use_ = new ::std::string;
  }
  not_in_use_->assign(value);
}
inline void CaffeGenData::set_not_in_use(const char* value) {
  set_has_not_in_use();
  if (not_in_use_ == &::google::protobuf::internal::kEmptyString) {
    not_in_use_ = new ::std::string;
  }
  not_in_use_->assign(value);
}
inline void CaffeGenData::set_not_in_use(const char* value, size_t size) {
  set_has_not_in_use();
  if (not_in_use_ == &::google::protobuf::internal::kEmptyString) {
    not_in_use_ = new ::std::string;
  }
  not_in_use_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_not_in_use() {
  set_has_not_in_use();
  if (not_in_use_ == &::google::protobuf::internal::kEmptyString) {
    not_in_use_ = new ::std::string;
  }
  return not_in_use_;
}
inline ::std::string* CaffeGenData::release_not_in_use() {
  clear_has_not_in_use();
  if (not_in_use_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = not_in_use_;
    not_in_use_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_not_in_use(::std::string* not_in_use) {
  if (not_in_use_ != &::google::protobuf::internal::kEmptyString) {
    delete not_in_use_;
  }
  if (not_in_use) {
    set_has_not_in_use();
    not_in_use_ = not_in_use;
  } else {
    clear_has_not_in_use();
    not_in_use_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 1;
inline bool CaffeGenData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeGenData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeGenData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeGenData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CaffeGenData::name() const {
  return *name_;
}
inline void CaffeGenData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CaffeGenData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CaffeGenData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CaffeGenData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .CaffeGenData.IterateType iterate_type = 2;
inline bool CaffeGenData::has_iterate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaffeGenData::set_has_iterate_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaffeGenData::clear_has_iterate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaffeGenData::clear_iterate_type() {
  iterate_type_ = 1;
  clear_has_iterate_type();
}
inline ::CaffeGenData_IterateType CaffeGenData::iterate_type() const {
  return static_cast< ::CaffeGenData_IterateType >(iterate_type_);
}
inline void CaffeGenData::set_iterate_type(::CaffeGenData_IterateType value) {
  assert(::CaffeGenData_IterateType_IsValid(value));
  set_has_iterate_type();
  iterate_type_ = value;
}

// required .CaffeGenData.DataSrc data_src = 3;
inline bool CaffeGenData::has_data_src() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeGenData::set_has_data_src() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeGenData::clear_has_data_src() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeGenData::clear_data_src() {
  data_src_ = 1;
  clear_has_data_src();
}
inline ::CaffeGenData_DataSrc CaffeGenData::data_src() const {
  return static_cast< ::CaffeGenData_DataSrc >(data_src_);
}
inline void CaffeGenData::set_data_src(::CaffeGenData_DataSrc value) {
  assert(::CaffeGenData_DataSrc_IsValid(value));
  set_has_data_src();
  data_src_ = value;
}

// repeated .CaffeGenData.DataField data_fields = 4;
inline int CaffeGenData::data_fields_size() const {
  return data_fields_.size();
}
inline void CaffeGenData::clear_data_fields() {
  data_fields_.Clear();
}
inline const ::CaffeGenData_DataField& CaffeGenData::data_fields(int index) const {
  return data_fields_.Get(index);
}
inline ::CaffeGenData_DataField* CaffeGenData::mutable_data_fields(int index) {
  return data_fields_.Mutable(index);
}
inline ::CaffeGenData_DataField* CaffeGenData::add_data_fields() {
  return data_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataField >&
CaffeGenData::data_fields() const {
  return data_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataField >*
CaffeGenData::mutable_data_fields() {
  return &data_fields_;
}

// repeated .CaffeGenData.DataTranslate data_translates = 5;
inline int CaffeGenData::data_translates_size() const {
  return data_translates_.size();
}
inline void CaffeGenData::clear_data_translates() {
  data_translates_.Clear();
}
inline const ::CaffeGenData_DataTranslate& CaffeGenData::data_translates(int index) const {
  return data_translates_.Get(index);
}
inline ::CaffeGenData_DataTranslate* CaffeGenData::mutable_data_translates(int index) {
  return data_translates_.Mutable(index);
}
inline ::CaffeGenData_DataTranslate* CaffeGenData::add_data_translates() {
  return data_translates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataTranslate >&
CaffeGenData::data_translates() const {
  return data_translates_;
}
inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataTranslate >*
CaffeGenData::mutable_data_translates() {
  return &data_translates_;
}

// repeated .CaffeGenData.FieldTranslate input_field_translates = 6;
inline int CaffeGenData::input_field_translates_size() const {
  return input_field_translates_.size();
}
inline void CaffeGenData::clear_input_field_translates() {
  input_field_translates_.Clear();
}
inline const ::CaffeGenData_FieldTranslate& CaffeGenData::input_field_translates(int index) const {
  return input_field_translates_.Get(index);
}
inline ::CaffeGenData_FieldTranslate* CaffeGenData::mutable_input_field_translates(int index) {
  return input_field_translates_.Mutable(index);
}
inline ::CaffeGenData_FieldTranslate* CaffeGenData::add_input_field_translates() {
  return input_field_translates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >&
CaffeGenData::input_field_translates() const {
  return input_field_translates_;
}
inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >*
CaffeGenData::mutable_input_field_translates() {
  return &input_field_translates_;
}

// repeated .CaffeGenData.FieldTranslate output_field_translates = 7;
inline int CaffeGenData::output_field_translates_size() const {
  return output_field_translates_.size();
}
inline void CaffeGenData::clear_output_field_translates() {
  output_field_translates_.Clear();
}
inline const ::CaffeGenData_FieldTranslate& CaffeGenData::output_field_translates(int index) const {
  return output_field_translates_.Get(index);
}
inline ::CaffeGenData_FieldTranslate* CaffeGenData::mutable_output_field_translates(int index) {
  return output_field_translates_.Mutable(index);
}
inline ::CaffeGenData_FieldTranslate* CaffeGenData::add_output_field_translates() {
  return output_field_translates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >&
CaffeGenData::output_field_translates() const {
  return output_field_translates_;
}
inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_FieldTranslate >*
CaffeGenData::mutable_output_field_translates() {
  return &output_field_translates_;
}

// required string files_core_dir = 8;
inline bool CaffeGenData::has_files_core_dir() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CaffeGenData::set_has_files_core_dir() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CaffeGenData::clear_has_files_core_dir() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CaffeGenData::clear_files_core_dir() {
  if (files_core_dir_ != &::google::protobuf::internal::kEmptyString) {
    files_core_dir_->clear();
  }
  clear_has_files_core_dir();
}
inline const ::std::string& CaffeGenData::files_core_dir() const {
  return *files_core_dir_;
}
inline void CaffeGenData::set_files_core_dir(const ::std::string& value) {
  set_has_files_core_dir();
  if (files_core_dir_ == &::google::protobuf::internal::kEmptyString) {
    files_core_dir_ = new ::std::string;
  }
  files_core_dir_->assign(value);
}
inline void CaffeGenData::set_files_core_dir(const char* value) {
  set_has_files_core_dir();
  if (files_core_dir_ == &::google::protobuf::internal::kEmptyString) {
    files_core_dir_ = new ::std::string;
  }
  files_core_dir_->assign(value);
}
inline void CaffeGenData::set_files_core_dir(const char* value, size_t size) {
  set_has_files_core_dir();
  if (files_core_dir_ == &::google::protobuf::internal::kEmptyString) {
    files_core_dir_ = new ::std::string;
  }
  files_core_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_files_core_dir() {
  set_has_files_core_dir();
  if (files_core_dir_ == &::google::protobuf::internal::kEmptyString) {
    files_core_dir_ = new ::std::string;
  }
  return files_core_dir_;
}
inline ::std::string* CaffeGenData::release_files_core_dir() {
  clear_has_files_core_dir();
  if (files_core_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = files_core_dir_;
    files_core_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_files_core_dir(::std::string* files_core_dir) {
  if (files_core_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete files_core_dir_;
  }
  if (files_core_dir) {
    set_has_files_core_dir();
    files_core_dir_ = files_core_dir;
  } else {
    clear_has_files_core_dir();
    files_core_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string test_list_file_name = 9;
inline bool CaffeGenData::has_test_list_file_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CaffeGenData::set_has_test_list_file_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CaffeGenData::clear_has_test_list_file_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CaffeGenData::clear_test_list_file_name() {
  if (test_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    test_list_file_name_->clear();
  }
  clear_has_test_list_file_name();
}
inline const ::std::string& CaffeGenData::test_list_file_name() const {
  return *test_list_file_name_;
}
inline void CaffeGenData::set_test_list_file_name(const ::std::string& value) {
  set_has_test_list_file_name();
  if (test_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    test_list_file_name_ = new ::std::string;
  }
  test_list_file_name_->assign(value);
}
inline void CaffeGenData::set_test_list_file_name(const char* value) {
  set_has_test_list_file_name();
  if (test_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    test_list_file_name_ = new ::std::string;
  }
  test_list_file_name_->assign(value);
}
inline void CaffeGenData::set_test_list_file_name(const char* value, size_t size) {
  set_has_test_list_file_name();
  if (test_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    test_list_file_name_ = new ::std::string;
  }
  test_list_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_test_list_file_name() {
  set_has_test_list_file_name();
  if (test_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    test_list_file_name_ = new ::std::string;
  }
  return test_list_file_name_;
}
inline ::std::string* CaffeGenData::release_test_list_file_name() {
  clear_has_test_list_file_name();
  if (test_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_list_file_name_;
    test_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_test_list_file_name(::std::string* test_list_file_name) {
  if (test_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete test_list_file_name_;
  }
  if (test_list_file_name) {
    set_has_test_list_file_name();
    test_list_file_name_ = test_list_file_name;
  } else {
    clear_has_test_list_file_name();
    test_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string train_list_file_name = 10;
inline bool CaffeGenData::has_train_list_file_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CaffeGenData::set_has_train_list_file_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CaffeGenData::clear_has_train_list_file_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CaffeGenData::clear_train_list_file_name() {
  if (train_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    train_list_file_name_->clear();
  }
  clear_has_train_list_file_name();
}
inline const ::std::string& CaffeGenData::train_list_file_name() const {
  return *train_list_file_name_;
}
inline void CaffeGenData::set_train_list_file_name(const ::std::string& value) {
  set_has_train_list_file_name();
  if (train_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    train_list_file_name_ = new ::std::string;
  }
  train_list_file_name_->assign(value);
}
inline void CaffeGenData::set_train_list_file_name(const char* value) {
  set_has_train_list_file_name();
  if (train_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    train_list_file_name_ = new ::std::string;
  }
  train_list_file_name_->assign(value);
}
inline void CaffeGenData::set_train_list_file_name(const char* value, size_t size) {
  set_has_train_list_file_name();
  if (train_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    train_list_file_name_ = new ::std::string;
  }
  train_list_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_train_list_file_name() {
  set_has_train_list_file_name();
  if (train_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    train_list_file_name_ = new ::std::string;
  }
  return train_list_file_name_;
}
inline ::std::string* CaffeGenData::release_train_list_file_name() {
  clear_has_train_list_file_name();
  if (train_list_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = train_list_file_name_;
    train_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_train_list_file_name(::std::string* train_list_file_name) {
  if (train_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete train_list_file_name_;
  }
  if (train_list_file_name) {
    set_has_train_list_file_name();
    train_list_file_name_ = train_list_file_name;
  } else {
    clear_has_train_list_file_name();
    train_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .CaffeGenData.NetEndType net_end_type = 11;
inline bool CaffeGenData::has_net_end_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CaffeGenData::set_has_net_end_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CaffeGenData::clear_has_net_end_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CaffeGenData::clear_net_end_type() {
  net_end_type_ = 1;
  clear_has_net_end_type();
}
inline ::CaffeGenData_NetEndType CaffeGenData::net_end_type() const {
  return static_cast< ::CaffeGenData_NetEndType >(net_end_type_);
}
inline void CaffeGenData::set_net_end_type(::CaffeGenData_NetEndType value) {
  assert(::CaffeGenData_NetEndType_IsValid(value));
  set_has_net_end_type();
  net_end_type_ = value;
}

// required string proto_file_name = 12;
inline bool CaffeGenData::has_proto_file_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CaffeGenData::set_has_proto_file_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CaffeGenData::clear_has_proto_file_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CaffeGenData::clear_proto_file_name() {
  if (proto_file_name_ != &::google::protobuf::internal::kEmptyString) {
    proto_file_name_->clear();
  }
  clear_has_proto_file_name();
}
inline const ::std::string& CaffeGenData::proto_file_name() const {
  return *proto_file_name_;
}
inline void CaffeGenData::set_proto_file_name(const ::std::string& value) {
  set_has_proto_file_name();
  if (proto_file_name_ == &::google::protobuf::internal::kEmptyString) {
    proto_file_name_ = new ::std::string;
  }
  proto_file_name_->assign(value);
}
inline void CaffeGenData::set_proto_file_name(const char* value) {
  set_has_proto_file_name();
  if (proto_file_name_ == &::google::protobuf::internal::kEmptyString) {
    proto_file_name_ = new ::std::string;
  }
  proto_file_name_->assign(value);
}
inline void CaffeGenData::set_proto_file_name(const char* value, size_t size) {
  set_has_proto_file_name();
  if (proto_file_name_ == &::google::protobuf::internal::kEmptyString) {
    proto_file_name_ = new ::std::string;
  }
  proto_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_proto_file_name() {
  set_has_proto_file_name();
  if (proto_file_name_ == &::google::protobuf::internal::kEmptyString) {
    proto_file_name_ = new ::std::string;
  }
  return proto_file_name_;
}
inline ::std::string* CaffeGenData::release_proto_file_name() {
  clear_has_proto_file_name();
  if (proto_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proto_file_name_;
    proto_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_proto_file_name(::std::string* proto_file_name) {
  if (proto_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_file_name_;
  }
  if (proto_file_name) {
    set_has_proto_file_name();
    proto_file_name_ = proto_file_name;
  } else {
    clear_has_proto_file_name();
    proto_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string model_file_name = 13;
inline bool CaffeGenData::has_model_file_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CaffeGenData::set_has_model_file_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CaffeGenData::clear_has_model_file_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CaffeGenData::clear_model_file_name() {
  if (model_file_name_ != &::google::protobuf::internal::kEmptyString) {
    model_file_name_->clear();
  }
  clear_has_model_file_name();
}
inline const ::std::string& CaffeGenData::model_file_name() const {
  return *model_file_name_;
}
inline void CaffeGenData::set_model_file_name(const ::std::string& value) {
  set_has_model_file_name();
  if (model_file_name_ == &::google::protobuf::internal::kEmptyString) {
    model_file_name_ = new ::std::string;
  }
  model_file_name_->assign(value);
}
inline void CaffeGenData::set_model_file_name(const char* value) {
  set_has_model_file_name();
  if (model_file_name_ == &::google::protobuf::internal::kEmptyString) {
    model_file_name_ = new ::std::string;
  }
  model_file_name_->assign(value);
}
inline void CaffeGenData::set_model_file_name(const char* value, size_t size) {
  set_has_model_file_name();
  if (model_file_name_ == &::google::protobuf::internal::kEmptyString) {
    model_file_name_ = new ::std::string;
  }
  model_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_model_file_name() {
  set_has_model_file_name();
  if (model_file_name_ == &::google::protobuf::internal::kEmptyString) {
    model_file_name_ = new ::std::string;
  }
  return model_file_name_;
}
inline ::std::string* CaffeGenData::release_model_file_name() {
  clear_has_model_file_name();
  if (model_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_file_name_;
    model_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_model_file_name(::std::string* model_file_name) {
  if (model_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_name_;
  }
  if (model_file_name) {
    set_has_model_file_name();
    model_file_name_ = model_file_name;
  } else {
    clear_has_model_file_name();
    model_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string config_file_name = 14;
inline bool CaffeGenData::has_config_file_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CaffeGenData::set_has_config_file_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CaffeGenData::clear_has_config_file_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CaffeGenData::clear_config_file_name() {
  if (config_file_name_ != &::google::protobuf::internal::kEmptyString) {
    config_file_name_->clear();
  }
  clear_has_config_file_name();
}
inline const ::std::string& CaffeGenData::config_file_name() const {
  return *config_file_name_;
}
inline void CaffeGenData::set_config_file_name(const ::std::string& value) {
  set_has_config_file_name();
  if (config_file_name_ == &::google::protobuf::internal::kEmptyString) {
    config_file_name_ = new ::std::string;
  }
  config_file_name_->assign(value);
}
inline void CaffeGenData::set_config_file_name(const char* value) {
  set_has_config_file_name();
  if (config_file_name_ == &::google::protobuf::internal::kEmptyString) {
    config_file_name_ = new ::std::string;
  }
  config_file_name_->assign(value);
}
inline void CaffeGenData::set_config_file_name(const char* value, size_t size) {
  set_has_config_file_name();
  if (config_file_name_ == &::google::protobuf::internal::kEmptyString) {
    config_file_name_ = new ::std::string;
  }
  config_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_config_file_name() {
  set_has_config_file_name();
  if (config_file_name_ == &::google::protobuf::internal::kEmptyString) {
    config_file_name_ = new ::std::string;
  }
  return config_file_name_;
}
inline ::std::string* CaffeGenData::release_config_file_name() {
  clear_has_config_file_name();
  if (config_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_file_name_;
    config_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_config_file_name(::std::string* config_file_name) {
  if (config_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete config_file_name_;
  }
  if (config_file_name) {
    set_has_config_file_name();
    config_file_name_ = config_file_name;
  } else {
    clear_has_config_file_name();
    config_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 num_accuracy_candidates = 15;
inline bool CaffeGenData::has_num_accuracy_candidates() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CaffeGenData::set_has_num_accuracy_candidates() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CaffeGenData::clear_has_num_accuracy_candidates() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CaffeGenData::clear_num_accuracy_candidates() {
  num_accuracy_candidates_ = 0;
  clear_has_num_accuracy_candidates();
}
inline ::google::protobuf::int32 CaffeGenData::num_accuracy_candidates() const {
  return num_accuracy_candidates_;
}
inline void CaffeGenData::set_num_accuracy_candidates(::google::protobuf::int32 value) {
  set_has_num_accuracy_candidates();
  num_accuracy_candidates_ = value;
}

// repeated .CaffeGenData.DataFilter data_filters = 17;
inline int CaffeGenData::data_filters_size() const {
  return data_filters_.size();
}
inline void CaffeGenData::clear_data_filters() {
  data_filters_.Clear();
}
inline const ::CaffeGenData_DataFilter& CaffeGenData::data_filters(int index) const {
  return data_filters_.Get(index);
}
inline ::CaffeGenData_DataFilter* CaffeGenData::mutable_data_filters(int index) {
  return data_filters_.Mutable(index);
}
inline ::CaffeGenData_DataFilter* CaffeGenData::add_data_filters() {
  return data_filters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataFilter >&
CaffeGenData::data_filters() const {
  return data_filters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CaffeGenData_DataFilter >*
CaffeGenData::mutable_data_filters() {
  return &data_filters_;
}

// required string netgen_output_file_name = 21;
inline bool CaffeGenData::has_netgen_output_file_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CaffeGenData::set_has_netgen_output_file_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CaffeGenData::clear_has_netgen_output_file_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CaffeGenData::clear_netgen_output_file_name() {
  if (netgen_output_file_name_ != &::google::protobuf::internal::kEmptyString) {
    netgen_output_file_name_->clear();
  }
  clear_has_netgen_output_file_name();
}
inline const ::std::string& CaffeGenData::netgen_output_file_name() const {
  return *netgen_output_file_name_;
}
inline void CaffeGenData::set_netgen_output_file_name(const ::std::string& value) {
  set_has_netgen_output_file_name();
  if (netgen_output_file_name_ == &::google::protobuf::internal::kEmptyString) {
    netgen_output_file_name_ = new ::std::string;
  }
  netgen_output_file_name_->assign(value);
}
inline void CaffeGenData::set_netgen_output_file_name(const char* value) {
  set_has_netgen_output_file_name();
  if (netgen_output_file_name_ == &::google::protobuf::internal::kEmptyString) {
    netgen_output_file_name_ = new ::std::string;
  }
  netgen_output_file_name_->assign(value);
}
inline void CaffeGenData::set_netgen_output_file_name(const char* value, size_t size) {
  set_has_netgen_output_file_name();
  if (netgen_output_file_name_ == &::google::protobuf::internal::kEmptyString) {
    netgen_output_file_name_ = new ::std::string;
  }
  netgen_output_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeGenData::mutable_netgen_output_file_name() {
  set_has_netgen_output_file_name();
  if (netgen_output_file_name_ == &::google::protobuf::internal::kEmptyString) {
    netgen_output_file_name_ = new ::std::string;
  }
  return netgen_output_file_name_;
}
inline ::std::string* CaffeGenData::release_netgen_output_file_name() {
  clear_has_netgen_output_file_name();
  if (netgen_output_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netgen_output_file_name_;
    netgen_output_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeGenData::set_allocated_netgen_output_file_name(::std::string* netgen_output_file_name) {
  if (netgen_output_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete netgen_output_file_name_;
  }
  if (netgen_output_file_name) {
    set_has_netgen_output_file_name();
    netgen_output_file_name_ = netgen_output_file_name;
  } else {
    clear_has_netgen_output_file_name();
    netgen_output_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CaffeGenData_IterateType>() {
  return ::CaffeGenData_IterateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CaffeGenData_DataSrc>() {
  return ::CaffeGenData_DataSrc_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CaffeGenData_FieldType>() {
  return ::CaffeGenData_FieldType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CaffeGenData_DataTranslateType>() {
  return ::CaffeGenData_DataTranslateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CaffeGenData_NetEndType>() {
  return ::CaffeGenData_NetEndType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GenData_2eproto__INCLUDED
