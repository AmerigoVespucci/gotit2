// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GenDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CaffeGenDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenDef_DataAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDef_DataAccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenDef_DataFilterOneSide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDef_DataFilterOneSide_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenDef_DataFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDef_DataFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenDef_DataTranslate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDef_DataTranslate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeGenDef_NetValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeGenDef_NetValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_AccessType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_MatchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_FilterMatchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_WordDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_DataTranslateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_VarExtractType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeGenDef_NetEndType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GenDef_2eproto() {
  protobuf_AddDesc_GenDef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GenDef.proto");
  GOOGLE_CHECK(file != NULL);
  CaffeGenDef_descriptor_ = file->message_type(0);
  static const int CaffeGenDef_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, numsentencerecstosearch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, access_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, data_filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, data_translates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, net_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, files_core_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, test_list_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, train_list_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, net_end_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, proto_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, model_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, config_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, num_accuracy_candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, netgen_output_file_name_),
  };
  CaffeGenDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDef_descriptor_,
      CaffeGenDef::default_instance_,
      CaffeGenDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDef));
  CaffeGenDef_DataAccess_descriptor_ = CaffeGenDef_descriptor_->nested_type(0);
  static const int CaffeGenDef_DataAccess_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, access_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, dep_type_to_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, pos_to_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, word_to_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, var_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, max_srec_beyond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, min_srec_beyond_),
  };
  CaffeGenDef_DataAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDef_DataAccess_descriptor_,
      CaffeGenDef_DataAccess::default_instance_,
      CaffeGenDef_DataAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDef_DataAccess));
  CaffeGenDef_DataFilterOneSide_descriptor_ = CaffeGenDef_descriptor_->nested_type(1);
  static const int CaffeGenDef_DataFilterOneSide_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilterOneSide, var_name_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilterOneSide, mt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilterOneSide, var_src_idx_),
  };
  CaffeGenDef_DataFilterOneSide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDef_DataFilterOneSide_descriptor_,
      CaffeGenDef_DataFilterOneSide::default_instance_,
      CaffeGenDef_DataFilterOneSide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilterOneSide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilterOneSide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDef_DataFilterOneSide));
  CaffeGenDef_DataFilter_descriptor_ = CaffeGenDef_descriptor_->nested_type(2);
  static const int CaffeGenDef_DataFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilter, fmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilter, left_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilter, right_side_),
  };
  CaffeGenDef_DataFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDef_DataFilter_descriptor_,
      CaffeGenDef_DataFilter::default_instance_,
      CaffeGenDef_DataFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDef_DataFilter));
  CaffeGenDef_DataTranslate_descriptor_ = CaffeGenDef_descriptor_->nested_type(3);
  static const int CaffeGenDef_DataTranslate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataTranslate, translate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataTranslate, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataTranslate, match_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataTranslate, field_type_),
  };
  CaffeGenDef_DataTranslate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDef_DataTranslate_descriptor_,
      CaffeGenDef_DataTranslate::default_instance_,
      CaffeGenDef_DataTranslate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataTranslate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_DataTranslate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDef_DataTranslate));
  CaffeGenDef_NetValue_descriptor_ = CaffeGenDef_descriptor_->nested_type(4);
  static const int CaffeGenDef_NetValue_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, b_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, var_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, var_name_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, vet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, vec_table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, var_src_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, vec_table_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, b_can_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, max_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, replace_prob_),
  };
  CaffeGenDef_NetValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeGenDef_NetValue_descriptor_,
      CaffeGenDef_NetValue::default_instance_,
      CaffeGenDef_NetValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeGenDef_NetValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeGenDef_NetValue));
  CaffeGenDef_AccessType_descriptor_ = CaffeGenDef_descriptor_->enum_type(0);
  CaffeGenDef_MatchType_descriptor_ = CaffeGenDef_descriptor_->enum_type(1);
  CaffeGenDef_FilterMatchType_descriptor_ = CaffeGenDef_descriptor_->enum_type(2);
  CaffeGenDef_WordDataType_descriptor_ = CaffeGenDef_descriptor_->enum_type(3);
  CaffeGenDef_DataTranslateType_descriptor_ = CaffeGenDef_descriptor_->enum_type(4);
  CaffeGenDef_VarExtractType_descriptor_ = CaffeGenDef_descriptor_->enum_type(5);
  CaffeGenDef_NetEndType_descriptor_ = CaffeGenDef_descriptor_->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GenDef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDef_descriptor_, &CaffeGenDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDef_DataAccess_descriptor_, &CaffeGenDef_DataAccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDef_DataFilterOneSide_descriptor_, &CaffeGenDef_DataFilterOneSide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDef_DataFilter_descriptor_, &CaffeGenDef_DataFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDef_DataTranslate_descriptor_, &CaffeGenDef_DataTranslate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeGenDef_NetValue_descriptor_, &CaffeGenDef_NetValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GenDef_2eproto() {
  delete CaffeGenDef::default_instance_;
  delete CaffeGenDef_reflection_;
  delete CaffeGenDef_DataAccess::default_instance_;
  delete CaffeGenDef_DataAccess_reflection_;
  delete CaffeGenDef_DataFilterOneSide::default_instance_;
  delete CaffeGenDef_DataFilterOneSide_reflection_;
  delete CaffeGenDef_DataFilter::default_instance_;
  delete CaffeGenDef_DataFilter_reflection_;
  delete CaffeGenDef_DataTranslate::default_instance_;
  delete CaffeGenDef_DataTranslate_reflection_;
  delete CaffeGenDef_NetValue::default_instance_;
  delete CaffeGenDef_NetValue_reflection_;
}

void protobuf_AddDesc_GenDef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GenDef.proto\"\367\017\n\013CaffeGenDef\022\014\n\004name\030\001"
    " \002(\t\022\037\n\027NumSentenceRecsToSearch\030\002 \001(\005\022.\n"
    "\raccess_fields\030\003 \003(\0132\027.CaffeGenDef.DataA"
    "ccess\022-\n\014data_filters\030\004 \003(\0132\027.CaffeGenDe"
    "f.DataFilter\0223\n\017data_translates\030\005 \003(\0132\032."
    "CaffeGenDef.DataTranslate\022)\n\nnet_values\030"
    "\006 \003(\0132\025.CaffeGenDef.NetValue\022\026\n\016files_co"
    "re_dir\030\010 \002(\t\022\033\n\023test_list_file_name\030\t \002("
    "\t\022\034\n\024train_list_file_name\030\n \002(\t\022-\n\014net_e"
    "nd_type\030\013 \002(\0162\027.CaffeGenDef.NetEndType\022\027"
    "\n\017proto_file_name\030\014 \002(\t\022\027\n\017model_file_na"
    "me\030\r \002(\t\022\030\n\020config_file_name\030\016 \002(\t\022\037\n\027nu"
    "m_accuracy_candidates\030\017 \001(\005\022\037\n\027netgen_ou"
    "tput_file_name\030\022 \002(\t\032\327\001\n\nDataAccess\022\020\n\010v"
    "ar_name\030\001 \002(\t\022,\n\013access_type\030\002 \002(\0162\027.Caf"
    "feGenDef.AccessType\022\031\n\021dep_type_to_match"
    "\030\003 \001(\t\022\024\n\014POS_to_match\030\004 \001(\t\022\025\n\rword_to_"
    "match\030\005 \001(\t\022\017\n\007var_idx\030\006 \001(\005\022\027\n\017max_srec"
    "_beyond\030\013 \001(\005\022\027\n\017min_srec_beyond\030\014 \001(\005\032b"
    "\n\021DataFilterOneSide\022\024\n\014var_name_src\030\001 \002("
    "\t\022\"\n\002mt\030\002 \002(\0162\026.CaffeGenDef.MatchType\022\023\n"
    "\013var_src_idx\030\003 \001(\005\032\236\001\n\nDataFilter\022)\n\003fmt"
    "\030\001 \001(\0162\034.CaffeGenDef.FilterMatchType\0221\n\t"
    "left_side\030\002 \002(\0132\036.CaffeGenDef.DataFilter"
    "OneSide\0222\n\nright_side\030\003 \002(\0132\036.CaffeGenDe"
    "f.DataFilterOneSide\032\234\001\n\rDataTranslate\0226\n"
    "\016translate_type\030\001 \002(\0162\036.CaffeGenDef.Data"
    "TranslateType\022\020\n\010var_name\030\002 \002(\t\022\022\n\nmatch"
    "_name\030\004 \002(\t\022-\n\nfield_type\030\006 \001(\0162\031.CaffeG"
    "enDef.WordDataType\032\365\001\n\010NetValue\022\017\n\007b_inp"
    "ut\030\001 \002(\010\022\020\n\010var_name\030\002 \002(\t\022\024\n\014var_name_s"
    "rc\030\003 \002(\t\022(\n\003vet\030\004 \002(\0162\033.CaffeGenDef.VarE"
    "xtractType\022\026\n\016vec_table_name\030\005 \002(\t\022\023\n\013va"
    "r_src_idx\030\006 \001(\005\022\025\n\rvec_table_idx\030\007 \001(\005\022\025"
    "\n\rb_can_replace\030\010 \001(\010\022\025\n\rmax_instances\030\t"
    " \001(\005\022\024\n\014replace_prob\030\n \001(\002\"7\n\nAccessType"
    "\022\023\n\017ACCESS_TYPE_DEP\020\001\022\024\n\020ACCESS_TYPE_WOR"
    "D\020\002\"\206\001\n\tMatchType\022\016\n\nmtDEP_RDID\020\001\022\022\n\016mtD"
    "EP_GOV_RWID\020\002\022\022\n\016mtDEP_DEP_RWID\020\003\022\017\n\013mtW"
    "ORD_RWID\020\004\022\017\n\013mtWORD_CORE\020\005\022\017\n\013mtWORD_WO"
    "RD\020\006\022\016\n\nmtWORD_POS\020\007\"-\n\017FilterMatchType\022"
    "\014\n\010fmtEqual\020\001\022\014\n\010fmtClose\020\002\"4\n\014WordDataT"
    "ype\022\013\n\007wdtWORD\020\001\022\n\n\006wdtPOS\020\002\022\013\n\007wdtCORE\020"
    "\003\"\236\001\n\021DataTranslateType\022\023\n\017dttRWID_TO_WO"
    "RD\020\001\022\024\n\020dttRWID_TO_COREF\020\002\022\023\n\017dttRWID_TO"
    "_RDID\020\003\022\027\n\023dttRDID_TO_DEP_NAME\020\004\022\027\n\023dttR"
    "DID_TO_GOV_RWID\020\005\022\027\n\023dttRDID_TO_DEP_RWID"
    "\020\006\"k\n\016VarExtractType\022\n\n\006vetPOS\020\001\022\017\n\013vetW"
    "ordCore\020\002\022\013\n\007vetWord\020\003\022\016\n\nvetDepName\020\004\022\014"
    "\n\010vetDummy\020\005\022\021\n\rvetNumDepGovs\020\006\"\?\n\nNetEn"
    "dType\022\r\n\tEND_VALID\020\001\022\017\n\013END_ONE_HOT\020\002\022\021\n"
    "\rEND_MULTI_HOT\020\003", 2056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GenDef.proto", &protobuf_RegisterTypes);
  CaffeGenDef::default_instance_ = new CaffeGenDef();
  CaffeGenDef_DataAccess::default_instance_ = new CaffeGenDef_DataAccess();
  CaffeGenDef_DataFilterOneSide::default_instance_ = new CaffeGenDef_DataFilterOneSide();
  CaffeGenDef_DataFilter::default_instance_ = new CaffeGenDef_DataFilter();
  CaffeGenDef_DataTranslate::default_instance_ = new CaffeGenDef_DataTranslate();
  CaffeGenDef_NetValue::default_instance_ = new CaffeGenDef_NetValue();
  CaffeGenDef::default_instance_->InitAsDefaultInstance();
  CaffeGenDef_DataAccess::default_instance_->InitAsDefaultInstance();
  CaffeGenDef_DataFilterOneSide::default_instance_->InitAsDefaultInstance();
  CaffeGenDef_DataFilter::default_instance_->InitAsDefaultInstance();
  CaffeGenDef_DataTranslate::default_instance_->InitAsDefaultInstance();
  CaffeGenDef_NetValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GenDef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GenDef_2eproto {
  StaticDescriptorInitializer_GenDef_2eproto() {
    protobuf_AddDesc_GenDef_2eproto();
  }
} static_descriptor_initializer_GenDef_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CaffeGenDef_AccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_AccessType_descriptor_;
}
bool CaffeGenDef_AccessType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_AccessType CaffeGenDef::ACCESS_TYPE_DEP;
const CaffeGenDef_AccessType CaffeGenDef::ACCESS_TYPE_WORD;
const CaffeGenDef_AccessType CaffeGenDef::AccessType_MIN;
const CaffeGenDef_AccessType CaffeGenDef::AccessType_MAX;
const int CaffeGenDef::AccessType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenDef_MatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_MatchType_descriptor_;
}
bool CaffeGenDef_MatchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_MatchType CaffeGenDef::mtDEP_RDID;
const CaffeGenDef_MatchType CaffeGenDef::mtDEP_GOV_RWID;
const CaffeGenDef_MatchType CaffeGenDef::mtDEP_DEP_RWID;
const CaffeGenDef_MatchType CaffeGenDef::mtWORD_RWID;
const CaffeGenDef_MatchType CaffeGenDef::mtWORD_CORE;
const CaffeGenDef_MatchType CaffeGenDef::mtWORD_WORD;
const CaffeGenDef_MatchType CaffeGenDef::mtWORD_POS;
const CaffeGenDef_MatchType CaffeGenDef::MatchType_MIN;
const CaffeGenDef_MatchType CaffeGenDef::MatchType_MAX;
const int CaffeGenDef::MatchType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenDef_FilterMatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_FilterMatchType_descriptor_;
}
bool CaffeGenDef_FilterMatchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_FilterMatchType CaffeGenDef::fmtEqual;
const CaffeGenDef_FilterMatchType CaffeGenDef::fmtClose;
const CaffeGenDef_FilterMatchType CaffeGenDef::FilterMatchType_MIN;
const CaffeGenDef_FilterMatchType CaffeGenDef::FilterMatchType_MAX;
const int CaffeGenDef::FilterMatchType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenDef_WordDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_WordDataType_descriptor_;
}
bool CaffeGenDef_WordDataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_WordDataType CaffeGenDef::wdtWORD;
const CaffeGenDef_WordDataType CaffeGenDef::wdtPOS;
const CaffeGenDef_WordDataType CaffeGenDef::wdtCORE;
const CaffeGenDef_WordDataType CaffeGenDef::WordDataType_MIN;
const CaffeGenDef_WordDataType CaffeGenDef::WordDataType_MAX;
const int CaffeGenDef::WordDataType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenDef_DataTranslateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_DataTranslateType_descriptor_;
}
bool CaffeGenDef_DataTranslateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_DataTranslateType CaffeGenDef::dttRWID_TO_WORD;
const CaffeGenDef_DataTranslateType CaffeGenDef::dttRWID_TO_COREF;
const CaffeGenDef_DataTranslateType CaffeGenDef::dttRWID_TO_RDID;
const CaffeGenDef_DataTranslateType CaffeGenDef::dttRDID_TO_DEP_NAME;
const CaffeGenDef_DataTranslateType CaffeGenDef::dttRDID_TO_GOV_RWID;
const CaffeGenDef_DataTranslateType CaffeGenDef::dttRDID_TO_DEP_RWID;
const CaffeGenDef_DataTranslateType CaffeGenDef::DataTranslateType_MIN;
const CaffeGenDef_DataTranslateType CaffeGenDef::DataTranslateType_MAX;
const int CaffeGenDef::DataTranslateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenDef_VarExtractType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_VarExtractType_descriptor_;
}
bool CaffeGenDef_VarExtractType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_VarExtractType CaffeGenDef::vetPOS;
const CaffeGenDef_VarExtractType CaffeGenDef::vetWordCore;
const CaffeGenDef_VarExtractType CaffeGenDef::vetWord;
const CaffeGenDef_VarExtractType CaffeGenDef::vetDepName;
const CaffeGenDef_VarExtractType CaffeGenDef::vetDummy;
const CaffeGenDef_VarExtractType CaffeGenDef::vetNumDepGovs;
const CaffeGenDef_VarExtractType CaffeGenDef::VarExtractType_MIN;
const CaffeGenDef_VarExtractType CaffeGenDef::VarExtractType_MAX;
const int CaffeGenDef::VarExtractType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CaffeGenDef_NetEndType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_NetEndType_descriptor_;
}
bool CaffeGenDef_NetEndType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeGenDef_NetEndType CaffeGenDef::END_VALID;
const CaffeGenDef_NetEndType CaffeGenDef::END_ONE_HOT;
const CaffeGenDef_NetEndType CaffeGenDef::END_MULTI_HOT;
const CaffeGenDef_NetEndType CaffeGenDef::NetEndType_MIN;
const CaffeGenDef_NetEndType CaffeGenDef::NetEndType_MAX;
const int CaffeGenDef::NetEndType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CaffeGenDef_DataAccess::kVarNameFieldNumber;
const int CaffeGenDef_DataAccess::kAccessTypeFieldNumber;
const int CaffeGenDef_DataAccess::kDepTypeToMatchFieldNumber;
const int CaffeGenDef_DataAccess::kPOSToMatchFieldNumber;
const int CaffeGenDef_DataAccess::kWordToMatchFieldNumber;
const int CaffeGenDef_DataAccess::kVarIdxFieldNumber;
const int CaffeGenDef_DataAccess::kMaxSrecBeyondFieldNumber;
const int CaffeGenDef_DataAccess::kMinSrecBeyondFieldNumber;
#endif  // !_MSC_VER

CaffeGenDef_DataAccess::CaffeGenDef_DataAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDef_DataAccess::InitAsDefaultInstance() {
}

CaffeGenDef_DataAccess::CaffeGenDef_DataAccess(const CaffeGenDef_DataAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDef_DataAccess::SharedCtor() {
  _cached_size_ = 0;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_type_ = 1;
  dep_type_to_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_to_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  word_to_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  var_idx_ = 0;
  max_srec_beyond_ = 0;
  min_srec_beyond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDef_DataAccess::~CaffeGenDef_DataAccess() {
  SharedDtor();
}

void CaffeGenDef_DataAccess::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (dep_type_to_match_ != &::google::protobuf::internal::kEmptyString) {
    delete dep_type_to_match_;
  }
  if (pos_to_match_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_to_match_;
  }
  if (word_to_match_ != &::google::protobuf::internal::kEmptyString) {
    delete word_to_match_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDef_DataAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDef_DataAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_DataAccess_descriptor_;
}

const CaffeGenDef_DataAccess& CaffeGenDef_DataAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDef_2eproto();
  return *default_instance_;
}

CaffeGenDef_DataAccess* CaffeGenDef_DataAccess::default_instance_ = NULL;

CaffeGenDef_DataAccess* CaffeGenDef_DataAccess::New() const {
  return new CaffeGenDef_DataAccess;
}

void CaffeGenDef_DataAccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    access_type_ = 1;
    if (has_dep_type_to_match()) {
      if (dep_type_to_match_ != &::google::protobuf::internal::kEmptyString) {
        dep_type_to_match_->clear();
      }
    }
    if (has_pos_to_match()) {
      if (pos_to_match_ != &::google::protobuf::internal::kEmptyString) {
        pos_to_match_->clear();
      }
    }
    if (has_word_to_match()) {
      if (word_to_match_ != &::google::protobuf::internal::kEmptyString) {
        word_to_match_->clear();
      }
    }
    var_idx_ = 0;
    max_srec_beyond_ = 0;
    min_srec_beyond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDef_DataAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string var_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_access_type;
        break;
      }

      // required .CaffeGenDef.AccessType access_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_AccessType_IsValid(value)) {
            set_access_type(static_cast< ::CaffeGenDef_AccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dep_type_to_match;
        break;
      }

      // optional string dep_type_to_match = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_type_to_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dep_type_to_match()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dep_type_to_match().data(), this->dep_type_to_match().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_POS_to_match;
        break;
      }

      // optional string POS_to_match = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_POS_to_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos_to_match()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pos_to_match().data(), this->pos_to_match().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_word_to_match;
        break;
      }

      // optional string word_to_match = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word_to_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word_to_match()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word_to_match().data(), this->word_to_match().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_var_idx;
        break;
      }

      // optional int32 var_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &var_idx_)));
          set_has_var_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_max_srec_beyond;
        break;
      }

      // optional int32 max_srec_beyond = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_srec_beyond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_srec_beyond_)));
          set_has_max_srec_beyond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_min_srec_beyond;
        break;
      }

      // optional int32 min_srec_beyond = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_srec_beyond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_srec_beyond_)));
          set_has_min_srec_beyond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDef_DataAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string var_name = 1;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->var_name(), output);
  }

  // required .CaffeGenDef.AccessType access_type = 2;
  if (has_access_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->access_type(), output);
  }

  // optional string dep_type_to_match = 3;
  if (has_dep_type_to_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_type_to_match().data(), this->dep_type_to_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dep_type_to_match(), output);
  }

  // optional string POS_to_match = 4;
  if (has_pos_to_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos_to_match().data(), this->pos_to_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pos_to_match(), output);
  }

  // optional string word_to_match = 5;
  if (has_word_to_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word_to_match().data(), this->word_to_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->word_to_match(), output);
  }

  // optional int32 var_idx = 6;
  if (has_var_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->var_idx(), output);
  }

  // optional int32 max_srec_beyond = 11;
  if (has_max_srec_beyond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_srec_beyond(), output);
  }

  // optional int32 min_srec_beyond = 12;
  if (has_min_srec_beyond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->min_srec_beyond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDef_DataAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string var_name = 1;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_name(), target);
  }

  // required .CaffeGenDef.AccessType access_type = 2;
  if (has_access_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->access_type(), target);
  }

  // optional string dep_type_to_match = 3;
  if (has_dep_type_to_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_type_to_match().data(), this->dep_type_to_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dep_type_to_match(), target);
  }

  // optional string POS_to_match = 4;
  if (has_pos_to_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos_to_match().data(), this->pos_to_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pos_to_match(), target);
  }

  // optional string word_to_match = 5;
  if (has_word_to_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word_to_match().data(), this->word_to_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->word_to_match(), target);
  }

  // optional int32 var_idx = 6;
  if (has_var_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->var_idx(), target);
  }

  // optional int32 max_srec_beyond = 11;
  if (has_max_srec_beyond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_srec_beyond(), target);
  }

  // optional int32 min_srec_beyond = 12;
  if (has_min_srec_beyond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->min_srec_beyond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDef_DataAccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string var_name = 1;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // required .CaffeGenDef.AccessType access_type = 2;
    if (has_access_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
    }

    // optional string dep_type_to_match = 3;
    if (has_dep_type_to_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dep_type_to_match());
    }

    // optional string POS_to_match = 4;
    if (has_pos_to_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos_to_match());
    }

    // optional string word_to_match = 5;
    if (has_word_to_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word_to_match());
    }

    // optional int32 var_idx = 6;
    if (has_var_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->var_idx());
    }

    // optional int32 max_srec_beyond = 11;
    if (has_max_srec_beyond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_srec_beyond());
    }

    // optional int32 min_srec_beyond = 12;
    if (has_min_srec_beyond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_srec_beyond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDef_DataAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDef_DataAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDef_DataAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDef_DataAccess::MergeFrom(const CaffeGenDef_DataAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_access_type()) {
      set_access_type(from.access_type());
    }
    if (from.has_dep_type_to_match()) {
      set_dep_type_to_match(from.dep_type_to_match());
    }
    if (from.has_pos_to_match()) {
      set_pos_to_match(from.pos_to_match());
    }
    if (from.has_word_to_match()) {
      set_word_to_match(from.word_to_match());
    }
    if (from.has_var_idx()) {
      set_var_idx(from.var_idx());
    }
    if (from.has_max_srec_beyond()) {
      set_max_srec_beyond(from.max_srec_beyond());
    }
    if (from.has_min_srec_beyond()) {
      set_min_srec_beyond(from.min_srec_beyond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDef_DataAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDef_DataAccess::CopyFrom(const CaffeGenDef_DataAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDef_DataAccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaffeGenDef_DataAccess::Swap(CaffeGenDef_DataAccess* other) {
  if (other != this) {
    std::swap(var_name_, other->var_name_);
    std::swap(access_type_, other->access_type_);
    std::swap(dep_type_to_match_, other->dep_type_to_match_);
    std::swap(pos_to_match_, other->pos_to_match_);
    std::swap(word_to_match_, other->word_to_match_);
    std::swap(var_idx_, other->var_idx_);
    std::swap(max_srec_beyond_, other->max_srec_beyond_);
    std::swap(min_srec_beyond_, other->min_srec_beyond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDef_DataAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDef_DataAccess_descriptor_;
  metadata.reflection = CaffeGenDef_DataAccess_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenDef_DataFilterOneSide::kVarNameSrcFieldNumber;
const int CaffeGenDef_DataFilterOneSide::kMtFieldNumber;
const int CaffeGenDef_DataFilterOneSide::kVarSrcIdxFieldNumber;
#endif  // !_MSC_VER

CaffeGenDef_DataFilterOneSide::CaffeGenDef_DataFilterOneSide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDef_DataFilterOneSide::InitAsDefaultInstance() {
}

CaffeGenDef_DataFilterOneSide::CaffeGenDef_DataFilterOneSide(const CaffeGenDef_DataFilterOneSide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDef_DataFilterOneSide::SharedCtor() {
  _cached_size_ = 0;
  var_name_src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mt_ = 1;
  var_src_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDef_DataFilterOneSide::~CaffeGenDef_DataFilterOneSide() {
  SharedDtor();
}

void CaffeGenDef_DataFilterOneSide::SharedDtor() {
  if (var_name_src_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_src_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDef_DataFilterOneSide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDef_DataFilterOneSide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_DataFilterOneSide_descriptor_;
}

const CaffeGenDef_DataFilterOneSide& CaffeGenDef_DataFilterOneSide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDef_2eproto();
  return *default_instance_;
}

CaffeGenDef_DataFilterOneSide* CaffeGenDef_DataFilterOneSide::default_instance_ = NULL;

CaffeGenDef_DataFilterOneSide* CaffeGenDef_DataFilterOneSide::New() const {
  return new CaffeGenDef_DataFilterOneSide;
}

void CaffeGenDef_DataFilterOneSide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_var_name_src()) {
      if (var_name_src_ != &::google::protobuf::internal::kEmptyString) {
        var_name_src_->clear();
      }
    }
    mt_ = 1;
    var_src_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDef_DataFilterOneSide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string var_name_src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name_src().data(), this->var_name_src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mt;
        break;
      }

      // required .CaffeGenDef.MatchType mt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_MatchType_IsValid(value)) {
            set_mt(static_cast< ::CaffeGenDef_MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_var_src_idx;
        break;
      }

      // optional int32 var_src_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var_src_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &var_src_idx_)));
          set_has_var_src_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDef_DataFilterOneSide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string var_name_src = 1;
  if (has_var_name_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name_src().data(), this->var_name_src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->var_name_src(), output);
  }

  // required .CaffeGenDef.MatchType mt = 2;
  if (has_mt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mt(), output);
  }

  // optional int32 var_src_idx = 3;
  if (has_var_src_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->var_src_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDef_DataFilterOneSide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string var_name_src = 1;
  if (has_var_name_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name_src().data(), this->var_name_src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var_name_src(), target);
  }

  // required .CaffeGenDef.MatchType mt = 2;
  if (has_mt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mt(), target);
  }

  // optional int32 var_src_idx = 3;
  if (has_var_src_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->var_src_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDef_DataFilterOneSide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string var_name_src = 1;
    if (has_var_name_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name_src());
    }

    // required .CaffeGenDef.MatchType mt = 2;
    if (has_mt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mt());
    }

    // optional int32 var_src_idx = 3;
    if (has_var_src_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->var_src_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDef_DataFilterOneSide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDef_DataFilterOneSide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDef_DataFilterOneSide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDef_DataFilterOneSide::MergeFrom(const CaffeGenDef_DataFilterOneSide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var_name_src()) {
      set_var_name_src(from.var_name_src());
    }
    if (from.has_mt()) {
      set_mt(from.mt());
    }
    if (from.has_var_src_idx()) {
      set_var_src_idx(from.var_src_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDef_DataFilterOneSide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDef_DataFilterOneSide::CopyFrom(const CaffeGenDef_DataFilterOneSide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDef_DataFilterOneSide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaffeGenDef_DataFilterOneSide::Swap(CaffeGenDef_DataFilterOneSide* other) {
  if (other != this) {
    std::swap(var_name_src_, other->var_name_src_);
    std::swap(mt_, other->mt_);
    std::swap(var_src_idx_, other->var_src_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDef_DataFilterOneSide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDef_DataFilterOneSide_descriptor_;
  metadata.reflection = CaffeGenDef_DataFilterOneSide_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenDef_DataFilter::kFmtFieldNumber;
const int CaffeGenDef_DataFilter::kLeftSideFieldNumber;
const int CaffeGenDef_DataFilter::kRightSideFieldNumber;
#endif  // !_MSC_VER

CaffeGenDef_DataFilter::CaffeGenDef_DataFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDef_DataFilter::InitAsDefaultInstance() {
  left_side_ = const_cast< ::CaffeGenDef_DataFilterOneSide*>(&::CaffeGenDef_DataFilterOneSide::default_instance());
  right_side_ = const_cast< ::CaffeGenDef_DataFilterOneSide*>(&::CaffeGenDef_DataFilterOneSide::default_instance());
}

CaffeGenDef_DataFilter::CaffeGenDef_DataFilter(const CaffeGenDef_DataFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDef_DataFilter::SharedCtor() {
  _cached_size_ = 0;
  fmt_ = 1;
  left_side_ = NULL;
  right_side_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDef_DataFilter::~CaffeGenDef_DataFilter() {
  SharedDtor();
}

void CaffeGenDef_DataFilter::SharedDtor() {
  if (this != default_instance_) {
    delete left_side_;
    delete right_side_;
  }
}

void CaffeGenDef_DataFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDef_DataFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_DataFilter_descriptor_;
}

const CaffeGenDef_DataFilter& CaffeGenDef_DataFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDef_2eproto();
  return *default_instance_;
}

CaffeGenDef_DataFilter* CaffeGenDef_DataFilter::default_instance_ = NULL;

CaffeGenDef_DataFilter* CaffeGenDef_DataFilter::New() const {
  return new CaffeGenDef_DataFilter;
}

void CaffeGenDef_DataFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fmt_ = 1;
    if (has_left_side()) {
      if (left_side_ != NULL) left_side_->::CaffeGenDef_DataFilterOneSide::Clear();
    }
    if (has_right_side()) {
      if (right_side_ != NULL) right_side_->::CaffeGenDef_DataFilterOneSide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDef_DataFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CaffeGenDef.FilterMatchType fmt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_FilterMatchType_IsValid(value)) {
            set_fmt(static_cast< ::CaffeGenDef_FilterMatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_left_side;
        break;
      }

      // required .CaffeGenDef.DataFilterOneSide left_side = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_side()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right_side;
        break;
      }

      // required .CaffeGenDef.DataFilterOneSide right_side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_side()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDef_DataFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CaffeGenDef.FilterMatchType fmt = 1;
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fmt(), output);
  }

  // required .CaffeGenDef.DataFilterOneSide left_side = 2;
  if (has_left_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left_side(), output);
  }

  // required .CaffeGenDef.DataFilterOneSide right_side = 3;
  if (has_right_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right_side(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDef_DataFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CaffeGenDef.FilterMatchType fmt = 1;
  if (has_fmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fmt(), target);
  }

  // required .CaffeGenDef.DataFilterOneSide left_side = 2;
  if (has_left_side()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left_side(), target);
  }

  // required .CaffeGenDef.DataFilterOneSide right_side = 3;
  if (has_right_side()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right_side(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDef_DataFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CaffeGenDef.FilterMatchType fmt = 1;
    if (has_fmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fmt());
    }

    // required .CaffeGenDef.DataFilterOneSide left_side = 2;
    if (has_left_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_side());
    }

    // required .CaffeGenDef.DataFilterOneSide right_side = 3;
    if (has_right_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_side());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDef_DataFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDef_DataFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDef_DataFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDef_DataFilter::MergeFrom(const CaffeGenDef_DataFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmt()) {
      set_fmt(from.fmt());
    }
    if (from.has_left_side()) {
      mutable_left_side()->::CaffeGenDef_DataFilterOneSide::MergeFrom(from.left_side());
    }
    if (from.has_right_side()) {
      mutable_right_side()->::CaffeGenDef_DataFilterOneSide::MergeFrom(from.right_side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDef_DataFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDef_DataFilter::CopyFrom(const CaffeGenDef_DataFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDef_DataFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_left_side()) {
    if (!this->left_side().IsInitialized()) return false;
  }
  if (has_right_side()) {
    if (!this->right_side().IsInitialized()) return false;
  }
  return true;
}

void CaffeGenDef_DataFilter::Swap(CaffeGenDef_DataFilter* other) {
  if (other != this) {
    std::swap(fmt_, other->fmt_);
    std::swap(left_side_, other->left_side_);
    std::swap(right_side_, other->right_side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDef_DataFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDef_DataFilter_descriptor_;
  metadata.reflection = CaffeGenDef_DataFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenDef_DataTranslate::kTranslateTypeFieldNumber;
const int CaffeGenDef_DataTranslate::kVarNameFieldNumber;
const int CaffeGenDef_DataTranslate::kMatchNameFieldNumber;
const int CaffeGenDef_DataTranslate::kFieldTypeFieldNumber;
#endif  // !_MSC_VER

CaffeGenDef_DataTranslate::CaffeGenDef_DataTranslate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDef_DataTranslate::InitAsDefaultInstance() {
}

CaffeGenDef_DataTranslate::CaffeGenDef_DataTranslate(const CaffeGenDef_DataTranslate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDef_DataTranslate::SharedCtor() {
  _cached_size_ = 0;
  translate_type_ = 1;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDef_DataTranslate::~CaffeGenDef_DataTranslate() {
  SharedDtor();
}

void CaffeGenDef_DataTranslate::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDef_DataTranslate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDef_DataTranslate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_DataTranslate_descriptor_;
}

const CaffeGenDef_DataTranslate& CaffeGenDef_DataTranslate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDef_2eproto();
  return *default_instance_;
}

CaffeGenDef_DataTranslate* CaffeGenDef_DataTranslate::default_instance_ = NULL;

CaffeGenDef_DataTranslate* CaffeGenDef_DataTranslate::New() const {
  return new CaffeGenDef_DataTranslate;
}

void CaffeGenDef_DataTranslate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    translate_type_ = 1;
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    if (has_match_name()) {
      if (match_name_ != &::google::protobuf::internal::kEmptyString) {
        match_name_->clear();
      }
    }
    field_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDef_DataTranslate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CaffeGenDef.DataTranslateType translate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_DataTranslateType_IsValid(value)) {
            set_translate_type(static_cast< ::CaffeGenDef_DataTranslateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_var_name;
        break;
      }

      // required string var_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_var_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match_name;
        break;
      }

      // required string match_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_name().data(), this->match_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_field_type;
        break;
      }

      // optional .CaffeGenDef.WordDataType field_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_WordDataType_IsValid(value)) {
            set_field_type(static_cast< ::CaffeGenDef_WordDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDef_DataTranslate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CaffeGenDef.DataTranslateType translate_type = 1;
  if (has_translate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->translate_type(), output);
  }

  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->var_name(), output);
  }

  // required string match_name = 4;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->match_name(), output);
  }

  // optional .CaffeGenDef.WordDataType field_type = 6;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->field_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDef_DataTranslate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CaffeGenDef.DataTranslateType translate_type = 1;
  if (has_translate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->translate_type(), target);
  }

  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var_name(), target);
  }

  // required string match_name = 4;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->match_name(), target);
  }

  // optional .CaffeGenDef.WordDataType field_type = 6;
  if (has_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->field_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDef_DataTranslate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CaffeGenDef.DataTranslateType translate_type = 1;
    if (has_translate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->translate_type());
    }

    // required string var_name = 2;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // required string match_name = 4;
    if (has_match_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_name());
    }

    // optional .CaffeGenDef.WordDataType field_type = 6;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDef_DataTranslate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDef_DataTranslate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDef_DataTranslate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDef_DataTranslate::MergeFrom(const CaffeGenDef_DataTranslate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translate_type()) {
      set_translate_type(from.translate_type());
    }
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_match_name()) {
      set_match_name(from.match_name());
    }
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDef_DataTranslate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDef_DataTranslate::CopyFrom(const CaffeGenDef_DataTranslate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDef_DataTranslate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CaffeGenDef_DataTranslate::Swap(CaffeGenDef_DataTranslate* other) {
  if (other != this) {
    std::swap(translate_type_, other->translate_type_);
    std::swap(var_name_, other->var_name_);
    std::swap(match_name_, other->match_name_);
    std::swap(field_type_, other->field_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDef_DataTranslate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDef_DataTranslate_descriptor_;
  metadata.reflection = CaffeGenDef_DataTranslate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenDef_NetValue::kBInputFieldNumber;
const int CaffeGenDef_NetValue::kVarNameFieldNumber;
const int CaffeGenDef_NetValue::kVarNameSrcFieldNumber;
const int CaffeGenDef_NetValue::kVetFieldNumber;
const int CaffeGenDef_NetValue::kVecTableNameFieldNumber;
const int CaffeGenDef_NetValue::kVarSrcIdxFieldNumber;
const int CaffeGenDef_NetValue::kVecTableIdxFieldNumber;
const int CaffeGenDef_NetValue::kBCanReplaceFieldNumber;
const int CaffeGenDef_NetValue::kMaxInstancesFieldNumber;
const int CaffeGenDef_NetValue::kReplaceProbFieldNumber;
#endif  // !_MSC_VER

CaffeGenDef_NetValue::CaffeGenDef_NetValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDef_NetValue::InitAsDefaultInstance() {
}

CaffeGenDef_NetValue::CaffeGenDef_NetValue(const CaffeGenDef_NetValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDef_NetValue::SharedCtor() {
  _cached_size_ = 0;
  b_input_ = false;
  var_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  var_name_src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vet_ = 1;
  vec_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  var_src_idx_ = 0;
  vec_table_idx_ = 0;
  b_can_replace_ = false;
  max_instances_ = 0;
  replace_prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDef_NetValue::~CaffeGenDef_NetValue() {
  SharedDtor();
}

void CaffeGenDef_NetValue::SharedDtor() {
  if (var_name_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_;
  }
  if (var_name_src_ != &::google::protobuf::internal::kEmptyString) {
    delete var_name_src_;
  }
  if (vec_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete vec_table_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDef_NetValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDef_NetValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_NetValue_descriptor_;
}

const CaffeGenDef_NetValue& CaffeGenDef_NetValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDef_2eproto();
  return *default_instance_;
}

CaffeGenDef_NetValue* CaffeGenDef_NetValue::default_instance_ = NULL;

CaffeGenDef_NetValue* CaffeGenDef_NetValue::New() const {
  return new CaffeGenDef_NetValue;
}

void CaffeGenDef_NetValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    b_input_ = false;
    if (has_var_name()) {
      if (var_name_ != &::google::protobuf::internal::kEmptyString) {
        var_name_->clear();
      }
    }
    if (has_var_name_src()) {
      if (var_name_src_ != &::google::protobuf::internal::kEmptyString) {
        var_name_src_->clear();
      }
    }
    vet_ = 1;
    if (has_vec_table_name()) {
      if (vec_table_name_ != &::google::protobuf::internal::kEmptyString) {
        vec_table_name_->clear();
      }
    }
    var_src_idx_ = 0;
    vec_table_idx_ = 0;
    b_can_replace_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_instances_ = 0;
    replace_prob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDef_NetValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool b_input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_input_)));
          set_has_b_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_var_name;
        break;
      }

      // required string var_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_var_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_var_name_src;
        break;
      }

      // required string var_name_src = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_var_name_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->var_name_src().data(), this->var_name_src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vet;
        break;
      }

      // required .CaffeGenDef.VarExtractType vet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_VarExtractType_IsValid(value)) {
            set_vet(static_cast< ::CaffeGenDef_VarExtractType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vec_table_name;
        break;
      }

      // required string vec_table_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vec_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vec_table_name().data(), this->vec_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_var_src_idx;
        break;
      }

      // optional int32 var_src_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var_src_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &var_src_idx_)));
          set_has_var_src_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vec_table_idx;
        break;
      }

      // optional int32 vec_table_idx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_table_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vec_table_idx_)));
          set_has_vec_table_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_b_can_replace;
        break;
      }

      // optional bool b_can_replace = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_can_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_can_replace_)));
          set_has_b_can_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_instances;
        break;
      }

      // optional int32 max_instances = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_instances_)));
          set_has_max_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_replace_prob;
        break;
      }

      // optional float replace_prob = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_replace_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replace_prob_)));
          set_has_replace_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDef_NetValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool b_input = 1;
  if (has_b_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->b_input(), output);
  }

  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->var_name(), output);
  }

  // required string var_name_src = 3;
  if (has_var_name_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name_src().data(), this->var_name_src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->var_name_src(), output);
  }

  // required .CaffeGenDef.VarExtractType vet = 4;
  if (has_vet()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->vet(), output);
  }

  // required string vec_table_name = 5;
  if (has_vec_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vec_table_name().data(), this->vec_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->vec_table_name(), output);
  }

  // optional int32 var_src_idx = 6;
  if (has_var_src_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->var_src_idx(), output);
  }

  // optional int32 vec_table_idx = 7;
  if (has_vec_table_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vec_table_idx(), output);
  }

  // optional bool b_can_replace = 8;
  if (has_b_can_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->b_can_replace(), output);
  }

  // optional int32 max_instances = 9;
  if (has_max_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_instances(), output);
  }

  // optional float replace_prob = 10;
  if (has_replace_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->replace_prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDef_NetValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool b_input = 1;
  if (has_b_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->b_input(), target);
  }

  // required string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var_name(), target);
  }

  // required string var_name_src = 3;
  if (has_var_name_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->var_name_src().data(), this->var_name_src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->var_name_src(), target);
  }

  // required .CaffeGenDef.VarExtractType vet = 4;
  if (has_vet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->vet(), target);
  }

  // required string vec_table_name = 5;
  if (has_vec_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vec_table_name().data(), this->vec_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vec_table_name(), target);
  }

  // optional int32 var_src_idx = 6;
  if (has_var_src_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->var_src_idx(), target);
  }

  // optional int32 vec_table_idx = 7;
  if (has_vec_table_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vec_table_idx(), target);
  }

  // optional bool b_can_replace = 8;
  if (has_b_can_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->b_can_replace(), target);
  }

  // optional int32 max_instances = 9;
  if (has_max_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_instances(), target);
  }

  // optional float replace_prob = 10;
  if (has_replace_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->replace_prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDef_NetValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool b_input = 1;
    if (has_b_input()) {
      total_size += 1 + 1;
    }

    // required string var_name = 2;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // required string var_name_src = 3;
    if (has_var_name_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name_src());
    }

    // required .CaffeGenDef.VarExtractType vet = 4;
    if (has_vet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vet());
    }

    // required string vec_table_name = 5;
    if (has_vec_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vec_table_name());
    }

    // optional int32 var_src_idx = 6;
    if (has_var_src_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->var_src_idx());
    }

    // optional int32 vec_table_idx = 7;
    if (has_vec_table_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vec_table_idx());
    }

    // optional bool b_can_replace = 8;
    if (has_b_can_replace()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_instances = 9;
    if (has_max_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_instances());
    }

    // optional float replace_prob = 10;
    if (has_replace_prob()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDef_NetValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDef_NetValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDef_NetValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDef_NetValue::MergeFrom(const CaffeGenDef_NetValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_b_input()) {
      set_b_input(from.b_input());
    }
    if (from.has_var_name()) {
      set_var_name(from.var_name());
    }
    if (from.has_var_name_src()) {
      set_var_name_src(from.var_name_src());
    }
    if (from.has_vet()) {
      set_vet(from.vet());
    }
    if (from.has_vec_table_name()) {
      set_vec_table_name(from.vec_table_name());
    }
    if (from.has_var_src_idx()) {
      set_var_src_idx(from.var_src_idx());
    }
    if (from.has_vec_table_idx()) {
      set_vec_table_idx(from.vec_table_idx());
    }
    if (from.has_b_can_replace()) {
      set_b_can_replace(from.b_can_replace());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_instances()) {
      set_max_instances(from.max_instances());
    }
    if (from.has_replace_prob()) {
      set_replace_prob(from.replace_prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDef_NetValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDef_NetValue::CopyFrom(const CaffeGenDef_NetValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDef_NetValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CaffeGenDef_NetValue::Swap(CaffeGenDef_NetValue* other) {
  if (other != this) {
    std::swap(b_input_, other->b_input_);
    std::swap(var_name_, other->var_name_);
    std::swap(var_name_src_, other->var_name_src_);
    std::swap(vet_, other->vet_);
    std::swap(vec_table_name_, other->vec_table_name_);
    std::swap(var_src_idx_, other->var_src_idx_);
    std::swap(vec_table_idx_, other->vec_table_idx_);
    std::swap(b_can_replace_, other->b_can_replace_);
    std::swap(max_instances_, other->max_instances_);
    std::swap(replace_prob_, other->replace_prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDef_NetValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDef_NetValue_descriptor_;
  metadata.reflection = CaffeGenDef_NetValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeGenDef::kNameFieldNumber;
const int CaffeGenDef::kNumSentenceRecsToSearchFieldNumber;
const int CaffeGenDef::kAccessFieldsFieldNumber;
const int CaffeGenDef::kDataFiltersFieldNumber;
const int CaffeGenDef::kDataTranslatesFieldNumber;
const int CaffeGenDef::kNetValuesFieldNumber;
const int CaffeGenDef::kFilesCoreDirFieldNumber;
const int CaffeGenDef::kTestListFileNameFieldNumber;
const int CaffeGenDef::kTrainListFileNameFieldNumber;
const int CaffeGenDef::kNetEndTypeFieldNumber;
const int CaffeGenDef::kProtoFileNameFieldNumber;
const int CaffeGenDef::kModelFileNameFieldNumber;
const int CaffeGenDef::kConfigFileNameFieldNumber;
const int CaffeGenDef::kNumAccuracyCandidatesFieldNumber;
const int CaffeGenDef::kNetgenOutputFileNameFieldNumber;
#endif  // !_MSC_VER

CaffeGenDef::CaffeGenDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeGenDef::InitAsDefaultInstance() {
}

CaffeGenDef::CaffeGenDef(const CaffeGenDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeGenDef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numsentencerecstosearch_ = 0;
  files_core_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  train_list_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_end_type_ = 1;
  proto_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_accuracy_candidates_ = 0;
  netgen_output_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeGenDef::~CaffeGenDef() {
  SharedDtor();
}

void CaffeGenDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (files_core_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete files_core_dir_;
  }
  if (test_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete test_list_file_name_;
  }
  if (train_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete train_list_file_name_;
  }
  if (proto_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_file_name_;
  }
  if (model_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_name_;
  }
  if (config_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete config_file_name_;
  }
  if (netgen_output_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete netgen_output_file_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeGenDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeGenDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeGenDef_descriptor_;
}

const CaffeGenDef& CaffeGenDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GenDef_2eproto();
  return *default_instance_;
}

CaffeGenDef* CaffeGenDef::default_instance_ = NULL;

CaffeGenDef* CaffeGenDef::New() const {
  return new CaffeGenDef;
}

void CaffeGenDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    numsentencerecstosearch_ = 0;
    if (has_files_core_dir()) {
      if (files_core_dir_ != &::google::protobuf::internal::kEmptyString) {
        files_core_dir_->clear();
      }
    }
    if (has_test_list_file_name()) {
      if (test_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
        test_list_file_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_train_list_file_name()) {
      if (train_list_file_name_ != &::google::protobuf::internal::kEmptyString) {
        train_list_file_name_->clear();
      }
    }
    net_end_type_ = 1;
    if (has_proto_file_name()) {
      if (proto_file_name_ != &::google::protobuf::internal::kEmptyString) {
        proto_file_name_->clear();
      }
    }
    if (has_model_file_name()) {
      if (model_file_name_ != &::google::protobuf::internal::kEmptyString) {
        model_file_name_->clear();
      }
    }
    if (has_config_file_name()) {
      if (config_file_name_ != &::google::protobuf::internal::kEmptyString) {
        config_file_name_->clear();
      }
    }
    num_accuracy_candidates_ = 0;
    if (has_netgen_output_file_name()) {
      if (netgen_output_file_name_ != &::google::protobuf::internal::kEmptyString) {
        netgen_output_file_name_->clear();
      }
    }
  }
  access_fields_.Clear();
  data_filters_.Clear();
  data_translates_.Clear();
  net_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeGenDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NumSentenceRecsToSearch;
        break;
      }

      // optional int32 NumSentenceRecsToSearch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NumSentenceRecsToSearch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numsentencerecstosearch_)));
          set_has_numsentencerecstosearch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_access_fields;
        break;
      }

      // repeated .CaffeGenDef.DataAccess access_fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_access_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_access_fields;
        if (input->ExpectTag(34)) goto parse_data_filters;
        break;
      }

      // repeated .CaffeGenDef.DataFilter data_filters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_filters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_filters;
        if (input->ExpectTag(42)) goto parse_data_translates;
        break;
      }

      // repeated .CaffeGenDef.DataTranslate data_translates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_translates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_translates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_translates;
        if (input->ExpectTag(50)) goto parse_net_values;
        break;
      }

      // repeated .CaffeGenDef.NetValue net_values = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_net_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_net_values;
        if (input->ExpectTag(66)) goto parse_files_core_dir;
        break;
      }

      // required string files_core_dir = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files_core_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_files_core_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->files_core_dir().data(), this->files_core_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_test_list_file_name;
        break;
      }

      // required string test_list_file_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_list_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_list_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_list_file_name().data(), this->test_list_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_train_list_file_name;
        break;
      }

      // required string train_list_file_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_list_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_list_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_list_file_name().data(), this->train_list_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_net_end_type;
        break;
      }

      // required .CaffeGenDef.NetEndType net_end_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_end_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeGenDef_NetEndType_IsValid(value)) {
            set_net_end_type(static_cast< ::CaffeGenDef_NetEndType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_proto_file_name;
        break;
      }

      // required string proto_file_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proto_file_name().data(), this->proto_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_model_file_name;
        break;
      }

      // required string model_file_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_file_name().data(), this->model_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_config_file_name;
        break;
      }

      // required string config_file_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config_file_name().data(), this->config_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_num_accuracy_candidates;
        break;
      }

      // optional int32 num_accuracy_candidates = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_accuracy_candidates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accuracy_candidates_)));
          set_has_num_accuracy_candidates();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_netgen_output_file_name;
        break;
      }

      // required string netgen_output_file_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netgen_output_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netgen_output_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netgen_output_file_name().data(), this->netgen_output_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeGenDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 NumSentenceRecsToSearch = 2;
  if (has_numsentencerecstosearch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numsentencerecstosearch(), output);
  }

  // repeated .CaffeGenDef.DataAccess access_fields = 3;
  for (int i = 0; i < this->access_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->access_fields(i), output);
  }

  // repeated .CaffeGenDef.DataFilter data_filters = 4;
  for (int i = 0; i < this->data_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_filters(i), output);
  }

  // repeated .CaffeGenDef.DataTranslate data_translates = 5;
  for (int i = 0; i < this->data_translates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_translates(i), output);
  }

  // repeated .CaffeGenDef.NetValue net_values = 6;
  for (int i = 0; i < this->net_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->net_values(i), output);
  }

  // required string files_core_dir = 8;
  if (has_files_core_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files_core_dir().data(), this->files_core_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->files_core_dir(), output);
  }

  // required string test_list_file_name = 9;
  if (has_test_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_list_file_name().data(), this->test_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->test_list_file_name(), output);
  }

  // required string train_list_file_name = 10;
  if (has_train_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_list_file_name().data(), this->train_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->train_list_file_name(), output);
  }

  // required .CaffeGenDef.NetEndType net_end_type = 11;
  if (has_net_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->net_end_type(), output);
  }

  // required string proto_file_name = 12;
  if (has_proto_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proto_file_name().data(), this->proto_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->proto_file_name(), output);
  }

  // required string model_file_name = 13;
  if (has_model_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->model_file_name(), output);
  }

  // required string config_file_name = 14;
  if (has_config_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_file_name().data(), this->config_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->config_file_name(), output);
  }

  // optional int32 num_accuracy_candidates = 15;
  if (has_num_accuracy_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->num_accuracy_candidates(), output);
  }

  // required string netgen_output_file_name = 18;
  if (has_netgen_output_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netgen_output_file_name().data(), this->netgen_output_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->netgen_output_file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeGenDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 NumSentenceRecsToSearch = 2;
  if (has_numsentencerecstosearch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numsentencerecstosearch(), target);
  }

  // repeated .CaffeGenDef.DataAccess access_fields = 3;
  for (int i = 0; i < this->access_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->access_fields(i), target);
  }

  // repeated .CaffeGenDef.DataFilter data_filters = 4;
  for (int i = 0; i < this->data_filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_filters(i), target);
  }

  // repeated .CaffeGenDef.DataTranslate data_translates = 5;
  for (int i = 0; i < this->data_translates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_translates(i), target);
  }

  // repeated .CaffeGenDef.NetValue net_values = 6;
  for (int i = 0; i < this->net_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->net_values(i), target);
  }

  // required string files_core_dir = 8;
  if (has_files_core_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files_core_dir().data(), this->files_core_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->files_core_dir(), target);
  }

  // required string test_list_file_name = 9;
  if (has_test_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_list_file_name().data(), this->test_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->test_list_file_name(), target);
  }

  // required string train_list_file_name = 10;
  if (has_train_list_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_list_file_name().data(), this->train_list_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->train_list_file_name(), target);
  }

  // required .CaffeGenDef.NetEndType net_end_type = 11;
  if (has_net_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->net_end_type(), target);
  }

  // required string proto_file_name = 12;
  if (has_proto_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proto_file_name().data(), this->proto_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->proto_file_name(), target);
  }

  // required string model_file_name = 13;
  if (has_model_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model_file_name(), target);
  }

  // required string config_file_name = 14;
  if (has_config_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_file_name().data(), this->config_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->config_file_name(), target);
  }

  // optional int32 num_accuracy_candidates = 15;
  if (has_num_accuracy_candidates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->num_accuracy_candidates(), target);
  }

  // required string netgen_output_file_name = 18;
  if (has_netgen_output_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netgen_output_file_name().data(), this->netgen_output_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->netgen_output_file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeGenDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 NumSentenceRecsToSearch = 2;
    if (has_numsentencerecstosearch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numsentencerecstosearch());
    }

    // required string files_core_dir = 8;
    if (has_files_core_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->files_core_dir());
    }

    // required string test_list_file_name = 9;
    if (has_test_list_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_list_file_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string train_list_file_name = 10;
    if (has_train_list_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_list_file_name());
    }

    // required .CaffeGenDef.NetEndType net_end_type = 11;
    if (has_net_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->net_end_type());
    }

    // required string proto_file_name = 12;
    if (has_proto_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file_name());
    }

    // required string model_file_name = 13;
    if (has_model_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_file_name());
    }

    // required string config_file_name = 14;
    if (has_config_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file_name());
    }

    // optional int32 num_accuracy_candidates = 15;
    if (has_num_accuracy_candidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_accuracy_candidates());
    }

    // required string netgen_output_file_name = 18;
    if (has_netgen_output_file_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netgen_output_file_name());
    }

  }
  // repeated .CaffeGenDef.DataAccess access_fields = 3;
  total_size += 1 * this->access_fields_size();
  for (int i = 0; i < this->access_fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->access_fields(i));
  }

  // repeated .CaffeGenDef.DataFilter data_filters = 4;
  total_size += 1 * this->data_filters_size();
  for (int i = 0; i < this->data_filters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_filters(i));
  }

  // repeated .CaffeGenDef.DataTranslate data_translates = 5;
  total_size += 1 * this->data_translates_size();
  for (int i = 0; i < this->data_translates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_translates(i));
  }

  // repeated .CaffeGenDef.NetValue net_values = 6;
  total_size += 1 * this->net_values_size();
  for (int i = 0; i < this->net_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->net_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeGenDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeGenDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeGenDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeGenDef::MergeFrom(const CaffeGenDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  access_fields_.MergeFrom(from.access_fields_);
  data_filters_.MergeFrom(from.data_filters_);
  data_translates_.MergeFrom(from.data_translates_);
  net_values_.MergeFrom(from.net_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_numsentencerecstosearch()) {
      set_numsentencerecstosearch(from.numsentencerecstosearch());
    }
    if (from.has_files_core_dir()) {
      set_files_core_dir(from.files_core_dir());
    }
    if (from.has_test_list_file_name()) {
      set_test_list_file_name(from.test_list_file_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_train_list_file_name()) {
      set_train_list_file_name(from.train_list_file_name());
    }
    if (from.has_net_end_type()) {
      set_net_end_type(from.net_end_type());
    }
    if (from.has_proto_file_name()) {
      set_proto_file_name(from.proto_file_name());
    }
    if (from.has_model_file_name()) {
      set_model_file_name(from.model_file_name());
    }
    if (from.has_config_file_name()) {
      set_config_file_name(from.config_file_name());
    }
    if (from.has_num_accuracy_candidates()) {
      set_num_accuracy_candidates(from.num_accuracy_candidates());
    }
    if (from.has_netgen_output_file_name()) {
      set_netgen_output_file_name(from.netgen_output_file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeGenDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeGenDef::CopyFrom(const CaffeGenDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeGenDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00005fc1) != 0x00005fc1) return false;

  for (int i = 0; i < access_fields_size(); i++) {
    if (!this->access_fields(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_filters_size(); i++) {
    if (!this->data_filters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_translates_size(); i++) {
    if (!this->data_translates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < net_values_size(); i++) {
    if (!this->net_values(i).IsInitialized()) return false;
  }
  return true;
}

void CaffeGenDef::Swap(CaffeGenDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(numsentencerecstosearch_, other->numsentencerecstosearch_);
    access_fields_.Swap(&other->access_fields_);
    data_filters_.Swap(&other->data_filters_);
    data_translates_.Swap(&other->data_translates_);
    net_values_.Swap(&other->net_values_);
    std::swap(files_core_dir_, other->files_core_dir_);
    std::swap(test_list_file_name_, other->test_list_file_name_);
    std::swap(train_list_file_name_, other->train_list_file_name_);
    std::swap(net_end_type_, other->net_end_type_);
    std::swap(proto_file_name_, other->proto_file_name_);
    std::swap(model_file_name_, other->model_file_name_);
    std::swap(config_file_name_, other->config_file_name_);
    std::swap(num_accuracy_candidates_, other->num_accuracy_candidates_);
    std::swap(netgen_output_file_name_, other->netgen_output_file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeGenDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeGenDef_descriptor_;
  metadata.reflection = CaffeGenDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
