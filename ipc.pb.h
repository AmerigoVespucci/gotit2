// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

#ifndef PROTOBUF_ipc_2eproto__INCLUDED
#define PROTOBUF_ipc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ipc_2eproto();
void protobuf_AssignDesc_ipc_2eproto();
void protobuf_ShutdownFile_ipc_2eproto();

class CaffeIpc;
class CaffeIpc_InitNetParams;
class CaffeIpc_DataParam;

enum CaffeIpc_MsgType {
  CaffeIpc_MsgType_INIT_NET = 1,
  CaffeIpc_MsgType_INIT_NET_DONE = 2,
  CaffeIpc_MsgType_NET_PREDICT = 3,
  CaffeIpc_MsgType_PREDICT_RESULT = 4,
  CaffeIpc_MsgType_END_NET = 5
};
bool CaffeIpc_MsgType_IsValid(int value);
const CaffeIpc_MsgType CaffeIpc_MsgType_MsgType_MIN = CaffeIpc_MsgType_INIT_NET;
const CaffeIpc_MsgType CaffeIpc_MsgType_MsgType_MAX = CaffeIpc_MsgType_END_NET;
const int CaffeIpc_MsgType_MsgType_ARRAYSIZE = CaffeIpc_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaffeIpc_MsgType_descriptor();
inline const ::std::string& CaffeIpc_MsgType_Name(CaffeIpc_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaffeIpc_MsgType_descriptor(), value);
}
inline bool CaffeIpc_MsgType_Parse(
    const ::std::string& name, CaffeIpc_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaffeIpc_MsgType>(
    CaffeIpc_MsgType_descriptor(), name, value);
}
// ===================================================================

class CaffeIpc_InitNetParams : public ::google::protobuf::Message {
 public:
  CaffeIpc_InitNetParams();
  virtual ~CaffeIpc_InitNetParams();

  CaffeIpc_InitNetParams(const CaffeIpc_InitNetParams& from);

  inline CaffeIpc_InitNetParams& operator=(const CaffeIpc_InitNetParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeIpc_InitNetParams& default_instance();

  void Swap(CaffeIpc_InitNetParams* other);

  // implements Message ----------------------------------------------

  CaffeIpc_InitNetParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeIpc_InitNetParams& from);
  void MergeFrom(const CaffeIpc_InitNetParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string model_file = 1;
  inline bool has_model_file() const;
  inline void clear_model_file();
  static const int kModelFileFieldNumber = 1;
  inline const ::std::string& model_file() const;
  inline void set_model_file(const ::std::string& value);
  inline void set_model_file(const char* value);
  inline void set_model_file(const char* value, size_t size);
  inline ::std::string* mutable_model_file();
  inline ::std::string* release_model_file();
  inline void set_allocated_model_file(::std::string* model_file);

  // required string trained_file = 2;
  inline bool has_trained_file() const;
  inline void clear_trained_file();
  static const int kTrainedFileFieldNumber = 2;
  inline const ::std::string& trained_file() const;
  inline void set_trained_file(const ::std::string& value);
  inline void set_trained_file(const char* value);
  inline void set_trained_file(const char* value, size_t size);
  inline ::std::string* mutable_trained_file();
  inline ::std::string* release_trained_file();
  inline void set_allocated_trained_file(::std::string* trained_file);

  // required string input_layer_name = 3;
  inline bool has_input_layer_name() const;
  inline void clear_input_layer_name();
  static const int kInputLayerNameFieldNumber = 3;
  inline const ::std::string& input_layer_name() const;
  inline void set_input_layer_name(const ::std::string& value);
  inline void set_input_layer_name(const char* value);
  inline void set_input_layer_name(const char* value, size_t size);
  inline ::std::string* mutable_input_layer_name();
  inline ::std::string* release_input_layer_name();
  inline void set_allocated_input_layer_name(::std::string* input_layer_name);

  // required int32 input_layer_bottom_idx = 4;
  inline bool has_input_layer_bottom_idx() const;
  inline void clear_input_layer_bottom_idx();
  static const int kInputLayerBottomIdxFieldNumber = 4;
  inline ::google::protobuf::int32 input_layer_bottom_idx() const;
  inline void set_input_layer_bottom_idx(::google::protobuf::int32 value);

  // required string output_layer_name = 5;
  inline bool has_output_layer_name() const;
  inline void clear_output_layer_name();
  static const int kOutputLayerNameFieldNumber = 5;
  inline const ::std::string& output_layer_name() const;
  inline void set_output_layer_name(const ::std::string& value);
  inline void set_output_layer_name(const char* value);
  inline void set_output_layer_name(const char* value, size_t size);
  inline ::std::string* mutable_output_layer_name();
  inline ::std::string* release_output_layer_name();
  inline void set_allocated_output_layer_name(::std::string* output_layer_name);

  // required int32 output_layer_top_idx = 6;
  inline bool has_output_layer_top_idx() const;
  inline void clear_output_layer_top_idx();
  static const int kOutputLayerTopIdxFieldNumber = 6;
  inline ::google::protobuf::int32 output_layer_top_idx() const;
  inline void set_output_layer_top_idx(::google::protobuf::int32 value);

  // required int32 input_num_channels_idx = 7;
  inline bool has_input_num_channels_idx() const;
  inline void clear_input_num_channels_idx();
  static const int kInputNumChannelsIdxFieldNumber = 7;
  inline ::google::protobuf::int32 input_num_channels_idx() const;
  inline void set_input_num_channels_idx(::google::protobuf::int32 value);

  // required int32 input_height_idx = 8;
  inline bool has_input_height_idx() const;
  inline void clear_input_height_idx();
  static const int kInputHeightIdxFieldNumber = 8;
  inline ::google::protobuf::int32 input_height_idx() const;
  inline void set_input_height_idx(::google::protobuf::int32 value);

  // required int32 input_width_idx = 9;
  inline bool has_input_width_idx() const;
  inline void clear_input_width_idx();
  static const int kInputWidthIdxFieldNumber = 9;
  inline ::google::protobuf::int32 input_width_idx() const;
  inline void set_input_width_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CaffeIpc.InitNetParams)
 private:
  inline void set_has_model_file();
  inline void clear_has_model_file();
  inline void set_has_trained_file();
  inline void clear_has_trained_file();
  inline void set_has_input_layer_name();
  inline void clear_has_input_layer_name();
  inline void set_has_input_layer_bottom_idx();
  inline void clear_has_input_layer_bottom_idx();
  inline void set_has_output_layer_name();
  inline void clear_has_output_layer_name();
  inline void set_has_output_layer_top_idx();
  inline void clear_has_output_layer_top_idx();
  inline void set_has_input_num_channels_idx();
  inline void clear_has_input_num_channels_idx();
  inline void set_has_input_height_idx();
  inline void clear_has_input_height_idx();
  inline void set_has_input_width_idx();
  inline void clear_has_input_width_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_file_;
  ::std::string* trained_file_;
  ::std::string* input_layer_name_;
  ::std::string* output_layer_name_;
  ::google::protobuf::int32 input_layer_bottom_idx_;
  ::google::protobuf::int32 output_layer_top_idx_;
  ::google::protobuf::int32 input_num_channels_idx_;
  ::google::protobuf::int32 input_height_idx_;
  ::google::protobuf::int32 input_width_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static CaffeIpc_InitNetParams* default_instance_;
};
// -------------------------------------------------------------------

class CaffeIpc_DataParam : public ::google::protobuf::Message {
 public:
  CaffeIpc_DataParam();
  virtual ~CaffeIpc_DataParam();

  CaffeIpc_DataParam(const CaffeIpc_DataParam& from);

  inline CaffeIpc_DataParam& operator=(const CaffeIpc_DataParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeIpc_DataParam& default_instance();

  void Swap(CaffeIpc_DataParam* other);

  // implements Message ----------------------------------------------

  CaffeIpc_DataParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeIpc_DataParam& from);
  void MergeFrom(const CaffeIpc_DataParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num_params = 1;
  inline bool has_num_params() const;
  inline void clear_num_params();
  static const int kNumParamsFieldNumber = 1;
  inline ::google::protobuf::int32 num_params() const;
  inline void set_num_params(::google::protobuf::int32 value);

  // repeated float data_val = 2;
  inline int data_val_size() const;
  inline void clear_data_val();
  static const int kDataValFieldNumber = 2;
  inline float data_val(int index) const;
  inline void set_data_val(int index, float value);
  inline void add_data_val(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data_val() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data_val();

  // @@protoc_insertion_point(class_scope:CaffeIpc.DataParam)
 private:
  inline void set_has_num_params();
  inline void clear_has_num_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > data_val_;
  ::google::protobuf::int32 num_params_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static CaffeIpc_DataParam* default_instance_;
};
// -------------------------------------------------------------------

class CaffeIpc : public ::google::protobuf::Message {
 public:
  CaffeIpc();
  virtual ~CaffeIpc();

  CaffeIpc(const CaffeIpc& from);

  inline CaffeIpc& operator=(const CaffeIpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeIpc& default_instance();

  void Swap(CaffeIpc* other);

  // implements Message ----------------------------------------------

  CaffeIpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaffeIpc& from);
  void MergeFrom(const CaffeIpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CaffeIpc_InitNetParams InitNetParams;
  typedef CaffeIpc_DataParam DataParam;

  typedef CaffeIpc_MsgType MsgType;
  static const MsgType INIT_NET = CaffeIpc_MsgType_INIT_NET;
  static const MsgType INIT_NET_DONE = CaffeIpc_MsgType_INIT_NET_DONE;
  static const MsgType NET_PREDICT = CaffeIpc_MsgType_NET_PREDICT;
  static const MsgType PREDICT_RESULT = CaffeIpc_MsgType_PREDICT_RESULT;
  static const MsgType END_NET = CaffeIpc_MsgType_END_NET;
  static inline bool MsgType_IsValid(int value) {
    return CaffeIpc_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    CaffeIpc_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    CaffeIpc_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    CaffeIpc_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return CaffeIpc_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return CaffeIpc_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return CaffeIpc_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .CaffeIpc.MsgType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::CaffeIpc_MsgType type() const;
  inline void set_type(::CaffeIpc_MsgType value);

  // optional .CaffeIpc.InitNetParams init_net_params = 2;
  inline bool has_init_net_params() const;
  inline void clear_init_net_params();
  static const int kInitNetParamsFieldNumber = 2;
  inline const ::CaffeIpc_InitNetParams& init_net_params() const;
  inline ::CaffeIpc_InitNetParams* mutable_init_net_params();
  inline ::CaffeIpc_InitNetParams* release_init_net_params();
  inline void set_allocated_init_net_params(::CaffeIpc_InitNetParams* init_net_params);

  // optional bool init_net_done = 3;
  inline bool has_init_net_done() const;
  inline void clear_init_net_done();
  static const int kInitNetDoneFieldNumber = 3;
  inline bool init_net_done() const;
  inline void set_init_net_done(bool value);

  // optional .CaffeIpc.DataParam data_param = 4;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 4;
  inline const ::CaffeIpc_DataParam& data_param() const;
  inline ::CaffeIpc_DataParam* mutable_data_param();
  inline ::CaffeIpc_DataParam* release_data_param();
  inline void set_allocated_data_param(::CaffeIpc_DataParam* data_param);

  // @@protoc_insertion_point(class_scope:CaffeIpc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_init_net_params();
  inline void clear_has_init_net_params();
  inline void set_has_init_net_done();
  inline void clear_has_init_net_done();
  inline void set_has_data_param();
  inline void clear_has_data_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CaffeIpc_InitNetParams* init_net_params_;
  int type_;
  bool init_net_done_;
  ::CaffeIpc_DataParam* data_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static CaffeIpc* default_instance_;
};
// ===================================================================


// ===================================================================

// CaffeIpc_InitNetParams

// required string model_file = 1;
inline bool CaffeIpc_InitNetParams::has_model_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_model_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeIpc_InitNetParams::clear_has_model_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeIpc_InitNetParams::clear_model_file() {
  if (model_file_ != &::google::protobuf::internal::kEmptyString) {
    model_file_->clear();
  }
  clear_has_model_file();
}
inline const ::std::string& CaffeIpc_InitNetParams::model_file() const {
  return *model_file_;
}
inline void CaffeIpc_InitNetParams::set_model_file(const ::std::string& value) {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::kEmptyString) {
    model_file_ = new ::std::string;
  }
  model_file_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_model_file(const char* value) {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::kEmptyString) {
    model_file_ = new ::std::string;
  }
  model_file_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_model_file(const char* value, size_t size) {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::kEmptyString) {
    model_file_ = new ::std::string;
  }
  model_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeIpc_InitNetParams::mutable_model_file() {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::kEmptyString) {
    model_file_ = new ::std::string;
  }
  return model_file_;
}
inline ::std::string* CaffeIpc_InitNetParams::release_model_file() {
  clear_has_model_file();
  if (model_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_file_;
    model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeIpc_InitNetParams::set_allocated_model_file(::std::string* model_file) {
  if (model_file_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_;
  }
  if (model_file) {
    set_has_model_file();
    model_file_ = model_file;
  } else {
    clear_has_model_file();
    model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string trained_file = 2;
inline bool CaffeIpc_InitNetParams::has_trained_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_trained_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeIpc_InitNetParams::clear_has_trained_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeIpc_InitNetParams::clear_trained_file() {
  if (trained_file_ != &::google::protobuf::internal::kEmptyString) {
    trained_file_->clear();
  }
  clear_has_trained_file();
}
inline const ::std::string& CaffeIpc_InitNetParams::trained_file() const {
  return *trained_file_;
}
inline void CaffeIpc_InitNetParams::set_trained_file(const ::std::string& value) {
  set_has_trained_file();
  if (trained_file_ == &::google::protobuf::internal::kEmptyString) {
    trained_file_ = new ::std::string;
  }
  trained_file_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_trained_file(const char* value) {
  set_has_trained_file();
  if (trained_file_ == &::google::protobuf::internal::kEmptyString) {
    trained_file_ = new ::std::string;
  }
  trained_file_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_trained_file(const char* value, size_t size) {
  set_has_trained_file();
  if (trained_file_ == &::google::protobuf::internal::kEmptyString) {
    trained_file_ = new ::std::string;
  }
  trained_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeIpc_InitNetParams::mutable_trained_file() {
  set_has_trained_file();
  if (trained_file_ == &::google::protobuf::internal::kEmptyString) {
    trained_file_ = new ::std::string;
  }
  return trained_file_;
}
inline ::std::string* CaffeIpc_InitNetParams::release_trained_file() {
  clear_has_trained_file();
  if (trained_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trained_file_;
    trained_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeIpc_InitNetParams::set_allocated_trained_file(::std::string* trained_file) {
  if (trained_file_ != &::google::protobuf::internal::kEmptyString) {
    delete trained_file_;
  }
  if (trained_file) {
    set_has_trained_file();
    trained_file_ = trained_file;
  } else {
    clear_has_trained_file();
    trained_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string input_layer_name = 3;
inline bool CaffeIpc_InitNetParams::has_input_layer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_input_layer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaffeIpc_InitNetParams::clear_has_input_layer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaffeIpc_InitNetParams::clear_input_layer_name() {
  if (input_layer_name_ != &::google::protobuf::internal::kEmptyString) {
    input_layer_name_->clear();
  }
  clear_has_input_layer_name();
}
inline const ::std::string& CaffeIpc_InitNetParams::input_layer_name() const {
  return *input_layer_name_;
}
inline void CaffeIpc_InitNetParams::set_input_layer_name(const ::std::string& value) {
  set_has_input_layer_name();
  if (input_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    input_layer_name_ = new ::std::string;
  }
  input_layer_name_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_input_layer_name(const char* value) {
  set_has_input_layer_name();
  if (input_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    input_layer_name_ = new ::std::string;
  }
  input_layer_name_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_input_layer_name(const char* value, size_t size) {
  set_has_input_layer_name();
  if (input_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    input_layer_name_ = new ::std::string;
  }
  input_layer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeIpc_InitNetParams::mutable_input_layer_name() {
  set_has_input_layer_name();
  if (input_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    input_layer_name_ = new ::std::string;
  }
  return input_layer_name_;
}
inline ::std::string* CaffeIpc_InitNetParams::release_input_layer_name() {
  clear_has_input_layer_name();
  if (input_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_layer_name_;
    input_layer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeIpc_InitNetParams::set_allocated_input_layer_name(::std::string* input_layer_name) {
  if (input_layer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete input_layer_name_;
  }
  if (input_layer_name) {
    set_has_input_layer_name();
    input_layer_name_ = input_layer_name;
  } else {
    clear_has_input_layer_name();
    input_layer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 input_layer_bottom_idx = 4;
inline bool CaffeIpc_InitNetParams::has_input_layer_bottom_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_input_layer_bottom_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeIpc_InitNetParams::clear_has_input_layer_bottom_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeIpc_InitNetParams::clear_input_layer_bottom_idx() {
  input_layer_bottom_idx_ = 0;
  clear_has_input_layer_bottom_idx();
}
inline ::google::protobuf::int32 CaffeIpc_InitNetParams::input_layer_bottom_idx() const {
  return input_layer_bottom_idx_;
}
inline void CaffeIpc_InitNetParams::set_input_layer_bottom_idx(::google::protobuf::int32 value) {
  set_has_input_layer_bottom_idx();
  input_layer_bottom_idx_ = value;
}

// required string output_layer_name = 5;
inline bool CaffeIpc_InitNetParams::has_output_layer_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_output_layer_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CaffeIpc_InitNetParams::clear_has_output_layer_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CaffeIpc_InitNetParams::clear_output_layer_name() {
  if (output_layer_name_ != &::google::protobuf::internal::kEmptyString) {
    output_layer_name_->clear();
  }
  clear_has_output_layer_name();
}
inline const ::std::string& CaffeIpc_InitNetParams::output_layer_name() const {
  return *output_layer_name_;
}
inline void CaffeIpc_InitNetParams::set_output_layer_name(const ::std::string& value) {
  set_has_output_layer_name();
  if (output_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    output_layer_name_ = new ::std::string;
  }
  output_layer_name_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_output_layer_name(const char* value) {
  set_has_output_layer_name();
  if (output_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    output_layer_name_ = new ::std::string;
  }
  output_layer_name_->assign(value);
}
inline void CaffeIpc_InitNetParams::set_output_layer_name(const char* value, size_t size) {
  set_has_output_layer_name();
  if (output_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    output_layer_name_ = new ::std::string;
  }
  output_layer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CaffeIpc_InitNetParams::mutable_output_layer_name() {
  set_has_output_layer_name();
  if (output_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    output_layer_name_ = new ::std::string;
  }
  return output_layer_name_;
}
inline ::std::string* CaffeIpc_InitNetParams::release_output_layer_name() {
  clear_has_output_layer_name();
  if (output_layer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_layer_name_;
    output_layer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CaffeIpc_InitNetParams::set_allocated_output_layer_name(::std::string* output_layer_name) {
  if (output_layer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete output_layer_name_;
  }
  if (output_layer_name) {
    set_has_output_layer_name();
    output_layer_name_ = output_layer_name;
  } else {
    clear_has_output_layer_name();
    output_layer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 output_layer_top_idx = 6;
inline bool CaffeIpc_InitNetParams::has_output_layer_top_idx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_output_layer_top_idx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CaffeIpc_InitNetParams::clear_has_output_layer_top_idx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CaffeIpc_InitNetParams::clear_output_layer_top_idx() {
  output_layer_top_idx_ = 0;
  clear_has_output_layer_top_idx();
}
inline ::google::protobuf::int32 CaffeIpc_InitNetParams::output_layer_top_idx() const {
  return output_layer_top_idx_;
}
inline void CaffeIpc_InitNetParams::set_output_layer_top_idx(::google::protobuf::int32 value) {
  set_has_output_layer_top_idx();
  output_layer_top_idx_ = value;
}

// required int32 input_num_channels_idx = 7;
inline bool CaffeIpc_InitNetParams::has_input_num_channels_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_input_num_channels_idx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CaffeIpc_InitNetParams::clear_has_input_num_channels_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CaffeIpc_InitNetParams::clear_input_num_channels_idx() {
  input_num_channels_idx_ = 0;
  clear_has_input_num_channels_idx();
}
inline ::google::protobuf::int32 CaffeIpc_InitNetParams::input_num_channels_idx() const {
  return input_num_channels_idx_;
}
inline void CaffeIpc_InitNetParams::set_input_num_channels_idx(::google::protobuf::int32 value) {
  set_has_input_num_channels_idx();
  input_num_channels_idx_ = value;
}

// required int32 input_height_idx = 8;
inline bool CaffeIpc_InitNetParams::has_input_height_idx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_input_height_idx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CaffeIpc_InitNetParams::clear_has_input_height_idx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CaffeIpc_InitNetParams::clear_input_height_idx() {
  input_height_idx_ = 0;
  clear_has_input_height_idx();
}
inline ::google::protobuf::int32 CaffeIpc_InitNetParams::input_height_idx() const {
  return input_height_idx_;
}
inline void CaffeIpc_InitNetParams::set_input_height_idx(::google::protobuf::int32 value) {
  set_has_input_height_idx();
  input_height_idx_ = value;
}

// required int32 input_width_idx = 9;
inline bool CaffeIpc_InitNetParams::has_input_width_idx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CaffeIpc_InitNetParams::set_has_input_width_idx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CaffeIpc_InitNetParams::clear_has_input_width_idx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CaffeIpc_InitNetParams::clear_input_width_idx() {
  input_width_idx_ = 0;
  clear_has_input_width_idx();
}
inline ::google::protobuf::int32 CaffeIpc_InitNetParams::input_width_idx() const {
  return input_width_idx_;
}
inline void CaffeIpc_InitNetParams::set_input_width_idx(::google::protobuf::int32 value) {
  set_has_input_width_idx();
  input_width_idx_ = value;
}

// -------------------------------------------------------------------

// CaffeIpc_DataParam

// required int32 num_params = 1;
inline bool CaffeIpc_DataParam::has_num_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeIpc_DataParam::set_has_num_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeIpc_DataParam::clear_has_num_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeIpc_DataParam::clear_num_params() {
  num_params_ = 0;
  clear_has_num_params();
}
inline ::google::protobuf::int32 CaffeIpc_DataParam::num_params() const {
  return num_params_;
}
inline void CaffeIpc_DataParam::set_num_params(::google::protobuf::int32 value) {
  set_has_num_params();
  num_params_ = value;
}

// repeated float data_val = 2;
inline int CaffeIpc_DataParam::data_val_size() const {
  return data_val_.size();
}
inline void CaffeIpc_DataParam::clear_data_val() {
  data_val_.Clear();
}
inline float CaffeIpc_DataParam::data_val(int index) const {
  return data_val_.Get(index);
}
inline void CaffeIpc_DataParam::set_data_val(int index, float value) {
  data_val_.Set(index, value);
}
inline void CaffeIpc_DataParam::add_data_val(float value) {
  data_val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
CaffeIpc_DataParam::data_val() const {
  return data_val_;
}
inline ::google::protobuf::RepeatedField< float >*
CaffeIpc_DataParam::mutable_data_val() {
  return &data_val_;
}

// -------------------------------------------------------------------

// CaffeIpc

// required .CaffeIpc.MsgType type = 1;
inline bool CaffeIpc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaffeIpc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaffeIpc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaffeIpc::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::CaffeIpc_MsgType CaffeIpc::type() const {
  return static_cast< ::CaffeIpc_MsgType >(type_);
}
inline void CaffeIpc::set_type(::CaffeIpc_MsgType value) {
  assert(::CaffeIpc_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .CaffeIpc.InitNetParams init_net_params = 2;
inline bool CaffeIpc::has_init_net_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaffeIpc::set_has_init_net_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaffeIpc::clear_has_init_net_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaffeIpc::clear_init_net_params() {
  if (init_net_params_ != NULL) init_net_params_->::CaffeIpc_InitNetParams::Clear();
  clear_has_init_net_params();
}
inline const ::CaffeIpc_InitNetParams& CaffeIpc::init_net_params() const {
  return init_net_params_ != NULL ? *init_net_params_ : *default_instance_->init_net_params_;
}
inline ::CaffeIpc_InitNetParams* CaffeIpc::mutable_init_net_params() {
  set_has_init_net_params();
  if (init_net_params_ == NULL) init_net_params_ = new ::CaffeIpc_InitNetParams;
  return init_net_params_;
}
inline ::CaffeIpc_InitNetParams* CaffeIpc::release_init_net_params() {
  clear_has_init_net_params();
  ::CaffeIpc_InitNetParams* temp = init_net_params_;
  init_net_params_ = NULL;
  return temp;
}
inline void CaffeIpc::set_allocated_init_net_params(::CaffeIpc_InitNetParams* init_net_params) {
  delete init_net_params_;
  init_net_params_ = init_net_params;
  if (init_net_params) {
    set_has_init_net_params();
  } else {
    clear_has_init_net_params();
  }
}

// optional bool init_net_done = 3;
inline bool CaffeIpc::has_init_net_done() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaffeIpc::set_has_init_net_done() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaffeIpc::clear_has_init_net_done() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaffeIpc::clear_init_net_done() {
  init_net_done_ = false;
  clear_has_init_net_done();
}
inline bool CaffeIpc::init_net_done() const {
  return init_net_done_;
}
inline void CaffeIpc::set_init_net_done(bool value) {
  set_has_init_net_done();
  init_net_done_ = value;
}

// optional .CaffeIpc.DataParam data_param = 4;
inline bool CaffeIpc::has_data_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CaffeIpc::set_has_data_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CaffeIpc::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CaffeIpc::clear_data_param() {
  if (data_param_ != NULL) data_param_->::CaffeIpc_DataParam::Clear();
  clear_has_data_param();
}
inline const ::CaffeIpc_DataParam& CaffeIpc::data_param() const {
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::CaffeIpc_DataParam* CaffeIpc::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::CaffeIpc_DataParam;
  return data_param_;
}
inline ::CaffeIpc_DataParam* CaffeIpc::release_data_param() {
  clear_has_data_param();
  ::CaffeIpc_DataParam* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void CaffeIpc::set_allocated_data_param(::CaffeIpc_DataParam* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CaffeIpc_MsgType>() {
  return ::CaffeIpc_MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipc_2eproto__INCLUDED
