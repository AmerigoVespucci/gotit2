// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CaffeIpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeIpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeIpc_InitNetParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeIpc_InitNetParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeIpc_DataParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeIpc_DataParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CaffeIpc_MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_2eproto() {
  protobuf_AddDesc_ipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc.proto");
  GOOGLE_CHECK(file != NULL);
  CaffeIpc_descriptor_ = file->message_type(0);
  static const int CaffeIpc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc, init_net_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc, init_net_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc, data_param_),
  };
  CaffeIpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeIpc_descriptor_,
      CaffeIpc::default_instance_,
      CaffeIpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeIpc));
  CaffeIpc_InitNetParams_descriptor_ = CaffeIpc_descriptor_->nested_type(0);
  static const int CaffeIpc_InitNetParams_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, model_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, trained_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, input_layer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, input_layer_bottom_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, output_layer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, output_layer_top_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, input_num_channels_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, input_height_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, input_width_idx_),
  };
  CaffeIpc_InitNetParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeIpc_InitNetParams_descriptor_,
      CaffeIpc_InitNetParams::default_instance_,
      CaffeIpc_InitNetParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_InitNetParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeIpc_InitNetParams));
  CaffeIpc_DataParam_descriptor_ = CaffeIpc_descriptor_->nested_type(1);
  static const int CaffeIpc_DataParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_DataParam, num_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_DataParam, data_val_),
  };
  CaffeIpc_DataParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeIpc_DataParam_descriptor_,
      CaffeIpc_DataParam::default_instance_,
      CaffeIpc_DataParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_DataParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeIpc_DataParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeIpc_DataParam));
  CaffeIpc_MsgType_descriptor_ = CaffeIpc_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeIpc_descriptor_, &CaffeIpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeIpc_InitNetParams_descriptor_, &CaffeIpc_InitNetParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeIpc_DataParam_descriptor_, &CaffeIpc_DataParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_2eproto() {
  delete CaffeIpc::default_instance_;
  delete CaffeIpc_reflection_;
  delete CaffeIpc_InitNetParams::default_instance_;
  delete CaffeIpc_InitNetParams_reflection_;
  delete CaffeIpc_DataParam::default_instance_;
  delete CaffeIpc_DataParam_reflection_;
}

void protobuf_AddDesc_ipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tipc.proto\"\260\004\n\010CaffeIpc\022\037\n\004type\030\001 \002(\0162\021"
    ".CaffeIpc.MsgType\0220\n\017init_net_params\030\002 \001"
    "(\0132\027.CaffeIpc.InitNetParams\022\025\n\rinit_net_"
    "done\030\003 \001(\010\022\'\n\ndata_param\030\004 \001(\0132\023.CaffeIp"
    "c.DataParam\032\377\001\n\rInitNetParams\022\022\n\nmodel_f"
    "ile\030\001 \002(\t\022\024\n\014trained_file\030\002 \002(\t\022\030\n\020input"
    "_layer_name\030\003 \002(\t\022\036\n\026input_layer_bottom_"
    "idx\030\004 \002(\005\022\031\n\021output_layer_name\030\005 \002(\t\022\034\n\024"
    "output_layer_top_idx\030\006 \002(\005\022\036\n\026input_num_"
    "channels_idx\030\007 \002(\005\022\030\n\020input_height_idx\030\010"
    " \002(\005\022\027\n\017input_width_idx\030\t \002(\005\0321\n\tDataPar"
    "am\022\022\n\nnum_params\030\001 \002(\005\022\020\n\010data_val\030\002 \003(\002"
    "\"\\\n\007MsgType\022\014\n\010INIT_NET\020\001\022\021\n\rINIT_NET_DO"
    "NE\020\002\022\017\n\013NET_PREDICT\020\003\022\022\n\016PREDICT_RESULT\020"
    "\004\022\013\n\007END_NET\020\005", 574);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc.proto", &protobuf_RegisterTypes);
  CaffeIpc::default_instance_ = new CaffeIpc();
  CaffeIpc_InitNetParams::default_instance_ = new CaffeIpc_InitNetParams();
  CaffeIpc_DataParam::default_instance_ = new CaffeIpc_DataParam();
  CaffeIpc::default_instance_->InitAsDefaultInstance();
  CaffeIpc_InitNetParams::default_instance_->InitAsDefaultInstance();
  CaffeIpc_DataParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_2eproto {
  StaticDescriptorInitializer_ipc_2eproto() {
    protobuf_AddDesc_ipc_2eproto();
  }
} static_descriptor_initializer_ipc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CaffeIpc_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeIpc_MsgType_descriptor_;
}
bool CaffeIpc_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CaffeIpc_MsgType CaffeIpc::INIT_NET;
const CaffeIpc_MsgType CaffeIpc::INIT_NET_DONE;
const CaffeIpc_MsgType CaffeIpc::NET_PREDICT;
const CaffeIpc_MsgType CaffeIpc::PREDICT_RESULT;
const CaffeIpc_MsgType CaffeIpc::END_NET;
const CaffeIpc_MsgType CaffeIpc::MsgType_MIN;
const CaffeIpc_MsgType CaffeIpc::MsgType_MAX;
const int CaffeIpc::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CaffeIpc_InitNetParams::kModelFileFieldNumber;
const int CaffeIpc_InitNetParams::kTrainedFileFieldNumber;
const int CaffeIpc_InitNetParams::kInputLayerNameFieldNumber;
const int CaffeIpc_InitNetParams::kInputLayerBottomIdxFieldNumber;
const int CaffeIpc_InitNetParams::kOutputLayerNameFieldNumber;
const int CaffeIpc_InitNetParams::kOutputLayerTopIdxFieldNumber;
const int CaffeIpc_InitNetParams::kInputNumChannelsIdxFieldNumber;
const int CaffeIpc_InitNetParams::kInputHeightIdxFieldNumber;
const int CaffeIpc_InitNetParams::kInputWidthIdxFieldNumber;
#endif  // !_MSC_VER

CaffeIpc_InitNetParams::CaffeIpc_InitNetParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeIpc_InitNetParams::InitAsDefaultInstance() {
}

CaffeIpc_InitNetParams::CaffeIpc_InitNetParams(const CaffeIpc_InitNetParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeIpc_InitNetParams::SharedCtor() {
  _cached_size_ = 0;
  model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trained_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_layer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_layer_bottom_idx_ = 0;
  output_layer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  output_layer_top_idx_ = 0;
  input_num_channels_idx_ = 0;
  input_height_idx_ = 0;
  input_width_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeIpc_InitNetParams::~CaffeIpc_InitNetParams() {
  SharedDtor();
}

void CaffeIpc_InitNetParams::SharedDtor() {
  if (model_file_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_;
  }
  if (trained_file_ != &::google::protobuf::internal::kEmptyString) {
    delete trained_file_;
  }
  if (input_layer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete input_layer_name_;
  }
  if (output_layer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete output_layer_name_;
  }
  if (this != default_instance_) {
  }
}

void CaffeIpc_InitNetParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeIpc_InitNetParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeIpc_InitNetParams_descriptor_;
}

const CaffeIpc_InitNetParams& CaffeIpc_InitNetParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

CaffeIpc_InitNetParams* CaffeIpc_InitNetParams::default_instance_ = NULL;

CaffeIpc_InitNetParams* CaffeIpc_InitNetParams::New() const {
  return new CaffeIpc_InitNetParams;
}

void CaffeIpc_InitNetParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_file()) {
      if (model_file_ != &::google::protobuf::internal::kEmptyString) {
        model_file_->clear();
      }
    }
    if (has_trained_file()) {
      if (trained_file_ != &::google::protobuf::internal::kEmptyString) {
        trained_file_->clear();
      }
    }
    if (has_input_layer_name()) {
      if (input_layer_name_ != &::google::protobuf::internal::kEmptyString) {
        input_layer_name_->clear();
      }
    }
    input_layer_bottom_idx_ = 0;
    if (has_output_layer_name()) {
      if (output_layer_name_ != &::google::protobuf::internal::kEmptyString) {
        output_layer_name_->clear();
      }
    }
    output_layer_top_idx_ = 0;
    input_num_channels_idx_ = 0;
    input_height_idx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    input_width_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeIpc_InitNetParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_file().data(), this->model_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trained_file;
        break;
      }

      // required string trained_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trained_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trained_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trained_file().data(), this->trained_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input_layer_name;
        break;
      }

      // required string input_layer_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_layer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_layer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_layer_name().data(), this->input_layer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_layer_bottom_idx;
        break;
      }

      // required int32 input_layer_bottom_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_layer_bottom_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_layer_bottom_idx_)));
          set_has_input_layer_bottom_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output_layer_name;
        break;
      }

      // required string output_layer_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_layer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_layer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_layer_name().data(), this->output_layer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_output_layer_top_idx;
        break;
      }

      // required int32 output_layer_top_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_layer_top_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_layer_top_idx_)));
          set_has_output_layer_top_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_input_num_channels_idx;
        break;
      }

      // required int32 input_num_channels_idx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_num_channels_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_num_channels_idx_)));
          set_has_input_num_channels_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_input_height_idx;
        break;
      }

      // required int32 input_height_idx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_height_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_height_idx_)));
          set_has_input_height_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_input_width_idx;
        break;
      }

      // required int32 input_width_idx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_width_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_width_idx_)));
          set_has_input_width_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeIpc_InitNetParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string model_file = 1;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file().data(), this->model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_file(), output);
  }

  // required string trained_file = 2;
  if (has_trained_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trained_file().data(), this->trained_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trained_file(), output);
  }

  // required string input_layer_name = 3;
  if (has_input_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_layer_name().data(), this->input_layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input_layer_name(), output);
  }

  // required int32 input_layer_bottom_idx = 4;
  if (has_input_layer_bottom_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->input_layer_bottom_idx(), output);
  }

  // required string output_layer_name = 5;
  if (has_output_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_layer_name().data(), this->output_layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->output_layer_name(), output);
  }

  // required int32 output_layer_top_idx = 6;
  if (has_output_layer_top_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->output_layer_top_idx(), output);
  }

  // required int32 input_num_channels_idx = 7;
  if (has_input_num_channels_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->input_num_channels_idx(), output);
  }

  // required int32 input_height_idx = 8;
  if (has_input_height_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->input_height_idx(), output);
  }

  // required int32 input_width_idx = 9;
  if (has_input_width_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->input_width_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeIpc_InitNetParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string model_file = 1;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file().data(), this->model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_file(), target);
  }

  // required string trained_file = 2;
  if (has_trained_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trained_file().data(), this->trained_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trained_file(), target);
  }

  // required string input_layer_name = 3;
  if (has_input_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_layer_name().data(), this->input_layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_layer_name(), target);
  }

  // required int32 input_layer_bottom_idx = 4;
  if (has_input_layer_bottom_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->input_layer_bottom_idx(), target);
  }

  // required string output_layer_name = 5;
  if (has_output_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_layer_name().data(), this->output_layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_layer_name(), target);
  }

  // required int32 output_layer_top_idx = 6;
  if (has_output_layer_top_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->output_layer_top_idx(), target);
  }

  // required int32 input_num_channels_idx = 7;
  if (has_input_num_channels_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->input_num_channels_idx(), target);
  }

  // required int32 input_height_idx = 8;
  if (has_input_height_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->input_height_idx(), target);
  }

  // required int32 input_width_idx = 9;
  if (has_input_width_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->input_width_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeIpc_InitNetParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string model_file = 1;
    if (has_model_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_file());
    }

    // required string trained_file = 2;
    if (has_trained_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trained_file());
    }

    // required string input_layer_name = 3;
    if (has_input_layer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_layer_name());
    }

    // required int32 input_layer_bottom_idx = 4;
    if (has_input_layer_bottom_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_layer_bottom_idx());
    }

    // required string output_layer_name = 5;
    if (has_output_layer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_layer_name());
    }

    // required int32 output_layer_top_idx = 6;
    if (has_output_layer_top_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_layer_top_idx());
    }

    // required int32 input_num_channels_idx = 7;
    if (has_input_num_channels_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_num_channels_idx());
    }

    // required int32 input_height_idx = 8;
    if (has_input_height_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_height_idx());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 input_width_idx = 9;
    if (has_input_width_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_width_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeIpc_InitNetParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeIpc_InitNetParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeIpc_InitNetParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeIpc_InitNetParams::MergeFrom(const CaffeIpc_InitNetParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_file()) {
      set_model_file(from.model_file());
    }
    if (from.has_trained_file()) {
      set_trained_file(from.trained_file());
    }
    if (from.has_input_layer_name()) {
      set_input_layer_name(from.input_layer_name());
    }
    if (from.has_input_layer_bottom_idx()) {
      set_input_layer_bottom_idx(from.input_layer_bottom_idx());
    }
    if (from.has_output_layer_name()) {
      set_output_layer_name(from.output_layer_name());
    }
    if (from.has_output_layer_top_idx()) {
      set_output_layer_top_idx(from.output_layer_top_idx());
    }
    if (from.has_input_num_channels_idx()) {
      set_input_num_channels_idx(from.input_num_channels_idx());
    }
    if (from.has_input_height_idx()) {
      set_input_height_idx(from.input_height_idx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_input_width_idx()) {
      set_input_width_idx(from.input_width_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeIpc_InitNetParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeIpc_InitNetParams::CopyFrom(const CaffeIpc_InitNetParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeIpc_InitNetParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CaffeIpc_InitNetParams::Swap(CaffeIpc_InitNetParams* other) {
  if (other != this) {
    std::swap(model_file_, other->model_file_);
    std::swap(trained_file_, other->trained_file_);
    std::swap(input_layer_name_, other->input_layer_name_);
    std::swap(input_layer_bottom_idx_, other->input_layer_bottom_idx_);
    std::swap(output_layer_name_, other->output_layer_name_);
    std::swap(output_layer_top_idx_, other->output_layer_top_idx_);
    std::swap(input_num_channels_idx_, other->input_num_channels_idx_);
    std::swap(input_height_idx_, other->input_height_idx_);
    std::swap(input_width_idx_, other->input_width_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeIpc_InitNetParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeIpc_InitNetParams_descriptor_;
  metadata.reflection = CaffeIpc_InitNetParams_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeIpc_DataParam::kNumParamsFieldNumber;
const int CaffeIpc_DataParam::kDataValFieldNumber;
#endif  // !_MSC_VER

CaffeIpc_DataParam::CaffeIpc_DataParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeIpc_DataParam::InitAsDefaultInstance() {
}

CaffeIpc_DataParam::CaffeIpc_DataParam(const CaffeIpc_DataParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeIpc_DataParam::SharedCtor() {
  _cached_size_ = 0;
  num_params_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeIpc_DataParam::~CaffeIpc_DataParam() {
  SharedDtor();
}

void CaffeIpc_DataParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CaffeIpc_DataParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeIpc_DataParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeIpc_DataParam_descriptor_;
}

const CaffeIpc_DataParam& CaffeIpc_DataParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

CaffeIpc_DataParam* CaffeIpc_DataParam::default_instance_ = NULL;

CaffeIpc_DataParam* CaffeIpc_DataParam::New() const {
  return new CaffeIpc_DataParam;
}

void CaffeIpc_DataParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_params_ = 0;
  }
  data_val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeIpc_DataParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_params_)));
          set_has_num_params();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_data_val;
        break;
      }

      // repeated float data_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_data_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_data_val;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeIpc_DataParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_params = 1;
  if (has_num_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_params(), output);
  }

  // repeated float data_val = 2;
  for (int i = 0; i < this->data_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->data_val(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeIpc_DataParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_params = 1;
  if (has_num_params()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_params(), target);
  }

  // repeated float data_val = 2;
  for (int i = 0; i < this->data_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->data_val(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeIpc_DataParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_params = 1;
    if (has_num_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_params());
    }

  }
  // repeated float data_val = 2;
  {
    int data_size = 0;
    data_size = 4 * this->data_val_size();
    total_size += 1 * this->data_val_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeIpc_DataParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeIpc_DataParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeIpc_DataParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeIpc_DataParam::MergeFrom(const CaffeIpc_DataParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_val_.MergeFrom(from.data_val_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_params()) {
      set_num_params(from.num_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeIpc_DataParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeIpc_DataParam::CopyFrom(const CaffeIpc_DataParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeIpc_DataParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CaffeIpc_DataParam::Swap(CaffeIpc_DataParam* other) {
  if (other != this) {
    std::swap(num_params_, other->num_params_);
    data_val_.Swap(&other->data_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeIpc_DataParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeIpc_DataParam_descriptor_;
  metadata.reflection = CaffeIpc_DataParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CaffeIpc::kTypeFieldNumber;
const int CaffeIpc::kInitNetParamsFieldNumber;
const int CaffeIpc::kInitNetDoneFieldNumber;
const int CaffeIpc::kDataParamFieldNumber;
#endif  // !_MSC_VER

CaffeIpc::CaffeIpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeIpc::InitAsDefaultInstance() {
  init_net_params_ = const_cast< ::CaffeIpc_InitNetParams*>(&::CaffeIpc_InitNetParams::default_instance());
  data_param_ = const_cast< ::CaffeIpc_DataParam*>(&::CaffeIpc_DataParam::default_instance());
}

CaffeIpc::CaffeIpc(const CaffeIpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeIpc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  init_net_params_ = NULL;
  init_net_done_ = false;
  data_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeIpc::~CaffeIpc() {
  SharedDtor();
}

void CaffeIpc::SharedDtor() {
  if (this != default_instance_) {
    delete init_net_params_;
    delete data_param_;
  }
}

void CaffeIpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeIpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeIpc_descriptor_;
}

const CaffeIpc& CaffeIpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

CaffeIpc* CaffeIpc::default_instance_ = NULL;

CaffeIpc* CaffeIpc::New() const {
  return new CaffeIpc;
}

void CaffeIpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_init_net_params()) {
      if (init_net_params_ != NULL) init_net_params_->::CaffeIpc_InitNetParams::Clear();
    }
    init_net_done_ = false;
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::CaffeIpc_DataParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeIpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CaffeIpc.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CaffeIpc_MsgType_IsValid(value)) {
            set_type(static_cast< ::CaffeIpc_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_init_net_params;
        break;
      }

      // optional .CaffeIpc.InitNetParams init_net_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_net_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_net_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_init_net_done;
        break;
      }

      // optional bool init_net_done = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_net_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &init_net_done_)));
          set_has_init_net_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_param;
        break;
      }

      // optional .CaffeIpc.DataParam data_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeIpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CaffeIpc.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .CaffeIpc.InitNetParams init_net_params = 2;
  if (has_init_net_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->init_net_params(), output);
  }

  // optional bool init_net_done = 3;
  if (has_init_net_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->init_net_done(), output);
  }

  // optional .CaffeIpc.DataParam data_param = 4;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeIpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CaffeIpc.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .CaffeIpc.InitNetParams init_net_params = 2;
  if (has_init_net_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->init_net_params(), target);
  }

  // optional bool init_net_done = 3;
  if (has_init_net_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->init_net_done(), target);
  }

  // optional .CaffeIpc.DataParam data_param = 4;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeIpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CaffeIpc.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .CaffeIpc.InitNetParams init_net_params = 2;
    if (has_init_net_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_net_params());
    }

    // optional bool init_net_done = 3;
    if (has_init_net_done()) {
      total_size += 1 + 1;
    }

    // optional .CaffeIpc.DataParam data_param = 4;
    if (has_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeIpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeIpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeIpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeIpc::MergeFrom(const CaffeIpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_init_net_params()) {
      mutable_init_net_params()->::CaffeIpc_InitNetParams::MergeFrom(from.init_net_params());
    }
    if (from.has_init_net_done()) {
      set_init_net_done(from.init_net_done());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::CaffeIpc_DataParam::MergeFrom(from.data_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeIpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeIpc::CopyFrom(const CaffeIpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeIpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_init_net_params()) {
    if (!this->init_net_params().IsInitialized()) return false;
  }
  if (has_data_param()) {
    if (!this->data_param().IsInitialized()) return false;
  }
  return true;
}

void CaffeIpc::Swap(CaffeIpc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(init_net_params_, other->init_net_params_);
    std::swap(init_net_done_, other->init_net_done_);
    std::swap(data_param_, other->data_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeIpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeIpc_descriptor_;
  metadata.reflection = CaffeIpc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
